function getJson(t,o,e,s){return t.get(e,{cache:s}).then(function(t){return t.data},function(t){openErrorModal(o,t.data)})}function openErrorModal(t,o){t.open({templateUrl:"/assets/html/errorModal.tmpl.html",controller:"modalCtrl",resolve:{data:function(){return o}}})}function getViewStoryUrl(){return"/page/stories/view/"}function getNewStoryUrl(){return"/page/stories/new/"}function getCompositesUrl(){return"/page/composites/"}function deleteStory(t,o,e,s,n){var r=s.defer(),a={status:"Delete Story",message:"Are you sure you want to delete this story?"},i=openConfirmationModal(t,a);return i.result.then(function(){o.delete("/stories/story/"+n).then(function(){e.path(getNewStoryUrl()),r.resolve("OK")},function(o){openErrorModal(t,o.data),r.reject("NOK")})},function(){r.reject("NOK")}),r.promise}function cssClass(t){return{"has-error":t.$invalid,"has-success":t.$valid&&t.$dirty}}function classNamePattern(){return/^[a-zA-Z_$][a-zA-Z\d_$]*$/}function newCollectionItem(t,o){13===t.which&&o.push({})}function removeCollectionElement(t,o){t.splice(o,1)}function buttonCssClass(t){return{"btn-success":t.$valid,"btn-danger":t.$invalid}}function openConfirmationModal(t,o){return t.open({templateUrl:"/assets/html/confirmationModal.tmpl.html",controller:"modalCtrl",resolve:{data:function(){return o}}})}function openCompositeClass(t,o){t.open({templateUrl:"/assets/html/compositeClasses/compositeClasses.tmpl.html",controller:"compositeClassesCtrl",resolve:{compositeClasses:function(t,o,e){return getJson(o,e,"/groovyComposites",!1)},compositeStepText:function(){return o}}})}function getCompositesJson(t,o){var e="/groovyComposites/"+o;return t.get(e,{cache:!1}).then(function(t){return t.data},function(){var t=o.substring(0,o.lastIndexOf("."));return{"class":t,composites:[{stepText:"",compositeSteps:[{}]}],isNew:!0}})}function stepTextPattern(){return/^(Given|When|Then) .+$/}function getStories(t,o,e,s){void 0===t.rootPath&&(t.rootPath=""),o.get("/stories/list.json?path="+t.rootPath+s).then(function(o){t.files=o.data,""!==s&&(t.rootPath+=s+"/")},function(t){openErrorModal(e,t.data)})}function openDir(t,o,e,s){if(".."===s){var n=t.rootPath.split("/");t.rootPath=n.slice(0,n.length-2).join("/"),""!==t.rootPath&&(t.rootPath+="/"),getStories(t,o,e,"")}else getStories(t,o,e,s)}function openRunnerParametersModal(t,o){return t.open({templateUrl:"/assets/html/runner/runnerParams.tmpl.html",controller:"runnerParamsCtrl",resolve:{data:function(t,o,e){return getJson(o,e,"/steps/classes.json",!0)},showGetApi:function(){return o}}})}function getRunnerStatusCss(t,o,e){return{"progress-bar progress-bar-info":t,"progress-bar progress-bar-warning":!t&&o&&e,"progress-bar progress-bar-success":!t&&o&&!e,"progress-bar progress-bar-danger":!t&&!o}}function getStoryRunnerStatusText(t,o,e){return t?"Story run is in progress":o?e>0?"Story run was successful with "+e+" pending steps":"Story run was successful":"Story run failed"}function getRunnerProgressCss(t){return{"progress progress-striped active":t,progress:!t}}angular.module("storiesModule",["ngRoute","ngCookies","ui.bootstrap","ui.sortable","configModule","bodyModule","topMenuModule","storyModule","compositeClassesModule","compositesModule","runnerModule"]).controller("modalCtrl",["$scope","$modalInstance","data",function(t,o,e){t.data=e,t.ok=function(){o.close("ok")},t.cancel=function(){o.dismiss("cancel")}}]).controller("storiesCtrl",["$scope","$http","$modal","$modalInstance","$location","$q",function(t,o,e,s,n,r){getStories(t,o,e,""),t.openDir=function(s){openDir(t,o,e,s)},t.close=function(){s.close()},t.viewStoryUrl=function(o){return getViewStoryUrl()+t.rootPath+o},t.allowToPrevDir=function(){return""!==t.rootPath},t.deleteStory=function(s,a){var i=t.rootPath+s+".story";deleteStory(e,o,n,r,i).then(function(){t.files.stories.splice(a,1)})},t.createDirectory=function(s){var n='{"path": "'+t.rootPath+s+'"}';o.post("/stories/dir.json",n).then(function(){t.files.dirs.push({name:s})},function(t){openErrorModal(e,t.data)})},t.getNewStoryUrl=function(){return getNewStoryUrl()}}]),angular.module("configModule",[]).config(["$routeProvider","$locationProvider",function(t,o){o.html5Mode(!0),t.when(getNewStoryUrl(),{templateUrl:"/assets/html/story/story.tmpl.html",controller:"storyCtrl",resolve:{story:["$http","$modal",function(t,o){return getJson(t,o,"/stories/story.json",!1)}],steps:["$http","$modal",function(t,o){return getJson(t,o,"/steps/list.json",!0)}],groovyComposites:["$http","$modal",function(t,o){return getJson(t,o,"/groovyComposites",!0)}]}}).when(getNewStoryUrl()+":path*",{templateUrl:"/assets/html/story/story.tmpl.html",controller:"storyCtrl",resolve:{story:["$route","$http","$modal",function(t,o,e){return getJson(o,e,"/stories/story.json?path="+t.current.params.path+".story",!1)}],steps:["$http","$modal",function(t,o){return getJson(t,o,"/steps/list.json",!0)}],groovyComposites:["$http","$modal",function(t,o){return getJson(t,o,"/groovyComposites",!0)}]}}).when(getViewStoryUrl()+":path*",{templateUrl:"/assets/html/story/story.tmpl.html",controller:"storyCtrl",resolve:{story:["$route","$http","$modal",function(t,o,e){return getJson(o,e,"/stories/story.json?path="+t.current.params.path+".story",!1)}],steps:["$http","$modal",function(t,o){return getJson(t,o,"/steps/list.json",!0)}],groovyComposites:["$http","$modal",function(t,o){return getJson(t,o,"/groovyComposites",!0)}]},reloadOnSearch:!1}).when(getCompositesUrl()+":className*",{templateUrl:"/assets/html/composites/composites.tmpl.html",controller:"compositesCtrl",resolve:{compositesClass:["$route","$http",function(t,o){return getCompositesJson(o,t.current.params.className)}],steps:["$http","$modal",function(t,o){return getJson(t,o,"/steps/list.json",!1)}]}}).when("/page/runner/",{templateUrl:"/assets/html/runner/runner.tmpl.html",controller:"runnerCtrl",resolve:{data:["$route",function(t){return{reportsPath:t.current.params.path}}]}}).otherwise({redirectTo:"/page/stories/new"})}]),angular.module("bodyModule",[]).controller("bodyCtrl",["$scope","$cookieStore","$location",function(t,o,e){t.history=o.get("history"),void 0===t.history&&(t.history=[]),t.addHistoryItem=function(s){for(angular.forEach(t.history,function(o,e){o.text===s&&t.removeHistoryItem(e)});t.history.length>=10;)t.removeHistoryItem(t.history.length-1);t.history.splice(0,0,{text:s,url:e.path()}),o.put("history",t.history)},t.removeHistoryItem=function(e){removeCollectionElement(t.history,e),o.put("history",t.history)}}]),angular.module("compositeClassesModule",[]).controller("compositeClassesCtrl",["$scope","$http","$modalInstance","compositeClasses","compositeStepText",function(t,o,e,s,n){t.compositeClasses=s,t.compositeStepText=n,t.close=function(){e.close()},t.compositeClassUrl=function(o,e){var s="/page/composites/";void 0!==o&&""!==o&&(s+=o+".");var n;return n=e.split(e.indexOf("/")>=0?"/":"\\"),s+=n[n.length-1],void 0!==t.compositeStepText&&""!==t.compositeStepText&&(s+="?stepText="+t.compositeStepText),s},t.compositeClassText=function(t){var o;o=t.split(t.indexOf("/")>=0?"/":"\\");var e=o[o.length-1];return e.indexOf(".")>=0&&(e=e.substr(0,e.lastIndexOf("."))),e},t.classNamePattern=classNamePattern,t.cssClass=cssClass,t.data={"class":""}}]),angular.module("compositesModule",[]).controller("compositesCtrl",["$scope","$http","$modal","$location","$cookieStore","compositesClass","steps",function(t,o,e,s,n,r,a){t.addCompositesTab=function(){t.compositesClass.isNew||t.addHistoryItem(t.compositesClass.class+" composites")},t.addNewComposite=function(){t.composite={stepText:"",compositeSteps:[{}]},t.compositesClass.composites.push(t.composite)},t.addStepTextParam=function(){void 0!==s.search().stepText&&""!==s.search().stepText&&t.compositesClass.composites.push({stepText:s.search().stepText,compositeSteps:[]})},t.addNewCompositeStep=function(){t.composite.compositeSteps.push({})},t.setLastComposite=function(){if(void 0!==t.compositesClass){var o=t.compositesClass.composites.length;t.composite=t.compositesClass.composites[o-1]}else t.composite={}},t.compositesClass=r,t.addStepTextParam(),t.originalCompositesClass=angular.copy(r),t.setLastComposite(),t.steps=a,t.classNamePattern=classNamePattern,t.stepTextPattern=stepTextPattern,t.cssClass=cssClass,t.buttonCssClass=function(t,o){return buttonCssClass(t.$valid?o:t)},t.openComposite=function(o){t.composite=o},t.newCollectionItem=newCollectionItem,t.removeCollectionElement=removeCollectionElement,t.revertCompositesClass=function(){t.compositesClass=angular.copy(t.originalCompositesClass),t.composite=t.compositesClass.composites[0]},t.canRevertCompositesClass=function(){return!angular.equals(t.compositesClass,t.originalCompositesClass)},t.canSaveCompositesClass=function(o){var e=o.$valid,s=!angular.equals(t.compositesClass,t.originalCompositesClass),n=t.compositesClass.isNew;return(n||s)&&e},t.compositesAreValid=function(o){var e=o.$valid;return angular.forEach(t.compositesClass.composites,function(t){void 0===t.stepText||""===t.stepText?e=!1:(void 0===t.compositeSteps||0===t.compositeSteps.length)&&(e=!1)}),e},t.saveCompositesClass=function(){o.put("/groovyComposites",t.compositesClass).then(function(){t.deleteCompositesClassWithoutConfirmation(),s.path("/page/composites/"+t.compositesClass.class+".groovy"),t.compositesClass.isNew=!1,t.originalCompositesClass=angular.copy(t.compositesClass),n.put("compositeClass",t.compositesClass.class),t.addCompositesTab()},function(t){openErrorModal(e,t.data)})},t.canDeleteCompositesClass=function(){return!t.compositesClass.isNew},t.deleteCompositesClassWithoutConfirmation=function(){var s=t.compositesClass.class,n=t.originalCompositesClass.class;s!==n&&o.delete("/groovyComposites/"+n).then(function(){},function(t){openErrorModal(e,t.data)})},t.deleteCompositesClass=function(){var n={status:"Delete Composites Class",message:"Are you sure you want to delete this composites class?"},r=openConfirmationModal(e,n);r.result.then(function(){o.delete("/groovyComposites/"+t.originalCompositesClass.class).then(function(){s.path("/")},function(t){openErrorModal(e,t.data)})},function(){})},t.saveCompositesText=function(){return t.compositesClass.isNew?"Create New Composites":"Update Composites"},t.addCompositesTab()}]),angular.module("runnerModule",[]).controller("runnerCtrl",["$scope","$modal","$http","$location",function(t,o,e,s){t.openRunnerSelector=function(){return o.open({templateUrl:"/assets/html/runner/runnerSelector.tmpl.html",controller:"runnerSelectorCtrl",resolve:{data:function(){return{}}}})},t.openRunner=function(){var s=t.openRunnerSelector();void 0!==s&&s.result.then(function(s){var n=[];s.dirs.forEach(function(t){n.push({path:t.path+"/**/*.story"})}),s.stories.forEach(function(t){n.push({path:t.path})}),openRunnerParametersModal(o,!0).result.then(function(o){var s=o.classes,r=o.action;e.get("/groovyComposites").then(function(o){var e=o.data;t.apiJson={storyPaths:n,classes:s,groovyComposites:e},"run"===r?(t.run(t.apiJson),t.showApi=!1):t.showApi=!0})})})},t.run=function(s){t.storyRunnerInProgress=!0,t.showRunnerProgress=!0,t.reportsUrl="",e.post("/runner/run.json",s).then(function(e){var s=e.data;"OK"===s.status?(t.reportsUrl=s.reportsPath.replace("public/","/assets/"),t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!0):"FAILED"===s.status?(t.reportsUrl=s.reportsPath.replace("public/","/assets/"),t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!1):openErrorModal(o,s),t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!0},function(e){t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!1,openErrorModal(o,e.data)})},t.getRunnerStatusCss=function(){return getRunnerStatusCss(t.storyRunnerInProgress,t.storyRunnerSuccess,t.pendingSteps>0)},t.getStoryRunnerStatusText=function(){return getStoryRunnerStatusText(t.storyRunnerInProgress,t.storyRunnerSuccess,t.pendingSteps.length)},t.getRunnerProgressCss=function(){return getRunnerProgressCss(t.storyRunnerInProgress)},t.init=function(){t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!1,t.showRunnerProgress=!1,t.pendingSteps=[],t.reportsUrl="",t.openRunner(),t.showApi=!1},t.apiUrl=function(){return s.protocol()+"://"+s.host()+":"+s.port()+"/runner/run.json"},t.init()}]).controller("runnerSelectorCtrl",["$scope","$http","$modal","$modalInstance",function(t,o,e,s){t.files={dirs:[],stories:[]},getStories(t,o,e,""),t.openDir=function(s){openDir(t,o,e,s)},t.cancelRunnerSelector=function(){s.dismiss("cancel")},t.okRunnerSelector=function(){var o={dirs:[],stories:[]};angular.forEach(t.files.dirs,function(e){e.selected&&o.dirs.push({path:t.rootPath+e.name})}),angular.forEach(t.files.stories,function(e){e.selected&&o.stories.push({path:t.rootPath+e.name+".story"})}),s.close(o)},t.allowToPrevDir=function(){return""!==t.rootPath},t.canContinue=function(){var o=!1;return angular.forEach(t.files.dirs,function(t){t.selected&&(o=!0)}),o||angular.forEach(t.files.stories,function(t){t.selected&&(o=!0)}),o}}]).controller("runnerParamsCtrl",["$scope","$modalInstance","$cookieStore","data","showGetApi",function(t,o,e,s,n){t.classes=s.classes,t.classes.forEach(function(t){t.params.forEach(function(o){try{o.value=e.get(t.fullName+"."+o.key)}catch(s){console.log("Could not retrieve cookie "+t.fullName+"."+o.key),console.log(s.message)}})}),t.hasParams=function(t){return void 0!==t.params&&t.params.length>0},t.ok=function(){o.close({action:"run",classes:t.classes})},t.cancel=function(){o.dismiss("cancel")},t.showGetApi=function(){return n},t.getApi=function(){o.close({action:"api",classes:t.classes})},t.paramElementId=function(t,o){var e=t.charAt(0).toLowerCase()+t.slice(1),s=o.charAt(0).toUpperCase()+o.slice(1);return e+s}}]),angular.module("storyModule",[]).controller("storyCtrl",["$scope","$http","$modal","$location","$cookieStore","$q","$anchorScroll","story","steps","groovyComposites",function(t,o,e,s,n,r,a,i,l,c){t.pendingSteps=[],t.setAction=function(){""!==t.story.name?(t.action="PUT",t.addHistoryItem(t.story.name+" story")):t.action="POST"},t.expandPanels=function(){var o=!0;void 0===t.panelsExpanded?t.panelsExpanded=!1:(t.panelsExpanded=!t.panelsExpanded,o=t.panelsExpanded),t.panels={story:t.panelsExpanded,description:t.panelsExpanded,meta:t.panelsExpanded,narrative:t.panelsExpanded,givenStories:t.panelsExpanded,lifecycle:t.panelsExpanded,scenarios:o}},t.story=i,t.steps=l,t.groovyComposites=c,t.stepTypes=["GIVEN","WHEN","THEN"],t.storyFormClass="col-md-12",t.storyRunnerVisible=!1,t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!0,t.expandPanels(),t.originalStory=angular.copy(i);var u=t.story.path.split("/");t.dirPath=u.slice(0,u.length-1).join("/"),""!==t.dirPath&&(t.dirPath+="/"),t.setAction(),t.cssClass=cssClass,t.buttonCssClass=buttonCssClass,t.canSaveStory=function(){var o=t.storyForm.$valid,e=!angular.equals(t.story,t.originalStory);return o&&e},t.stepTextPattern=stepTextPattern,t.saveStory=function(){if(t.canSaveStory())if(t.story.path=t.dirPath+t.story.name+".story","POST"===t.action){var n=t.dirPath.split("/"),r=n.slice(0,n.length-1).join("/");""!==r&&(r+="/"),o.post("/stories/story.json",t.story).then(function(){s.path(getViewStoryUrl()+r+t.story.name),t.originalStory=angular.copy(t.story)},function(o){t.openErrorModal(e,o.data)})}else t.story.name!==t.originalStory.name&&(t.story.originalPath=t.originalStory.path),o.put("/stories/story.json",t.story).then(function(){t.originalStory=angular.copy(t.story)},function(o){t.openErrorModal(e,o.data)})},t.canRunStory=function(){return t.storyForm.$valid&&!t.storyRunnerInProgress},t.runStory=function(){t.canRunStory()&&(t.saveStory(),t.openRunnerModal().result.then(function(s){var r=s.classes;t.storyFormClass="col-md-6",t.storyRunnerClass="col-md-6",t.storyRunnerVisible=!0,t.storyRunnerInProgress=!0,r.forEach(function(t){t.params.forEach(function(o){n.put(t.fullName+"."+o.key,o.value)})});var a={storyPaths:[{path:t.story.path}],classes:r,groovyComposites:t.groovyComposites};o.post("/runner/run.json",a).then(function(o){t.storyRunnerSuccess="OK"===o.data.status,t.storyRunnerInProgress=!1,t.getReports(o.data.id)},function(o){t.storyRunnerSuccess=!1,t.storyRunnerInProgress=!1,t.openErrorModal(e,o.data)})},function(o){t.openErrorModal(e,o.data)}))},t.getReports=function(s){o.get("/api/v1/reporters/list/"+s).then(function(o){t.reports=o.data,t.reports.id=s,t.setPendingSteps(t.reports)},function(o){t.openErrorModal(e,o.data)})},t.getReportUrl=function(t,o){return"/api/v1/reporters/get/"+t+"/"+o},t.openRunnerModal=function(){return openRunnerParametersModal(e,!1)},t.getRunnerProgressCss=function(){return getRunnerProgressCss(t.storyRunnerInProgress)},t.getRunnerStatusCss=function(){return getRunnerStatusCss(t.storyRunnerInProgress,t.storyRunnerSuccess,t.pendingSteps>0)},t.setPendingSteps=function(o){t.pendingSteps=[],o.forEach(function(o){o.steps.forEach(function(o){"pending"===o.status&&t.pendingSteps.push({text:o.text})})})},t.hasPendingSteps=function(){return void 0!==t.pendingSteps&&t.pendingSteps.length>0},t.getStoryRunnerStatusText=function(){return getStoryRunnerStatusText(t.storyRunnerInProgress,t.storyRunnerSuccess,t.pendingSteps.length)},t.removeCollectionElement=removeCollectionElement,t.addElement=function(t){t.push({})},t.addScenarioElement=function(t){t.push({title:"",meta:[],steps:[],examplesTable:""})},t.revertStory=function(){t.story=angular.copy(t.originalStory),t.storyForm.$setPristine()},t.canRevertStory=function(){return!angular.equals(t.story,t.originalStory)},t.canDeleteStory=function(){return"PUT"===t.action&&!t.storyRunnerInProgress},t.deleteStory=function(){var n=t.dirPath+t.story.name+".story";deleteStory(e,o,s,r,n)},t.stepEnterKey=newCollectionItem,t.clickPendingStep=function(t){var o=n.get("compositeClass");return void 0===o||""===o?openCompositeClass(e,t):s.search("stepText",t).path("/page/composites/composites.com.technologyconversations.bdd.steps."+o)},t.openErrorModal=openErrorModal}]),angular.module("topMenuModule",[]).controller("topMenuController",["$scope","$modal","$location",function(t,o,e){t.openStory=function(){o.open({templateUrl:"/assets/html/stories.tmpl.html",controller:"storiesCtrl",resolve:{data:function(){return{}}}})},t.openCompositeClass=function(){openCompositeClass(o)},t.getTitle=function(){var t=e.path();return 0===t.indexOf(getViewStoryUrl())?"View Story":0===t.indexOf(getNewStoryUrl())?"New Story":0===t.indexOf(getCompositesUrl())?"Composites":0===t.indexOf("/page/reports/")?"Reports":""}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlcyI6WyJpbmRleC5qcyIsImNvbmZpZy5qcyIsImNvbW1vblxcYm9keS5jdHJsLmpzIiwiY29tbW9uXFx1dGlsLmpzIiwiY29tcG9zaXRlQ2xhc3Nlc1xcY29tcG9zaXRlQ2xhc3Nlcy5jdHJsLmpzIiwiY29tcG9zaXRlc1xcY29tcG9zaXRlcy5jdHJsLmpzIiwicnVubmVyXFxydW5uZXIuY3RybC5qcyIsInN0b3J5XFxzdG9yeS5jdHJsLmpzIiwidG9wTWVudVxcdG9wTWVudS5jdHJsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStEQSxRQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxNQUFBLEdBQUEsSUFBQSxHQUFBLE1BQUEsSUFBQSxLQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsTUFDQSxTQUFBLEdBQ0EsZUFBQSxFQUFBLEVBQUEsUUFLQSxRQUFBLGdCQUFBLEVBQUEsR0FDQSxFQUFBLE1BQ0EsWUFBQSxvQ0FDQSxXQUFBLFlBQ0EsU0FDQSxLQUFBLFdBQ0EsTUFBQSxPQU1BLFFBQUEsbUJBQ0EsTUFBQSxzQkFHQSxRQUFBLGtCQUNBLE1BQUEscUJBR0EsUUFBQSxvQkFDQSxNQUFBLG9CQUlBLFFBQUEsYUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsUUFDQSxHQUFBLE9BQUEsZUFBQSxRQUFBLCtDQUNBLEVBQUEsc0JBQUEsRUFBQSxFQVlBLE9BWEEsR0FBQSxPQUFBLEtBQUEsV0FDQSxFQUFBLE9BQUEsa0JBQUEsR0FBQSxLQUFBLFdBQ0EsRUFBQSxLQUFBLGtCQUNBLEVBQUEsUUFBQSxPQUNBLFNBQUEsR0FDQSxlQUFBLEVBQUEsRUFBQSxNQUNBLEVBQUEsT0FBQSxVQUVBLFdBQ0EsRUFBQSxPQUFBLFNBRUEsRUFBQSxRQUlBLFFBQUEsVUFBQSxHQUNBLE9BQ0EsWUFBQSxFQUFBLFNBQ0EsY0FBQSxFQUFBLFFBQUEsRUFBQSxRQUlBLFFBQUEsb0JBQ0EsTUFBQSw0QkM1SEEsUUFBQSxtQkFBQSxFQUFBLEdBQ0EsS0FBQSxFQUFBLE9BQ0EsRUFBQSxTQUlBLFFBQUEseUJBQUEsRUFBQSxHQUNBLEVBQUEsT0FBQSxFQUFBLEdBR0EsUUFBQSxnQkFBQSxHQUNBLE9BQ0EsY0FBQSxFQUFBLE9BQ0EsYUFBQSxFQUFBLFVBS0EsUUFBQSx1QkFBQSxFQUFBLEdBQ0EsTUFBQSxHQUFBLE1BQ0EsWUFBQSwyQ0FDQSxXQUFBLFlBQ0EsU0FDQSxLQUFBLFdBQ0EsTUFBQSxPQU9BLFFBQUEsb0JBQUEsRUFBQSxHQUNBLEVBQUEsTUFDQSxZQUFBLDJEQUNBLFdBQUEsdUJBQ0EsU0FDQSxpQkFBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLE1BQUEsU0FBQSxFQUFBLEVBQUEscUJBQUEsSUFFQSxrQkFBQSxXQUNBLE1BQUEsT0FPQSxRQUFBLG1CQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEscUJBQUEsQ0FDQSxPQUFBLEdBQUEsSUFBQSxHQUFBLE9BQUEsSUFBQSxLQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsTUFDQSxXQUNBLEdBQUEsR0FBQSxFQUFBLFVBQUEsRUFBQSxFQUFBLFlBQUEsS0FDQSxRQUNBLFFBQUEsRUFDQSxhQUFBLFNBQUEsR0FBQSxzQkFDQSxPQUFBLEtBS0EsUUFBQSxtQkFDQSxNQUFBLHlCQUdBLFFBQUEsWUFBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLFNBQUEsRUFBQSxXQUNBLEVBQUEsU0FBQSxJQUVBLEVBQUEsSUFBQSwyQkFBQSxFQUFBLFNBQUEsR0FBQSxLQUFBLFNBQUEsR0FDQSxFQUFBLE1BQUEsRUFBQSxLQUNBLEtBQUEsSUFDQSxFQUFBLFVBQUEsRUFBQSxNQUVBLFNBQUEsR0FDQSxlQUFBLEVBQUEsRUFBQSxRQUlBLFFBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEdBQUEsT0FBQSxFQUFBLENBQ0EsR0FBQSxHQUFBLEVBQUEsU0FBQSxNQUFBLElBQ0EsR0FBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLEVBQUEsT0FBQSxHQUFBLEtBQUEsS0FDQSxLQUFBLEVBQUEsV0FDQSxFQUFBLFVBQUEsS0FFQSxXQUFBLEVBQUEsRUFBQSxFQUFBLFFBRUEsWUFBQSxFQUFBLEVBQUEsRUFBQSxHQUtBLFFBQUEsMkJBQUEsRUFBQSxHQUNBLE1BQUEsR0FBQSxNQUNBLFlBQUEsNkNBQ0EsV0FBQSxtQkFDQSxTQUNBLEtBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxNQUFBLFNBQUEsRUFBQSxFQUFBLHVCQUFBLElBRUEsV0FBQSxXQUNBLE1BQUEsT0FNQSxRQUFBLG9CQUFBLEVBQUEsRUFBQSxHQUNBLE9BQ0EsaUNBQUEsRUFDQSxxQ0FBQSxHQUFBLEdBQUEsRUFDQSxxQ0FBQSxHQUFBLElBQUEsRUFDQSxvQ0FBQSxJQUFBLEdBSUEsUUFBQSwwQkFBQSxFQUFBLEVBQUEsR0FDQSxNQUFBLEdBQ0EsMkJBQ0EsRUFDQSxFQUFBLEVBQ0EsaUNBQUEsRUFBQSxpQkFFQSwyQkFHQSxtQkFJQSxRQUFBLHNCQUFBLEdBQ0EsT0FDQSxtQ0FBQSxFQUNBLFVBQUEsR0R0SUEsUUFBQSxPQUFBLGlCQUNBLFVBQ0EsWUFDQSxlQUNBLGNBQ0EsZUFDQSxhQUNBLGdCQUNBLGNBQ0EseUJBQ0EsbUJBQ0EsaUJBRUEsV0FBQSxhQUFBLFNBQUEsaUJBQUEsT0FBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsS0FBQSxFQUVBLEVBQUEsR0FBQSxXQUNBLEVBQUEsTUFBQSxPQUdBLEVBQUEsT0FBQSxXQUNBLEVBQUEsUUFBQSxjQUdBLFdBQUEsZUFBQSxTQUFBLFFBQUEsU0FBQSxpQkFBQSxZQUFBLEtBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxXQUFBLEVBQUEsRUFBQSxFQUFBLElBQ0EsRUFBQSxRQUFBLFNBQUEsR0FDQSxRQUFBLEVBQUEsRUFBQSxFQUFBLElBR0EsRUFBQSxNQUFBLFdBQ0EsRUFBQSxTQUdBLEVBQUEsYUFBQSxTQUFBLEdBQ0EsTUFBQSxtQkFBQSxFQUFBLFNBQUEsR0FFQSxFQUFBLGVBQUEsV0FDQSxNQUFBLEtBQUEsRUFBQSxVQUdBLEVBQUEsWUFBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxTQUFBLEVBQUEsUUFDQSxhQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxLQUFBLFdBQ0EsRUFBQSxNQUFBLFFBQUEsT0FBQSxFQUFBLE1BSUEsRUFBQSxnQkFBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLGFBQUEsRUFBQSxTQUFBLEVBQUEsSUFDQSxHQUFBLEtBQUEsb0JBQUEsR0FBQSxLQUFBLFdBQ0EsRUFBQSxNQUFBLEtBQUEsTUFBQSxLQUFBLEtBQ0EsU0FBQSxHQUNBLGVBQUEsRUFBQSxFQUFBLFNBSUEsRUFBQSxlQUFBLFdBQ0EsTUFBQSxzQkUxREEsUUFBQSxPQUFBLG1CQUNBLFFBQUEsaUJBQUEsb0JBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxXQUFBLEdBQ0EsRUFFQSxLQUFBLGtCQUNBLFlBQUEscUNBQ0EsV0FBQSxZQUVBLFNBQ0EsT0FBQSxRQUFBLFNBQUEsU0FBQSxFQUFBLEdBQ0EsTUFBQSxTQUFBLEVBQUEsRUFBQSx1QkFBQSxLQUVBLE9BQUEsUUFBQSxTQUFBLFNBQUEsRUFBQSxHQUNBLE1BQUEsU0FBQSxFQUFBLEVBQUEsb0JBQUEsS0FFQSxrQkFBQSxRQUFBLFNBQUEsU0FBQSxFQUFBLEdBQ0EsTUFBQSxTQUFBLEVBQUEsRUFBQSxxQkFBQSxRQUlBLEtBQUEsaUJBQUEsVUFDQSxZQUFBLHFDQUNBLFdBQUEsWUFFQSxTQUNBLE9BQUEsU0FBQSxRQUFBLFNBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxNQUFBLFNBQUEsRUFBQSxFQUFBLDRCQUFBLEVBQUEsUUFBQSxPQUFBLEtBQUEsVUFBQSxLQUVBLE9BQUEsUUFBQSxTQUFBLFNBQUEsRUFBQSxHQUNBLE1BQUEsU0FBQSxFQUFBLEVBQUEsb0JBQUEsS0FFQSxrQkFBQSxRQUFBLFNBQUEsU0FBQSxFQUFBLEdBQ0EsTUFBQSxTQUFBLEVBQUEsRUFBQSxxQkFBQSxRQUlBLEtBQUEsa0JBQUEsVUFDQSxZQUFBLHFDQUNBLFdBQUEsWUFFQSxTQUNBLE9BQUEsU0FBQSxRQUFBLFNBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxNQUFBLFNBQUEsRUFBQSxFQUFBLDRCQUFBLEVBQUEsUUFBQSxPQUFBLEtBQUEsVUFBQSxLQUVBLE9BQUEsUUFBQSxTQUFBLFNBQUEsRUFBQSxHQUNBLE1BQUEsU0FBQSxFQUFBLEVBQUEsb0JBQUEsS0FFQSxrQkFBQSxRQUFBLFNBQUEsU0FBQSxFQUFBLEdBQ0EsTUFBQSxTQUFBLEVBQUEsRUFBQSxxQkFBQSxNQUdBLGdCQUFBLElBRUEsS0FBQSxtQkFBQSxlQUNBLFlBQUEsK0NBQ0EsV0FBQSxpQkFFQSxTQUNBLGlCQUFBLFNBQUEsUUFBQSxTQUFBLEVBQUEsR0FDQSxNQUFBLG1CQUFBLEVBQUEsRUFBQSxRQUFBLE9BQUEsYUFFQSxPQUFBLFFBQUEsU0FBQSxTQUFBLEVBQUEsR0FDQSxNQUFBLFNBQUEsRUFBQSxFQUFBLG9CQUFBLFFBSUEsS0FBQSxpQkFDQSxZQUFBLHVDQUNBLFdBQUEsYUFFQSxTQUNBLE1BQUEsU0FBQSxTQUFBLEdBQ0EsT0FBQSxZQUFBLEVBQUEsUUFBQSxPQUFBLFdBS0EsV0FDQSxXQUFBLHlCQy9FQSxRQUFBLE9BQUEsaUJBQ0EsV0FBQSxZQUFBLFNBQUEsZUFBQSxZQUFBLFNBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxRQUFBLEVBQUEsSUFBQSxXQUNBLFNBQUEsRUFBQSxVQUNBLEVBQUEsWUFFQSxFQUFBLGVBQUEsU0FBQSxHQU1BLElBTEEsUUFBQSxRQUFBLEVBQUEsUUFBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLE9BQUEsR0FDQSxFQUFBLGtCQUFBLEtBR0EsRUFBQSxRQUFBLFFBQUEsSUFDQSxFQUFBLGtCQUFBLEVBQUEsUUFBQSxPQUFBLEVBRUEsR0FBQSxRQUFBLE9BQUEsRUFBQSxHQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsU0FDQSxFQUFBLElBQUEsVUFBQSxFQUFBLFVBRUEsRUFBQSxrQkFBQSxTQUFBLEdBQ0Esd0JBQUEsRUFBQSxRQUFBLEdBQ0EsRUFBQSxJQUFBLFVBQUEsRUFBQSxhQ3BCQSxRQUFBLE9BQUEsNkJBQ0EsV0FBQSx3QkFBQSxTQUFBLFFBQUEsaUJBQUEsbUJBQUEsb0JBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxpQkFBQSxFQUNBLEVBQUEsa0JBQUEsRUFFQSxFQUFBLE1BQUEsV0FDQSxFQUFBLFNBRUEsRUFBQSxrQkFBQSxTQUFBLEVBQUEsR0FDQSxHQUFBLEdBQUEsbUJBQ0EsVUFBQSxHQUFBLEtBQUEsSUFDQSxHQUFBLEVBQUEsSUFFQSxJQUFBLEVBVUEsT0FSQSxHQUFBLEVBQUEsTUFEQSxFQUFBLFFBQUEsTUFBQSxFQUNBLElBRUEsTUFFQSxHQUFBLEVBQUEsRUFBQSxPQUFBLEdBQ0EsU0FBQSxFQUFBLG1CQUFBLEtBQUEsRUFBQSxvQkFDQSxHQUFBLGFBQUEsRUFBQSxtQkFFQSxHQUVBLEVBQUEsbUJBQUEsU0FBQSxHQUNBLEdBQUEsRUFFQSxHQUFBLEVBQUEsTUFEQSxFQUFBLFFBQUEsTUFBQSxFQUNBLElBRUEsS0FFQSxJQUFBLEdBQUEsRUFBQSxFQUFBLE9BQUEsRUFJQSxPQUhBLEdBQUEsUUFBQSxNQUFBLElBQ0EsRUFBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLFlBQUEsT0FFQSxHQUVBLEVBQUEsaUJBQUEsaUJBRUEsRUFBQSxTQUFBLFNBQ0EsRUFBQSxNQUFBLFFBQUEsT0N6Q0EsUUFBQSxPQUFBLHVCQUNBLFdBQUEsa0JBQUEsU0FBQSxRQUFBLFNBQUEsWUFBQSxlQUFBLGtCQUFBLFFBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsaUJBQUEsV0FDQSxFQUFBLGdCQUFBLE9BQ0EsRUFBQSxlQUFBLEVBQUEsZ0JBQUEsTUFBQSxnQkFHQSxFQUFBLGdCQUFBLFdBQ0EsRUFBQSxXQUFBLFNBQUEsR0FBQSxxQkFDQSxFQUFBLGdCQUFBLFdBQUEsS0FBQSxFQUFBLFlBRUEsRUFBQSxpQkFBQSxXQUNBLFNBQUEsRUFBQSxTQUFBLFVBQUEsS0FBQSxFQUFBLFNBQUEsVUFDQSxFQUFBLGdCQUFBLFdBQUEsTUFBQSxTQUFBLEVBQUEsU0FBQSxTQUFBLHFCQUdBLEVBQUEsb0JBQUEsV0FDQSxFQUFBLFVBQUEsZUFBQSxVQUVBLEVBQUEsaUJBQUEsV0FDQSxHQUFBLFNBQUEsRUFBQSxnQkFBQSxDQUNBLEdBQUEsR0FBQSxFQUFBLGdCQUFBLFdBQUEsTUFDQSxHQUFBLFVBQUEsRUFBQSxnQkFBQSxXQUFBLEVBQUEsT0FFQSxHQUFBLGNBR0EsRUFBQSxnQkFBQSxFQUNBLEVBQUEsbUJBQ0EsRUFBQSx3QkFBQSxRQUFBLEtBQUEsR0FDQSxFQUFBLG1CQUNBLEVBQUEsTUFBQSxFQUNBLEVBQUEsaUJBQUEsaUJBQ0EsRUFBQSxnQkFBQSxnQkFDQSxFQUFBLFNBQUEsU0FDQSxFQUFBLGVBQUEsU0FBQSxFQUFBLEdBQ0EsTUFHQSxnQkFIQSxFQUFBLE9BR0EsRUFGQSxJQUtBLEVBQUEsY0FBQSxTQUFBLEdBQ0EsRUFBQSxVQUFBLEdBRUEsRUFBQSxrQkFBQSxrQkFDQSxFQUFBLHdCQUFBLHdCQUNBLEVBQUEsc0JBQUEsV0FDQSxFQUFBLGdCQUFBLFFBQUEsS0FBQSxFQUFBLHlCQUNBLEVBQUEsVUFBQSxFQUFBLGdCQUFBLFdBQUEsSUFFQSxFQUFBLHlCQUFBLFdBQ0EsT0FBQSxRQUFBLE9BQUEsRUFBQSxnQkFBQSxFQUFBLDBCQUVBLEVBQUEsdUJBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLE9BQ0EsR0FBQSxRQUFBLE9BQUEsRUFBQSxnQkFBQSxFQUFBLHlCQUNBLEVBQUEsRUFBQSxnQkFBQSxLQUNBLFFBQUEsR0FBQSxJQUFBLEdBRUEsRUFBQSxtQkFBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsTUFRQSxPQVBBLFNBQUEsUUFBQSxFQUFBLGdCQUFBLFdBQUEsU0FBQSxHQUNBLFNBQUEsRUFBQSxVQUFBLEtBQUEsRUFBQSxTQUNBLEdBQUEsR0FDQSxTQUFBLEVBQUEsZ0JBQUEsSUFBQSxFQUFBLGVBQUEsVUFDQSxHQUFBLEtBR0EsR0FFQSxFQUFBLG9CQUFBLFdBQ0EsRUFBQSxJQUFBLG9CQUFBLEVBQUEsaUJBQUEsS0FBQSxXQUNBLEVBQUEsMkNBQ0EsRUFBQSxLQUFBLG9CQUFBLEVBQUEsZ0JBQUEsTUFBQSxXQUNBLEVBQUEsZ0JBQUEsT0FBQSxFQUNBLEVBQUEsd0JBQUEsUUFBQSxLQUFBLEVBQUEsaUJBQ0EsRUFBQSxJQUFBLGlCQUFBLEVBQUEsZ0JBQUEsT0FDQSxFQUFBLG9CQUNBLFNBQUEsR0FDQSxlQUFBLEVBQUEsRUFBQSxTQUdBLEVBQUEseUJBQUEsV0FDQSxPQUFBLEVBQUEsZ0JBQUEsT0FHQSxFQUFBLHlDQUFBLFdBQ0EsR0FBQSxHQUFBLEVBQUEsZ0JBQUEsTUFDQSxFQUFBLEVBQUEsd0JBQUEsS0FDQSxLQUFBLEdBQ0EsRUFBQSxPQUFBLHFCQUFBLEdBQUEsS0FBQSxhQUNBLFNBQUEsR0FDQSxlQUFBLEVBQUEsRUFBQSxTQUlBLEVBQUEsc0JBQUEsV0FDQSxHQUFBLElBQUEsT0FBQSwwQkFBQSxRQUFBLDBEQUNBLEVBQUEsc0JBQUEsRUFBQSxFQUNBLEdBQUEsT0FBQSxLQUFBLFdBQ0EsRUFBQSxPQUFBLHFCQUFBLEVBQUEsd0JBQUEsT0FBQSxLQUFBLFdBQ0EsRUFBQSxLQUFBLE1BQ0EsU0FBQSxHQUNBLGVBQUEsRUFBQSxFQUFBLFNBRUEsZUFJQSxFQUFBLG1CQUFBLFdBQ0EsTUFBQSxHQUFBLGdCQUFBLE1BQ0Esd0JBRUEscUJBSUEsRUFBQSxzQkN0SEEsUUFBQSxPQUFBLG1CQUNBLFdBQUEsY0FBQSxTQUFBLFNBQUEsUUFBQSxZQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FFQSxFQUFBLG1CQUFBLFdBQ0EsTUFBQSxHQUFBLE1BQ0EsWUFBQSwrQ0FDQSxXQUFBLHFCQUNBLFNBQ0EsS0FBQSxXQUNBLGNBTUEsRUFBQSxXQUFBLFdBQ0EsR0FBQSxHQUFBLEVBQUEsb0JBQ0EsVUFBQSxHQUNBLEVBQUEsT0FBQSxLQUFBLFNBQUEsR0FDQSxHQUFBLEtBQ0EsR0FBQSxLQUFBLFFBQUEsU0FBQSxHQUNBLEVBQUEsTUFBQSxLQUFBLEVBQUEsS0FBQSxrQkFFQSxFQUFBLFFBQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxNQUFBLEtBQUEsRUFBQSxTQUVBLDBCQUFBLEdBQUEsR0FBQSxPQUFBLEtBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLFFBQ0EsRUFBQSxFQUFBLE1BQ0EsR0FBQSxJQUFBLHFCQUFBLEtBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLElBQ0EsR0FBQSxTQUNBLFdBQUEsRUFDQSxRQUFBLEVBQ0EsaUJBQUEsR0FFQSxRQUFBLEdBQ0EsRUFBQSxJQUFBLEVBQUEsU0FDQSxFQUFBLFNBQUEsR0FFQSxFQUFBLFNBQUEsU0FPQSxFQUFBLElBQUEsU0FBQSxHQUNBLEVBQUEsdUJBQUEsRUFDQSxFQUFBLG9CQUFBLEVBQ0EsRUFBQSxXQUFBLEdBQ0EsRUFBQSxLQUFBLG1CQUFBLEdBQUEsS0FBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsSUFDQSxRQUFBLEVBQUEsUUFDQSxFQUFBLFdBQUEsRUFBQSxZQUFBLFFBQUEsVUFBQSxZQUNBLEVBQUEsdUJBQUEsRUFDQSxFQUFBLG9CQUFBLEdBQ0EsV0FBQSxFQUFBLFFBQ0EsRUFBQSxXQUFBLEVBQUEsWUFBQSxRQUFBLFVBQUEsWUFDQSxFQUFBLHVCQUFBLEVBQ0EsRUFBQSxvQkFBQSxHQUdBLGVBQUEsRUFBQSxHQUVBLEVBQUEsdUJBQUEsRUFDQSxFQUFBLG9CQUFBLEdBQ0EsU0FBQSxHQUNBLEVBQUEsdUJBQUEsRUFDQSxFQUFBLG9CQUFBLEVBQ0EsZUFBQSxFQUFBLEVBQUEsU0FHQSxFQUFBLG1CQUFBLFdBQ0EsTUFBQSxvQkFDQSxFQUFBLHNCQUNBLEVBQUEsbUJBQ0EsRUFBQSxhQUFBLElBR0EsRUFBQSx5QkFBQSxXQUNBLE1BQUEsMEJBQ0EsRUFBQSxzQkFDQSxFQUFBLG1CQUNBLEVBQUEsYUFBQSxTQUdBLEVBQUEscUJBQUEsV0FDQSxNQUFBLHNCQUFBLEVBQUEsd0JBRUEsRUFBQSxLQUFBLFdBQ0EsRUFBQSx1QkFBQSxFQUNBLEVBQUEsb0JBQUEsRUFDQSxFQUFBLG9CQUFBLEVBQ0EsRUFBQSxnQkFDQSxFQUFBLFdBQUEsR0FDQSxFQUFBLGFBQ0EsRUFBQSxTQUFBLEdBRUEsRUFBQSxPQUFBLFdBQ0EsTUFBQSxHQUFBLFdBQUEsTUFBQSxFQUFBLE9BQUEsSUFBQSxFQUFBLE9BQUEsb0JBRUEsRUFBQSxVQUVBLFdBQUEsc0JBQUEsU0FBQSxRQUFBLFNBQUEsaUJBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsT0FBQSxRQUFBLFlBQ0EsV0FBQSxFQUFBLEVBQUEsRUFBQSxJQUNBLEVBQUEsUUFBQSxTQUFBLEdBQ0EsUUFBQSxFQUFBLEVBQUEsRUFBQSxJQUVBLEVBQUEscUJBQUEsV0FDQSxFQUFBLFFBQUEsV0FFQSxFQUFBLGlCQUFBLFdBQ0EsR0FBQSxJQUFBLFFBQUEsV0FDQSxTQUFBLFFBQUEsRUFBQSxNQUFBLEtBQUEsU0FBQSxHQUNBLEVBQUEsVUFDQSxFQUFBLEtBQUEsTUFBQSxLQUFBLEVBQUEsU0FBQSxFQUFBLFNBR0EsUUFBQSxRQUFBLEVBQUEsTUFBQSxRQUFBLFNBQUEsR0FDQSxFQUFBLFVBQ0EsRUFBQSxRQUFBLE1BQUEsS0FBQSxFQUFBLFNBQUEsRUFBQSxLQUFBLGFBR0EsRUFBQSxNQUFBLElBRUEsRUFBQSxlQUFBLFdBQ0EsTUFBQSxLQUFBLEVBQUEsVUFFQSxFQUFBLFlBQUEsV0FDQSxHQUFBLElBQUEsQ0FhQSxPQVpBLFNBQUEsUUFBQSxFQUFBLE1BQUEsS0FBQSxTQUFBLEdBQ0EsRUFBQSxXQUNBLEdBQUEsS0FHQSxHQUNBLFFBQUEsUUFBQSxFQUFBLE1BQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxXQUNBLEdBQUEsS0FJQSxNQUdBLFdBQUEsb0JBQUEsU0FBQSxpQkFBQSxlQUFBLE9BQUEsYUFBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FDQSxFQUFBLFFBQUEsRUFBQSxRQUNBLEVBQUEsUUFBQSxRQUFBLFNBQUEsR0FDQSxFQUFBLE9BQUEsUUFBQSxTQUFBLEdBQ0EsSUFDQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsU0FBQSxJQUFBLEVBQUEsS0FDQSxNQUFBLEdBQ0EsUUFBQSxJQUFBLDZCQUFBLEVBQUEsU0FBQSxJQUFBLEVBQUEsS0FDQSxRQUFBLElBQUEsRUFBQSxjQUlBLEVBQUEsVUFBQSxTQUFBLEdBQ0EsTUFBQSxVQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsT0FBQSxHQUVBLEVBQUEsR0FBQSxXQUNBLEVBQUEsT0FBQSxPQUFBLE1BQUEsUUFBQSxFQUFBLFdBRUEsRUFBQSxPQUFBLFdBQ0EsRUFBQSxRQUFBLFdBRUEsRUFBQSxXQUFBLFdBQ0EsTUFBQSxJQUVBLEVBQUEsT0FBQSxXQUNBLEVBQUEsT0FBQSxPQUFBLE1BQUEsUUFBQSxFQUFBLFdBRUEsRUFBQSxlQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLE9BQUEsR0FBQSxjQUFBLEVBQUEsTUFBQSxHQUNBLEVBQUEsRUFBQSxPQUFBLEdBQUEsY0FBQSxFQUFBLE1BQUEsRUFDQSxPQUFBLEdBQUEsTUNqTEEsUUFBQSxPQUFBLGtCQUNBLFdBQUEsYUFBQSxTQUFBLFFBQUEsU0FBQSxZQUFBLGVBQUEsS0FBQSxnQkFBQSxRQUFBLFFBQUEsbUJBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsZ0JBQ0EsRUFBQSxVQUFBLFdBQ0EsS0FBQSxFQUFBLE1BQUEsTUFDQSxFQUFBLE9BQUEsTUFDQSxFQUFBLGVBQUEsRUFBQSxNQUFBLEtBQUEsV0FFQSxFQUFBLE9BQUEsUUFHQSxFQUFBLGFBQUEsV0FDQSxHQUFBLElBQUEsQ0FDQSxVQUFBLEVBQUEsZUFDQSxFQUFBLGdCQUFBLEdBRUEsRUFBQSxnQkFBQSxFQUFBLGVBQ0EsRUFBQSxFQUFBLGdCQUVBLEVBQUEsUUFDQSxNQUFBLEVBQUEsZUFDQSxZQUFBLEVBQUEsZUFDQSxLQUFBLEVBQUEsZUFDQSxVQUFBLEVBQUEsZUFDQSxhQUFBLEVBQUEsZUFDQSxVQUFBLEVBQUEsZUFDQSxVQUFBLElBR0EsRUFBQSxNQUFBLEVBQ0EsRUFBQSxNQUFBLEVBQ0EsRUFBQSxpQkFBQSxFQUNBLEVBQUEsV0FBQSxRQUFBLE9BQUEsUUFDQSxFQUFBLGVBQUEsWUFDQSxFQUFBLG9CQUFBLEVBQ0EsRUFBQSx1QkFBQSxFQUNBLEVBQUEsb0JBQUEsRUFDQSxFQUFBLGVBQ0EsRUFBQSxjQUFBLFFBQUEsS0FBQSxFQUNBLElBQUEsR0FBQSxFQUFBLE1BQUEsS0FBQSxNQUFBLElBQ0EsR0FBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLEVBQUEsT0FBQSxHQUFBLEtBQUEsS0FDQSxLQUFBLEVBQUEsVUFDQSxFQUFBLFNBQUEsS0FFQSxFQUFBLFlBQ0EsRUFBQSxTQUFBLFNBQ0EsRUFBQSxlQUFBLGVBQ0EsRUFBQSxhQUFBLFdBQ0EsR0FBQSxHQUFBLEVBQUEsVUFBQSxPQUNBLEdBQUEsUUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLGNBQ0EsT0FBQSxJQUFBLEdBRUEsRUFBQSxnQkFBQSxnQkFFQSxFQUFBLFVBQUEsV0FDQSxHQUFBLEVBQUEsZUFFQSxHQURBLEVBQUEsTUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsS0FBQSxTQUNBLFNBQUEsRUFBQSxPQUFBLENBQ0EsR0FBQSxHQUFBLEVBQUEsUUFBQSxNQUFBLEtBQ0EsRUFBQSxFQUFBLE1BQUEsRUFBQSxFQUFBLE9BQUEsR0FBQSxLQUFBLElBQ0EsTUFBQSxJQUNBLEdBQUEsS0FFQSxFQUFBLEtBQUEsc0JBQUEsRUFBQSxPQUFBLEtBQUEsV0FDQSxFQUFBLEtBQUEsa0JBQUEsRUFBQSxFQUFBLE1BQUEsTUFDQSxFQUFBLGNBQUEsUUFBQSxLQUFBLEVBQUEsUUFDQSxTQUFBLEdBQ0EsRUFBQSxlQUFBLEVBQUEsRUFBQSxZQUdBLEdBQUEsTUFBQSxPQUFBLEVBQUEsY0FBQSxPQUNBLEVBQUEsTUFBQSxhQUFBLEVBQUEsY0FBQSxNQUVBLEVBQUEsSUFBQSxzQkFBQSxFQUFBLE9BQUEsS0FBQSxXQUNBLEVBQUEsY0FBQSxRQUFBLEtBQUEsRUFBQSxRQUNBLFNBQUEsR0FDQSxFQUFBLGVBQUEsRUFBQSxFQUFBLFNBS0EsRUFBQSxZQUFBLFdBQ0EsTUFBQSxHQUFBLFVBQUEsU0FBQSxFQUFBLHVCQUdBLEVBQUEsU0FBQSxXQUNBLEVBQUEsZ0JBQ0EsRUFBQSxZQUNBLEVBQUEsa0JBQUEsT0FBQSxLQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxPQUNBLEdBQUEsZUFBQSxXQUNBLEVBQUEsaUJBQUEsV0FDQSxFQUFBLG9CQUFBLEVBQ0EsRUFBQSx1QkFBQSxFQUNBLEVBQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxPQUFBLFFBQUEsU0FBQSxHQUNBLEVBQUEsSUFBQSxFQUFBLFNBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxVQUdBLElBQUEsSUFDQSxhQUFBLEtBQUEsRUFBQSxNQUFBLE9BQ0EsUUFBQSxFQUNBLGlCQUFBLEVBQUEsaUJBRUEsR0FBQSxLQUFBLG1CQUFBLEdBQUEsS0FBQSxTQUFBLEdBQ0EsRUFBQSxtQkFBQSxPQUFBLEVBQUEsS0FBQSxPQUNBLEVBQUEsdUJBQUEsRUFDQSxFQUFBLFdBQUEsRUFBQSxLQUFBLEtBQ0EsU0FBQSxHQUNBLEVBQUEsb0JBQUEsRUFDQSxFQUFBLHVCQUFBLEVBQ0EsRUFBQSxlQUFBLEVBQUEsRUFBQSxTQUVBLFNBQUEsR0FDQSxFQUFBLGVBQUEsRUFBQSxFQUFBLFVBSUEsRUFBQSxXQUFBLFNBQUEsR0FDQSxFQUFBLElBQUEsMEJBQUEsR0FBQSxLQUFBLFNBQUEsR0FDQSxFQUFBLFFBQUEsRUFBQSxLQUNBLEVBQUEsUUFBQSxHQUFBLEVBQ0EsRUFBQSxnQkFBQSxFQUFBLFVBQ0EsU0FBQSxHQUVBLEVBQUEsZUFBQSxFQUFBLEVBQUEsU0FHQSxFQUFBLGFBQUEsU0FBQSxFQUFBLEdBQ0EsTUFBQSx5QkFBQSxFQUFBLElBQUEsR0FHQSxFQUFBLGdCQUFBLFdBQ0EsTUFBQSwyQkFBQSxHQUFBLElBRUEsRUFBQSxxQkFBQSxXQUNBLE1BQUEsc0JBQUEsRUFBQSx3QkFFQSxFQUFBLG1CQUFBLFdBQ0EsTUFBQSxvQkFDQSxFQUFBLHNCQUNBLEVBQUEsbUJBQ0EsRUFBQSxhQUFBLElBR0EsRUFBQSxnQkFBQSxTQUFBLEdBQ0EsRUFBQSxnQkFDQSxFQUFBLFFBQUEsU0FBQSxHQUNBLEVBQUEsTUFBQSxRQUFBLFNBQUEsR0FDQSxZQUFBLEVBQUEsUUFDQSxFQUFBLGFBQUEsTUFBQSxLQUFBLEVBQUEsWUFLQSxFQUFBLGdCQUFBLFdBQ0EsTUFBQSxVQUFBLEVBQUEsY0FBQSxFQUFBLGFBQUEsT0FBQSxHQUVBLEVBQUEseUJBQUEsV0FDQSxNQUFBLDBCQUNBLEVBQUEsc0JBQ0EsRUFBQSxtQkFDQSxFQUFBLGFBQUEsU0FHQSxFQUFBLHdCQUFBLHdCQUNBLEVBQUEsV0FBQSxTQUFBLEdBQ0EsRUFBQSxVQUVBLEVBQUEsbUJBQUEsU0FBQSxHQUNBLEVBQUEsTUFBQSxNQUFBLEdBQUEsUUFBQSxTQUFBLGNBQUEsTUFFQSxFQUFBLFlBQUEsV0FDQSxFQUFBLE1BQUEsUUFBQSxLQUFBLEVBQUEsZUFDQSxFQUFBLFVBQUEsZ0JBRUEsRUFBQSxlQUFBLFdBQ0EsT0FBQSxRQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsZ0JBRUEsRUFBQSxlQUFBLFdBQ0EsTUFBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLHVCQUdBLEVBQUEsWUFBQSxXQUNBLEdBQUEsR0FBQSxFQUFBLFFBQUEsRUFBQSxNQUFBLEtBQUEsUUFDQSxhQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsSUFFQSxFQUFBLGFBQUEsa0JBRUEsRUFBQSxpQkFBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsSUFBQSxpQkFDQSxPQUFBLFVBQUEsR0FBQSxLQUFBLEVBQ0EsbUJBQUEsRUFBQSxHQUVBLEVBQUEsT0FBQSxXQUFBLEdBQUEsS0FBQSxxRUFBQSxJQUlBLEVBQUEsZUFBQSxrQkN0TUEsUUFBQSxPQUFBLG9CQUNBLFdBQUEscUJBQUEsU0FBQSxTQUFBLFlBQUEsU0FBQSxFQUFBLEVBQUEsR0FFQSxFQUFBLFVBQUEsV0FDQSxFQUFBLE1BQ0EsWUFBQSxpQ0FDQSxXQUFBLGNBQ0EsU0FDQSxLQUFBLFdBQ0EsY0FNQSxFQUFBLG1CQUFBLFdBQ0EsbUJBQUEsSUFFQSxFQUFBLFNBQUEsV0FDQSxHQUFBLEdBQUEsRUFBQSxNQUNBLE9BQUEsS0FBQSxFQUFBLFFBQUEsbUJBQ0EsYUFDQSxJQUFBLEVBQUEsUUFBQSxrQkFDQSxZQUNBLElBQUEsRUFBQSxRQUFBLG9CQUNBLGFBQ0EsSUFBQSxFQUFBLFFBQUEsa0JBQ0EsVUFFQSIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdzdG9yaWVzTW9kdWxlJywgW1xyXG4gICAgJ25nUm91dGUnLFxyXG4gICAgJ25nQ29va2llcycsXHJcbiAgICAndWkuYm9vdHN0cmFwJyxcclxuICAgICd1aS5zb3J0YWJsZScsXHJcbiAgICAnY29uZmlnTW9kdWxlJyxcclxuICAgICdib2R5TW9kdWxlJyxcclxuICAgICd0b3BNZW51TW9kdWxlJyxcclxuICAgICdzdG9yeU1vZHVsZScsXHJcbiAgICAnY29tcG9zaXRlQ2xhc3Nlc01vZHVsZScsXHJcbiAgICAnY29tcG9zaXRlc01vZHVsZScsXHJcbiAgICAncnVubmVyTW9kdWxlJ1xyXG5dKVxyXG4gICAgLmNvbnRyb2xsZXIoJ21vZGFsQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJG1vZGFsSW5zdGFuY2UsIGRhdGEpIHtcclxuICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSgnb2snKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgIH07XHJcbiAgICB9KVxyXG4gICAgLmNvbnRyb2xsZXIoJ3N0b3JpZXNDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJG1vZGFsLCAkbW9kYWxJbnN0YW5jZSwgJGxvY2F0aW9uLCAkcSkge1xyXG4gICAgICAgIGdldFN0b3JpZXMoJHNjb3BlLCAkaHR0cCwgJG1vZGFsLCAnJyk7XHJcbiAgICAgICAgJHNjb3BlLm9wZW5EaXIgPSBmdW5jdGlvbihwYXRoKSB7XHJcbiAgICAgICAgICAgIG9wZW5EaXIoJHNjb3BlLCAkaHR0cCwgJG1vZGFsLCBwYXRoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICRzY29wZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgJHNjb3BlLnZpZXdTdG9yeVVybCA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldFZpZXdTdG9yeVVybCgpICsgJHNjb3BlLnJvb3RQYXRoICsgbmFtZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5hbGxvd1RvUHJldkRpciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLnJvb3RQYXRoICE9PSAnJztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICRzY29wZS5kZWxldGVTdG9yeSA9IGZ1bmN0aW9uKG5hbWUsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIHZhciBwYXRoID0gJHNjb3BlLnJvb3RQYXRoICsgbmFtZSArICcuc3RvcnknO1xyXG4gICAgICAgICAgICBkZWxldGVTdG9yeSgkbW9kYWwsICRodHRwLCAkbG9jYXRpb24sICRxLCBwYXRoKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVzLnN0b3JpZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAkc2NvcGUuY3JlYXRlRGlyZWN0b3J5ID0gZnVuY3Rpb24ocGF0aCkge1xyXG4gICAgICAgICAgICB2YXIganNvbiA9ICd7XCJwYXRoXCI6IFwiJyArICRzY29wZS5yb290UGF0aCArIHBhdGggKyAnXCJ9JztcclxuICAgICAgICAgICAgJGh0dHAucG9zdCgnL3N0b3JpZXMvZGlyLmpzb24nLCBqc29uKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVzLmRpcnMucHVzaCh7bmFtZTogcGF0aH0pO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgb3BlbkVycm9yTW9kYWwoJG1vZGFsLCByZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAkc2NvcGUuZ2V0TmV3U3RvcnlVcmwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldE5ld1N0b3J5VXJsKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG5cclxuLy8gVE9ETyBUZXN0XHJcbmZ1bmN0aW9uIGdldEpzb24oJGh0dHAsICRtb2RhbCwgdXJsLCBjYWNoZVR5cGUpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQodXJsLCB7Y2FjaGU6IGNhY2hlVHlwZX0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcclxuICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgb3BlbkVycm9yTW9kYWwoJG1vZGFsLCByZXNwb25zZS5kYXRhKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vLyBUT0RPIFRlc3RcclxuZnVuY3Rpb24gb3BlbkVycm9yTW9kYWwoJG1vZGFsLCBkYXRhKSB7XHJcbiAgICAkbW9kYWwub3Blbih7XHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXNzZXRzL2h0bWwvZXJyb3JNb2RhbC50bXBsLmh0bWwnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdtb2RhbEN0cmwnLFxyXG4gICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRWaWV3U3RvcnlVcmwoKSB7XHJcbiAgICByZXR1cm4gJy9wYWdlL3N0b3JpZXMvdmlldy8nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXROZXdTdG9yeVVybCgpIHtcclxuICAgIHJldHVybiAnL3BhZ2Uvc3Rvcmllcy9uZXcvJztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q29tcG9zaXRlc1VybCgpIHtcclxuICAgIHJldHVybiAnL3BhZ2UvY29tcG9zaXRlcy8nO1xyXG59XHJcblxyXG4vLyBUT0RPIFRlc3RcclxuZnVuY3Rpb24gZGVsZXRlU3RvcnkoJG1vZGFsLCAkaHR0cCwgJGxvY2F0aW9uLCAkcSwgcGF0aCkge1xyXG4gICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuICAgIHZhciBtZXNzYWdlID0ge3N0YXR1czogJ0RlbGV0ZSBTdG9yeScsIG1lc3NhZ2U6ICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgc3Rvcnk/J307XHJcbiAgICB2YXIgb2tNb2RhbCA9IG9wZW5Db25maXJtYXRpb25Nb2RhbCgkbW9kYWwsIG1lc3NhZ2UpO1xyXG4gICAgb2tNb2RhbC5yZXN1bHQudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAkaHR0cC5kZWxldGUoJy9zdG9yaWVzL3N0b3J5LycgKyBwYXRoKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkbG9jYXRpb24ucGF0aChnZXROZXdTdG9yeVVybCgpKTtcclxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgnT0snKTtcclxuICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICBvcGVuRXJyb3JNb2RhbCgkbW9kYWwsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoJ05PSycpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KCdOT0snKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbn1cclxuXHJcbi8vIFRPRE8gVGVzdFxyXG5mdW5jdGlvbiBjc3NDbGFzcyhuZ01vZGVsQ29udHJvbGxlcikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAnaGFzLWVycm9yJzogbmdNb2RlbENvbnRyb2xsZXIuJGludmFsaWQsXHJcbiAgICAgICAgJ2hhcy1zdWNjZXNzJzogbmdNb2RlbENvbnRyb2xsZXIuJHZhbGlkICYmIG5nTW9kZWxDb250cm9sbGVyLiRkaXJ0eVxyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2xhc3NOYW1lUGF0dGVybigpIHtcclxuICAgIHJldHVybiAoL15bYS16QS1aXyRdW2EtekEtWlxcZF8kXSokLyk7XHJcbn0iLCJhbmd1bGFyLm1vZHVsZSgnY29uZmlnTW9kdWxlJywgW10pXHJcbiAgICAuY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xyXG4gICAgICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcclxuICAgICAgICAkcm91dGVQcm92aWRlclxyXG4gICAgICAgICAgICAvLyBUT0RPIFJlbW92ZSBkdXBsaWNhdGlvbiBpbiByZXNvbHZlXHJcbiAgICAgICAgICAgIC53aGVuKGdldE5ld1N0b3J5VXJsKCksIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2Fzc2V0cy9odG1sL3N0b3J5L3N0b3J5LnRtcGwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc3RvcnlDdHJsJyxcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0b3J5OiBmdW5jdGlvbigkaHR0cCwgJG1vZGFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRKc29uKCRodHRwLCAkbW9kYWwsICcvc3Rvcmllcy9zdG9yeS5qc29uJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc3RlcHM6IGZ1bmN0aW9uKCRodHRwLCAkbW9kYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEpzb24oJGh0dHAsICRtb2RhbCwgJy9zdGVwcy9saXN0Lmpzb24nLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGdyb292eUNvbXBvc2l0ZXM6IGZ1bmN0aW9uKCRodHRwLCAkbW9kYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEpzb24oJGh0dHAsICRtb2RhbCwgJy9ncm9vdnlDb21wb3NpdGVzJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAud2hlbihnZXROZXdTdG9yeVVybCgpICsgJzpwYXRoKicsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2Fzc2V0cy9odG1sL3N0b3J5L3N0b3J5LnRtcGwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc3RvcnlDdHJsJyxcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0b3J5OiBmdW5jdGlvbigkcm91dGUsICRodHRwLCAkbW9kYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEpzb24oJGh0dHAsICRtb2RhbCwgJy9zdG9yaWVzL3N0b3J5Lmpzb24/cGF0aD0nICsgJHJvdXRlLmN1cnJlbnQucGFyYW1zLnBhdGggKyAnLnN0b3J5JywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc3RlcHM6IGZ1bmN0aW9uKCRodHRwLCAkbW9kYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEpzb24oJGh0dHAsICRtb2RhbCwgJy9zdGVwcy9saXN0Lmpzb24nLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGdyb292eUNvbXBvc2l0ZXM6IGZ1bmN0aW9uKCRodHRwLCAkbW9kYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEpzb24oJGh0dHAsICRtb2RhbCwgJy9ncm9vdnlDb21wb3NpdGVzJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAud2hlbihnZXRWaWV3U3RvcnlVcmwoKSArICc6cGF0aConLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hc3NldHMvaHRtbC9zdG9yeS9zdG9yeS50bXBsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3N0b3J5Q3RybCcsXHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBzdG9yeTogZnVuY3Rpb24oJHJvdXRlLCAkaHR0cCwgJG1vZGFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRKc29uKCRodHRwLCAkbW9kYWwsICcvc3Rvcmllcy9zdG9yeS5qc29uP3BhdGg9JyArICRyb3V0ZS5jdXJyZW50LnBhcmFtcy5wYXRoICsgJy5zdG9yeScsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBzOiBmdW5jdGlvbigkaHR0cCwgJG1vZGFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRKc29uKCRodHRwLCAkbW9kYWwsICcvc3RlcHMvbGlzdC5qc29uJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBncm9vdnlDb21wb3NpdGVzOiBmdW5jdGlvbigkaHR0cCwgJG1vZGFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRKc29uKCRodHRwLCAkbW9kYWwsICcvZ3Jvb3Z5Q29tcG9zaXRlcycsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZWxvYWRPblNlYXJjaDogZmFsc2VcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLndoZW4oZ2V0Q29tcG9zaXRlc1VybCgpICsgJzpjbGFzc05hbWUqJywge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXNzZXRzL2h0bWwvY29tcG9zaXRlcy9jb21wb3NpdGVzLnRtcGwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnY29tcG9zaXRlc0N0cmwnLFxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9zaXRlc0NsYXNzOiBmdW5jdGlvbigkcm91dGUsICRodHRwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRDb21wb3NpdGVzSnNvbigkaHR0cCwgJHJvdXRlLmN1cnJlbnQucGFyYW1zLmNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBzdGVwczogZnVuY3Rpb24oJGh0dHAsICRtb2RhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0SnNvbigkaHR0cCwgJG1vZGFsLCAnL3N0ZXBzL2xpc3QuanNvbicsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC53aGVuKCcvcGFnZS9ydW5uZXIvJywge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXNzZXRzL2h0bWwvcnVubmVyL3J1bm5lci50bXBsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3J1bm5lckN0cmwnLFxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24oJHJvdXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7cmVwb3J0c1BhdGg6ICRyb3V0ZS5jdXJyZW50LnBhcmFtcy5wYXRofTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICAgICAub3RoZXJ3aXNlKHtcclxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VG86ICcvcGFnZS9zdG9yaWVzL25ldydcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2JvZHlNb2R1bGUnLCBbXSlcbiAgICAuY29udHJvbGxlcignYm9keUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkY29va2llU3RvcmUsICRsb2NhdGlvbikge1xuICAgICAgICAkc2NvcGUuaGlzdG9yeSA9ICRjb29raWVTdG9yZS5nZXQoJ2hpc3RvcnknKTtcbiAgICAgICAgaWYgKCRzY29wZS5oaXN0b3J5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICRzY29wZS5oaXN0b3J5ID0gW107XG4gICAgICAgIH1cbiAgICAgICAgJHNjb3BlLmFkZEhpc3RvcnlJdGVtID0gZnVuY3Rpb24odGV4dCkge1xuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5oaXN0b3J5LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLnRleHQgPT09IHRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZUhpc3RvcnlJdGVtKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3aGlsZSgkc2NvcGUuaGlzdG9yeS5sZW5ndGggPj0gMTApIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlSGlzdG9yeUl0ZW0oJHNjb3BlLmhpc3RvcnkubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkc2NvcGUuaGlzdG9yeS5zcGxpY2UoMCwgMCwge3RleHQ6IHRleHQsIHVybDogJGxvY2F0aW9uLnBhdGgoKX0pO1xuICAgICAgICAgICAgJGNvb2tpZVN0b3JlLnB1dCgnaGlzdG9yeScsICRzY29wZS5oaXN0b3J5KTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLnJlbW92ZUhpc3RvcnlJdGVtID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIHJlbW92ZUNvbGxlY3Rpb25FbGVtZW50KCRzY29wZS5oaXN0b3J5LCBpbmRleCk7XG4gICAgICAgICAgICAkY29va2llU3RvcmUucHV0KCdoaXN0b3J5JywgJHNjb3BlLmhpc3RvcnkpO1xuICAgICAgICB9O1xuICAgIH0pO1xuIiwiZnVuY3Rpb24gbmV3Q29sbGVjdGlvbkl0ZW0oZXZlbnQsIGNvbGxlY3Rpb24pIHtcclxuICAgIGlmIChldmVudC53aGljaCA9PT0gMTMpIHtcclxuICAgICAgICBjb2xsZWN0aW9uLnB1c2goe30pO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVDb2xsZWN0aW9uRWxlbWVudChjb2xsZWN0aW9uLCBpbmRleCkge1xyXG4gICAgY29sbGVjdGlvbi5zcGxpY2UoaW5kZXgsIDEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBidXR0b25Dc3NDbGFzcyhuZ01vZGVsQ29udHJvbGxlcikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAnYnRuLXN1Y2Nlc3MnOiBuZ01vZGVsQ29udHJvbGxlci4kdmFsaWQsXHJcbiAgICAgICAgJ2J0bi1kYW5nZXInOiBuZ01vZGVsQ29udHJvbGxlci4kaW52YWxpZFxyXG4gICAgfTtcclxufVxyXG5cclxuLy8gVE9ETyBUZXN0XHJcbmZ1bmN0aW9uIG9wZW5Db25maXJtYXRpb25Nb2RhbCgkbW9kYWwsIGRhdGEpIHtcclxuICAgIHJldHVybiAkbW9kYWwub3Blbih7XHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXNzZXRzL2h0bWwvY29uZmlybWF0aW9uTW9kYWwudG1wbC5odG1sJyxcclxuICAgICAgICBjb250cm9sbGVyOiAnbW9kYWxDdHJsJyxcclxuICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy8gVE9ETyBUZXN0XHJcbmZ1bmN0aW9uIG9wZW5Db21wb3NpdGVDbGFzcygkbW9kYWwsIGNvbXBvc2l0ZVN0ZXBUZXh0KSB7XHJcbiAgICAkbW9kYWwub3Blbih7XHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXNzZXRzL2h0bWwvY29tcG9zaXRlQ2xhc3Nlcy9jb21wb3NpdGVDbGFzc2VzLnRtcGwuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ2NvbXBvc2l0ZUNsYXNzZXNDdHJsJyxcclxuICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgIGNvbXBvc2l0ZUNsYXNzZXM6IGZ1bmN0aW9uKCRyb3V0ZSwgJGh0dHAsICRtb2RhbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEpzb24oJGh0dHAsICRtb2RhbCwgJy9ncm9vdnlDb21wb3NpdGVzJywgZmFsc2UpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb21wb3NpdGVTdGVwVGV4dDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9zaXRlU3RlcFRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy8gVE9ETyBUZXN0XHJcbmZ1bmN0aW9uIGdldENvbXBvc2l0ZXNKc29uKGh0dHAsIGZpbGVOYW1lKSB7XHJcbiAgICB2YXIgdXJsID0gJy9ncm9vdnlDb21wb3NpdGVzLycgKyBmaWxlTmFtZTtcclxuICAgIHJldHVybiBodHRwLmdldCh1cmwsIHtjYWNoZTogZmFsc2V9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XHJcbiAgICB9LCBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgY2xhc3NOYW1lID0gZmlsZU5hbWUuc3Vic3RyaW5nKDAsIGZpbGVOYW1lLmxhc3RJbmRleE9mKCcuJykpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNsYXNzOiBjbGFzc05hbWUsXHJcbiAgICAgICAgICAgIGNvbXBvc2l0ZXM6W3tzdGVwVGV4dDogJycsIGNvbXBvc2l0ZVN0ZXBzOiBbe31dfV0sXHJcbiAgICAgICAgICAgIGlzTmV3OiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdGVwVGV4dFBhdHRlcm4oKSB7XHJcbiAgICByZXR1cm4gKC9eKEdpdmVufFdoZW58VGhlbikgLiskLyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFN0b3JpZXMoJHNjb3BlLCAkaHR0cCwgJG1vZGFsLCBwYXRoKSB7XHJcbiAgICBpZiAoJHNjb3BlLnJvb3RQYXRoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAkc2NvcGUucm9vdFBhdGggPSAnJztcclxuICAgIH1cclxuICAgICRodHRwLmdldCgnL3N0b3JpZXMvbGlzdC5qc29uP3BhdGg9JyArICRzY29wZS5yb290UGF0aCArIHBhdGgpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAkc2NvcGUuZmlsZXMgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgIGlmIChwYXRoICE9PSAnJykge1xyXG4gICAgICAgICAgICAkc2NvcGUucm9vdFBhdGggKz0gcGF0aCArICcvJztcclxuICAgICAgICB9XHJcbiAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgIG9wZW5FcnJvck1vZGFsKCRtb2RhbCwgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gb3BlbkRpcigkc2NvcGUsICRodHRwLCAkbW9kYWwsIHBhdGgpIHtcclxuICAgIGlmIChwYXRoID09PSAnLi4nKSB7XHJcbiAgICAgICAgdmFyIGRpcnMgPSAkc2NvcGUucm9vdFBhdGguc3BsaXQoJy8nKTtcclxuICAgICAgICAkc2NvcGUucm9vdFBhdGggPSBkaXJzLnNsaWNlKDAsIGRpcnMubGVuZ3RoIC0gMikuam9pbignLycpO1xyXG4gICAgICAgIGlmICgkc2NvcGUucm9vdFBhdGggIT09ICcnKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5yb290UGF0aCArPSAnLyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdldFN0b3JpZXMoJHNjb3BlLCAkaHR0cCwgJG1vZGFsLCAnJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGdldFN0b3JpZXMoJHNjb3BlLCAkaHR0cCwgJG1vZGFsLCBwYXRoKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gVE9ETyBUZXN0XHJcbmZ1bmN0aW9uIG9wZW5SdW5uZXJQYXJhbWV0ZXJzTW9kYWwoJG1vZGFsLCBzaG93R2V0QXBpKSB7XHJcbiAgICByZXR1cm4gJG1vZGFsLm9wZW4oe1xyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL2Fzc2V0cy9odG1sL3J1bm5lci9ydW5uZXJQYXJhbXMudG1wbC5odG1sJyxcclxuICAgICAgICBjb250cm9sbGVyOiAncnVubmVyUGFyYW1zQ3RybCcsXHJcbiAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICBkYXRhOiBmdW5jdGlvbigkcm91dGUsICRodHRwLCAkbW9kYWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRKc29uKCRodHRwLCAkbW9kYWwsICcvc3RlcHMvY2xhc3Nlcy5qc29uJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNob3dHZXRBcGk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNob3dHZXRBcGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UnVubmVyU3RhdHVzQ3NzKGluUHJvZ3Jlc3MsIHN1Y2Nlc3MsIHBlbmRpbmdTdGVwcykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAncHJvZ3Jlc3MtYmFyIHByb2dyZXNzLWJhci1pbmZvJzogaW5Qcm9ncmVzcyxcclxuICAgICAgICAncHJvZ3Jlc3MtYmFyIHByb2dyZXNzLWJhci13YXJuaW5nJzogIWluUHJvZ3Jlc3MgJiYgc3VjY2VzcyAmJiBwZW5kaW5nU3RlcHMsXHJcbiAgICAgICAgJ3Byb2dyZXNzLWJhciBwcm9ncmVzcy1iYXItc3VjY2Vzcyc6ICFpblByb2dyZXNzICYmIHN1Y2Nlc3MgJiYgIXBlbmRpbmdTdGVwcyxcclxuICAgICAgICAncHJvZ3Jlc3MtYmFyIHByb2dyZXNzLWJhci1kYW5nZXInOiAhaW5Qcm9ncmVzcyAmJiAhc3VjY2Vzc1xyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U3RvcnlSdW5uZXJTdGF0dXNUZXh0KGluUHJvZ3Jlc3MsIHN1Y2Nlc3MsIHBlbmRpbmdTdGVwc0xlbmd0aCkge1xyXG4gICAgaWYgKGluUHJvZ3Jlc3MpIHtcclxuICAgICAgICByZXR1cm4gJ1N0b3J5IHJ1biBpcyBpbiBwcm9ncmVzcyc7XHJcbiAgICB9IGVsc2UgaWYgKHN1Y2Nlc3MpIHtcclxuICAgICAgICBpZiAocGVuZGluZ1N0ZXBzTGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJ1N0b3J5IHJ1biB3YXMgc3VjY2Vzc2Z1bCB3aXRoICcgKyBwZW5kaW5nU3RlcHNMZW5ndGggKyAnIHBlbmRpbmcgc3RlcHMnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnU3RvcnkgcnVuIHdhcyBzdWNjZXNzZnVsJztcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnU3RvcnkgcnVuIGZhaWxlZCc7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFJ1bm5lclByb2dyZXNzQ3NzKGluUHJvZ3Jlc3MpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgJ3Byb2dyZXNzIHByb2dyZXNzLXN0cmlwZWQgYWN0aXZlJzogaW5Qcm9ncmVzcyxcclxuICAgICAgICAncHJvZ3Jlc3MnOiAhaW5Qcm9ncmVzc1xyXG4gICAgfTtcclxufSIsImFuZ3VsYXIubW9kdWxlKCdjb21wb3NpdGVDbGFzc2VzTW9kdWxlJywgW10pXHJcbiAgICAuY29udHJvbGxlcignY29tcG9zaXRlQ2xhc3Nlc0N0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbW9kYWxJbnN0YW5jZSwgY29tcG9zaXRlQ2xhc3NlcywgY29tcG9zaXRlU3RlcFRleHQpIHtcclxuICAgICAgICAkc2NvcGUuY29tcG9zaXRlQ2xhc3NlcyA9IGNvbXBvc2l0ZUNsYXNzZXM7XHJcbiAgICAgICAgJHNjb3BlLmNvbXBvc2l0ZVN0ZXBUZXh0ID0gY29tcG9zaXRlU3RlcFRleHQ7XHJcbiAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgJHNjb3BlLmNsb3NlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuY29tcG9zaXRlQ2xhc3NVcmwgPSBmdW5jdGlvbihwYWNrYWdlTmFtZSwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciB1cmwgPSAnL3BhZ2UvY29tcG9zaXRlcy8nO1xyXG4gICAgICAgICAgICBpZiAocGFja2FnZU5hbWUgIT09IHVuZGVmaW5lZCAmJiBwYWNrYWdlTmFtZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHVybCArPSBwYWNrYWdlTmFtZSArICcuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lUGFydHM7XHJcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUuaW5kZXhPZignLycpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZVBhcnRzID0gY2xhc3NOYW1lLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVQYXJ0cyA9IGNsYXNzTmFtZS5zcGxpdCgnXFxcXCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHVybCArPSBjbGFzc05hbWVQYXJ0c1tjbGFzc05hbWVQYXJ0cy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5jb21wb3NpdGVTdGVwVGV4dCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5jb21wb3NpdGVTdGVwVGV4dCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHVybCArPSAnP3N0ZXBUZXh0PScgKyAkc2NvcGUuY29tcG9zaXRlU3RlcFRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHVybDtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5jb21wb3NpdGVDbGFzc1RleHQgPSBmdW5jdGlvbihjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZVBhcnRzO1xyXG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lLmluZGV4T2YoJy8nKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVQYXJ0cyA9IGNsYXNzTmFtZS5zcGxpdCgnLycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lUGFydHMgPSBjbGFzc05hbWUuc3BsaXQoJ1xcXFwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdGV4dCA9IGNsYXNzTmFtZVBhcnRzW2NsYXNzTmFtZVBhcnRzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAodGV4dC5pbmRleE9mKCcuJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQuc3Vic3RyKDAsIHRleHQubGFzdEluZGV4T2YoJy4nKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuY2xhc3NOYW1lUGF0dGVybiA9IGNsYXNzTmFtZVBhdHRlcm47XHJcbiAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgJHNjb3BlLmNzc0NsYXNzID0gY3NzQ2xhc3M7XHJcbiAgICAgICAgJHNjb3BlLmRhdGEgPSB7Y2xhc3M6ICcnfTtcclxuICAgIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdjb21wb3NpdGVzTW9kdWxlJywgW10pXHJcbiAgICAuY29udHJvbGxlcignY29tcG9zaXRlc0N0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbW9kYWwsICRsb2NhdGlvbiwgJGNvb2tpZVN0b3JlLCBjb21wb3NpdGVzQ2xhc3MsIHN0ZXBzKSB7XHJcbiAgICAgICAgJHNjb3BlLmFkZENvbXBvc2l0ZXNUYWIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCEkc2NvcGUuY29tcG9zaXRlc0NsYXNzLmlzTmV3KSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSGlzdG9yeUl0ZW0oJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcy5jbGFzcyArICcgY29tcG9zaXRlcycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuYWRkTmV3Q29tcG9zaXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5jb21wb3NpdGUgPSB7c3RlcFRleHQ6ICcnLCBjb21wb3NpdGVTdGVwczogW3t9XX07XHJcbiAgICAgICAgICAgICRzY29wZS5jb21wb3NpdGVzQ2xhc3MuY29tcG9zaXRlcy5wdXNoKCRzY29wZS5jb21wb3NpdGUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmFkZFN0ZXBUZXh0UGFyYW0gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCRsb2NhdGlvbi5zZWFyY2goKS5zdGVwVGV4dCAhPT0gdW5kZWZpbmVkICYmICRsb2NhdGlvbi5zZWFyY2goKS5zdGVwVGV4dCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb21wb3NpdGVzQ2xhc3MuY29tcG9zaXRlcy5wdXNoKHtzdGVwVGV4dDogJGxvY2F0aW9uLnNlYXJjaCgpLnN0ZXBUZXh0LCBjb21wb3NpdGVTdGVwczogW119KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmFkZE5ld0NvbXBvc2l0ZVN0ZXAgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmNvbXBvc2l0ZS5jb21wb3NpdGVTdGVwcy5wdXNoKHt9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5zZXRMYXN0Q29tcG9zaXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuY29tcG9zaXRlc0NsYXNzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSAkc2NvcGUuY29tcG9zaXRlc0NsYXNzLmNvbXBvc2l0ZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbXBvc2l0ZSA9ICRzY29wZS5jb21wb3NpdGVzQ2xhc3MuY29tcG9zaXRlc1tsZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb21wb3NpdGUgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcyA9IGNvbXBvc2l0ZXNDbGFzcztcclxuICAgICAgICAkc2NvcGUuYWRkU3RlcFRleHRQYXJhbSgpO1xyXG4gICAgICAgICRzY29wZS5vcmlnaW5hbENvbXBvc2l0ZXNDbGFzcyA9IGFuZ3VsYXIuY29weShjb21wb3NpdGVzQ2xhc3MpO1xyXG4gICAgICAgICRzY29wZS5zZXRMYXN0Q29tcG9zaXRlKCk7XHJcbiAgICAgICAgJHNjb3BlLnN0ZXBzID0gc3RlcHM7XHJcbiAgICAgICAgJHNjb3BlLmNsYXNzTmFtZVBhdHRlcm4gPSBjbGFzc05hbWVQYXR0ZXJuO1xyXG4gICAgICAgICRzY29wZS5zdGVwVGV4dFBhdHRlcm4gPSBzdGVwVGV4dFBhdHRlcm47XHJcbiAgICAgICAgJHNjb3BlLmNzc0NsYXNzID0gY3NzQ2xhc3M7XHJcbiAgICAgICAgJHNjb3BlLmJ1dHRvbkNzc0NsYXNzID0gZnVuY3Rpb24oY29tcG9zaXRlQ2xhc3NGb3JtLCBjb21wb3NpdGVGb3JtKSB7XHJcbiAgICAgICAgICAgIGlmICghY29tcG9zaXRlQ2xhc3NGb3JtLiR2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1dHRvbkNzc0NsYXNzKGNvbXBvc2l0ZUNsYXNzRm9ybSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYnV0dG9uQ3NzQ2xhc3MoY29tcG9zaXRlRm9ybSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5vcGVuQ29tcG9zaXRlID0gZnVuY3Rpb24oY29tcG9zaXRlKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5jb21wb3NpdGUgPSBjb21wb3NpdGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUubmV3Q29sbGVjdGlvbkl0ZW0gPSBuZXdDb2xsZWN0aW9uSXRlbTtcclxuICAgICAgICAkc2NvcGUucmVtb3ZlQ29sbGVjdGlvbkVsZW1lbnQgPSByZW1vdmVDb2xsZWN0aW9uRWxlbWVudDtcclxuICAgICAgICAkc2NvcGUucmV2ZXJ0Q29tcG9zaXRlc0NsYXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5jb21wb3NpdGVzQ2xhc3MgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLm9yaWdpbmFsQ29tcG9zaXRlc0NsYXNzKTtcclxuICAgICAgICAgICAgJHNjb3BlLmNvbXBvc2l0ZSA9ICRzY29wZS5jb21wb3NpdGVzQ2xhc3MuY29tcG9zaXRlc1swXTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5jYW5SZXZlcnRDb21wb3NpdGVzQ2xhc3MgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICFhbmd1bGFyLmVxdWFscygkc2NvcGUuY29tcG9zaXRlc0NsYXNzLCAkc2NvcGUub3JpZ2luYWxDb21wb3NpdGVzQ2xhc3MpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmNhblNhdmVDb21wb3NpdGVzQ2xhc3MgPSBmdW5jdGlvbihuZ01vZGVsQ29udHJvbGxlcikge1xyXG4gICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG5nTW9kZWxDb250cm9sbGVyLiR2YWxpZDtcclxuICAgICAgICAgICAgdmFyIGlzVXBkYXRlZCA9ICFhbmd1bGFyLmVxdWFscygkc2NvcGUuY29tcG9zaXRlc0NsYXNzLCAkc2NvcGUub3JpZ2luYWxDb21wb3NpdGVzQ2xhc3MpO1xyXG4gICAgICAgICAgICB2YXIgaXNOZXcgPSAkc2NvcGUuY29tcG9zaXRlc0NsYXNzLmlzTmV3O1xyXG4gICAgICAgICAgICByZXR1cm4gKGlzTmV3IHx8IGlzVXBkYXRlZCkgJiYgaXNWYWxpZDtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5jb21wb3NpdGVzQXJlVmFsaWQgPSBmdW5jdGlvbihuZ01vZGVsQ29udHJvbGxlcikge1xyXG4gICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG5nTW9kZWxDb250cm9sbGVyLiR2YWxpZDtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5jb21wb3NpdGVzQ2xhc3MuY29tcG9zaXRlcywgZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuc3RlcFRleHQgPT09IHVuZGVmaW5lZCB8fCBlbGVtZW50LnN0ZXBUZXh0ID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5jb21wb3NpdGVTdGVwcyA9PT0gdW5kZWZpbmVkIHx8IGVsZW1lbnQuY29tcG9zaXRlU3RlcHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuc2F2ZUNvbXBvc2l0ZXNDbGFzcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkaHR0cC5wdXQoJy9ncm9vdnlDb21wb3NpdGVzJywgJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcykudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVDb21wb3NpdGVzQ2xhc3NXaXRob3V0Q29uZmlybWF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3BhZ2UvY29tcG9zaXRlcy8nICsgJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcy5jbGFzcyArICcuZ3Jvb3Z5Jyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY29tcG9zaXRlc0NsYXNzLmlzTmV3ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3JpZ2luYWxDb21wb3NpdGVzQ2xhc3MgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAkY29va2llU3RvcmUucHV0KCdjb21wb3NpdGVDbGFzcycsICRzY29wZS5jb21wb3NpdGVzQ2xhc3MuY2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZENvbXBvc2l0ZXNUYWIoKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIG9wZW5FcnJvck1vZGFsKCRtb2RhbCwgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmNhbkRlbGV0ZUNvbXBvc2l0ZXNDbGFzcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKCEkc2NvcGUuY29tcG9zaXRlc0NsYXNzLmlzTmV3KTtcclxuXHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuZGVsZXRlQ29tcG9zaXRlc0NsYXNzV2l0aG91dENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcy5jbGFzcztcclxuICAgICAgICAgICAgdmFyIG9yaWdpbmFsQ2xhc3NOYW1lID0gJHNjb3BlLm9yaWdpbmFsQ29tcG9zaXRlc0NsYXNzLmNsYXNzO1xyXG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lICE9PSBvcmlnaW5hbENsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVsZXRlKCcvZ3Jvb3Z5Q29tcG9zaXRlcy8nICsgb3JpZ2luYWxDbGFzc05hbWUpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlbkVycm9yTW9kYWwoJG1vZGFsLCByZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuZGVsZXRlQ29tcG9zaXRlc0NsYXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0ge3N0YXR1czogJ0RlbGV0ZSBDb21wb3NpdGVzIENsYXNzJywgbWVzc2FnZTogJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBjb21wb3NpdGVzIGNsYXNzPyd9O1xyXG4gICAgICAgICAgICB2YXIgb2tNb2RhbCA9IG9wZW5Db25maXJtYXRpb25Nb2RhbCgkbW9kYWwsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBva01vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVsZXRlKCcvZ3Jvb3Z5Q29tcG9zaXRlcy8nICsgJHNjb3BlLm9yaWdpbmFsQ29tcG9zaXRlc0NsYXNzLmNsYXNzKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5FcnJvck1vZGFsKCRtb2RhbCwgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBEbyBub3RoaW5nXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLnNhdmVDb21wb3NpdGVzVGV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcy5pc05ldykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdDcmVhdGUgTmV3IENvbXBvc2l0ZXMnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdVcGRhdGUgQ29tcG9zaXRlcyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIEluaXRpYWxpemF0aW9uXHJcbiAgICAgICAgJHNjb3BlLmFkZENvbXBvc2l0ZXNUYWIoKTtcclxuICAgIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdydW5uZXJNb2R1bGUnLCBbXSlcclxuICAgIC5jb250cm9sbGVyKCdydW5uZXJDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkbW9kYWwsICRodHRwLCAkbG9jYXRpb24pIHtcclxuICAgICAgICAvLyBUT0RPIFRlc3QgbW9yZSB0aGFuIGNoZWNraW5nIHdoZXRoZXIgJG1vZGFsLm9wZW4gd2FzIGNhbGxlZFxyXG4gICAgICAgICRzY29wZS5vcGVuUnVubmVyU2VsZWN0b3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRtb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2Fzc2V0cy9odG1sL3J1bm5lci9ydW5uZXJTZWxlY3Rvci50bXBsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3J1bm5lclNlbGVjdG9yQ3RybCcsXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgJHNjb3BlLm9wZW5SdW5uZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHJ1bm5lclNlbGVjdG9yID0gJHNjb3BlLm9wZW5SdW5uZXJTZWxlY3RvcigpO1xyXG4gICAgICAgICAgICBpZiAocnVubmVyU2VsZWN0b3IgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcnVubmVyU2VsZWN0b3IucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcnlQYXRocyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGlycy5mb3JFYWNoKGZ1bmN0aW9uIChkaXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcnlQYXRocy5wdXNoKHtwYXRoOiBkaXIucGF0aCArIFwiLyoqLyouc3RvcnlcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3Rvcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChzdG9yeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yeVBhdGhzLnB1c2goe3BhdGg6IHN0b3J5LnBhdGh9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBvcGVuUnVubmVyUGFyYW1ldGVyc01vZGFsKCRtb2RhbCwgdHJ1ZSkucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSBkYXRhLmNsYXNzZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBkYXRhLmFjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvZ3Jvb3Z5Q29tcG9zaXRlcycpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3Jvb3Z5Q29tcG9zaXRlcyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBpSnNvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yeVBhdGhzOiBzdG9yeVBhdGhzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6IGNsYXNzZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvb3Z5Q29tcG9zaXRlczogZ3Jvb3Z5Q29tcG9zaXRlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gPT09ICdydW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJ1bigkc2NvcGUuYXBpSnNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBcGkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBcGkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUucnVuID0gZnVuY3Rpb24oanNvbikge1xyXG4gICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dSdW5uZXJQcm9ncmVzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXBvcnRzVXJsID0gJyc7XHJcbiAgICAgICAgICAgICRodHRwLnBvc3QoJy9ydW5uZXIvcnVuLmpzb24nLCBqc29uKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSAnT0snKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydHNVcmwgPSBkYXRhLnJlcG9ydHNQYXRoLnJlcGxhY2UoJ3B1YmxpYy8nLCAnL2Fzc2V0cy8nKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVyU3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuc3RhdHVzID09PSAnRkFJTEVEJykge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXBvcnRzVXJsID0gZGF0YS5yZXBvcnRzUGF0aC5yZXBsYWNlKCdwdWJsaWMvJywgJy9hc3NldHMvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVySW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lclN1Y2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5FcnJvck1vZGFsKCRtb2RhbCwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJTdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJTdWNjZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBvcGVuRXJyb3JNb2RhbCgkbW9kYWwsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5nZXRSdW5uZXJTdGF0dXNDc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRSdW5uZXJTdGF0dXNDc3MoXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzLFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVyU3VjY2VzcyxcclxuICAgICAgICAgICAgICAgICgkc2NvcGUucGVuZGluZ1N0ZXBzID4gMClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5nZXRTdG9yeVJ1bm5lclN0YXR1c1RleHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRTdG9yeVJ1bm5lclN0YXR1c1RleHQoXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzLFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVyU3VjY2VzcyxcclxuICAgICAgICAgICAgICAgICRzY29wZS5wZW5kaW5nU3RlcHMubGVuZ3RoXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuZ2V0UnVubmVyUHJvZ3Jlc3NDc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRSdW5uZXJQcm9ncmVzc0Nzcygkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lckluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVyU3VjY2VzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd1J1bm5lclByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5wZW5kaW5nU3RlcHMgPSBbXTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcG9ydHNVcmwgPSAnJztcclxuICAgICAgICAgICAgJHNjb3BlLm9wZW5SdW5uZXIoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dBcGkgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5hcGlVcmwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRsb2NhdGlvbi5wcm90b2NvbCgpICsgJzovLycgKyAkbG9jYXRpb24uaG9zdCgpICsgJzonICsgJGxvY2F0aW9uLnBvcnQoKSArICcvcnVubmVyL3J1bi5qc29uJztcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5pbml0KCk7XHJcbiAgICB9KVxyXG4gICAgLmNvbnRyb2xsZXIoJ3J1bm5lclNlbGVjdG9yQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRtb2RhbCwgJG1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAkc2NvcGUuZmlsZXMgPSB7ZGlyczogW10sIHN0b3JpZXM6IFtdfTtcclxuICAgICAgICBnZXRTdG9yaWVzKCRzY29wZSwgJGh0dHAsICRtb2RhbCwgJycpO1xyXG4gICAgICAgICRzY29wZS5vcGVuRGlyID0gZnVuY3Rpb24ocGF0aCkge1xyXG4gICAgICAgICAgICBvcGVuRGlyKCRzY29wZSwgJGh0dHAsICRtb2RhbCwgcGF0aCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuY2FuY2VsUnVubmVyU2VsZWN0b3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLm9rUnVubmVyU2VsZWN0b3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkRmlsZXMgPSB7ZGlyczogW10sIHN0b3JpZXM6IFtdfTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5maWxlcy5kaXJzLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLnNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRGaWxlcy5kaXJzLnB1c2goe3BhdGg6ICRzY29wZS5yb290UGF0aCArIHZhbHVlLm5hbWV9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuZmlsZXMuc3RvcmllcywgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRmlsZXMuc3Rvcmllcy5wdXNoKHtwYXRoOiAkc2NvcGUucm9vdFBhdGggKyB2YWx1ZS5uYW1lICsgXCIuc3RvcnlcIn0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VsZWN0ZWRGaWxlcyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuYWxsb3dUb1ByZXZEaXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRzY29wZS5yb290UGF0aCAhPT0gJyc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuY2FuQ29udGludWUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGhhc1NlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuZmlsZXMuZGlycywgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc1NlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICghaGFzU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuZmlsZXMuc3RvcmllcywgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLnNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc1NlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaGFzU2VsZWN0ZWQ7XHJcbiAgICAgICAgfTtcclxuICAgIH0pXHJcbiAgICAuY29udHJvbGxlcigncnVubmVyUGFyYW1zQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRtb2RhbEluc3RhbmNlLCAkY29va2llU3RvcmUsIGRhdGEsIHNob3dHZXRBcGkpIHtcclxuICAgICAgICAkc2NvcGUuY2xhc3NlcyA9IGRhdGEuY2xhc3NlcztcclxuICAgICAgICAkc2NvcGUuY2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uKGNsYXNzRW50cnkpIHtcclxuICAgICAgICAgICAgY2xhc3NFbnRyeS5wYXJhbXMuZm9yRWFjaChmdW5jdGlvbihwYXJhbUVudHJ5KSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtRW50cnkudmFsdWUgPSAkY29va2llU3RvcmUuZ2V0KGNsYXNzRW50cnkuZnVsbE5hbWUgKyBcIi5cIiArIHBhcmFtRW50cnkua2V5KTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NvdWxkIG5vdCByZXRyaWV2ZSBjb29raWUgJyArIGNsYXNzRW50cnkuZnVsbE5hbWUgKyBcIi5cIiArIHBhcmFtRW50cnkua2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICRzY29wZS5oYXNQYXJhbXMgPSBmdW5jdGlvbihjbGFzc0VudHJ5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjbGFzc0VudHJ5LnBhcmFtcyAhPT0gdW5kZWZpbmVkICYmIGNsYXNzRW50cnkucGFyYW1zLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuY2xvc2Uoe2FjdGlvbjogJ3J1bicsIGNsYXNzZXM6ICRzY29wZS5jbGFzc2VzfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLnNob3dHZXRBcGkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNob3dHZXRBcGk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuZ2V0QXBpID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKHthY3Rpb246ICdhcGknLCBjbGFzc2VzOiAkc2NvcGUuY2xhc3Nlc30pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLnBhcmFtRWxlbWVudElkID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBwYXJhbUtleSkge1xyXG4gICAgICAgICAgICB2YXIgZm9ybWF0dGVkQ2xhc3NOYW1lID0gY2xhc3NOYW1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgY2xhc3NOYW1lLnNsaWNlKDEpO1xyXG4gICAgICAgICAgICB2YXIgZm9ybWF0dGVkUGFyYW1LZXkgPSBwYXJhbUtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHBhcmFtS2V5LnNsaWNlKDEpO1xyXG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVkQ2xhc3NOYW1lICsgZm9ybWF0dGVkUGFyYW1LZXk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdzdG9yeU1vZHVsZScsIFtdKVxyXG4gICAgLmNvbnRyb2xsZXIoJ3N0b3J5Q3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRtb2RhbCwgJGxvY2F0aW9uLCAkY29va2llU3RvcmUsICRxLCAkYW5jaG9yU2Nyb2xsLCBzdG9yeSwgc3RlcHMsIGdyb292eUNvbXBvc2l0ZXMpIHtcclxuICAgICAgICAkc2NvcGUucGVuZGluZ1N0ZXBzID0gW107XHJcbiAgICAgICAgJHNjb3BlLnNldEFjdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLnN0b3J5Lm5hbWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWN0aW9uID0gJ1BVVCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSGlzdG9yeUl0ZW0oJHNjb3BlLnN0b3J5Lm5hbWUgKyAnIHN0b3J5Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWN0aW9uID0gJ1BPU1QnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuZXhwYW5kUGFuZWxzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzY2VuYXJpb3NFeHBhbmRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUucGFuZWxzRXhwYW5kZWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBhbmVsc0V4cGFuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucGFuZWxzRXhwYW5kZWQgPSAhJHNjb3BlLnBhbmVsc0V4cGFuZGVkO1xyXG4gICAgICAgICAgICAgICAgc2NlbmFyaW9zRXhwYW5kZWQgPSAkc2NvcGUucGFuZWxzRXhwYW5kZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJHNjb3BlLnBhbmVscyA9IHtcclxuICAgICAgICAgICAgICAgIHN0b3J5OiAkc2NvcGUucGFuZWxzRXhwYW5kZWQsXHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJHNjb3BlLnBhbmVsc0V4cGFuZGVkLFxyXG4gICAgICAgICAgICAgICAgbWV0YTogJHNjb3BlLnBhbmVsc0V4cGFuZGVkLFxyXG4gICAgICAgICAgICAgICAgbmFycmF0aXZlOiAkc2NvcGUucGFuZWxzRXhwYW5kZWQsXHJcbiAgICAgICAgICAgICAgICBnaXZlblN0b3JpZXM6ICRzY29wZS5wYW5lbHNFeHBhbmRlZCxcclxuICAgICAgICAgICAgICAgIGxpZmVjeWNsZTogJHNjb3BlLnBhbmVsc0V4cGFuZGVkLFxyXG4gICAgICAgICAgICAgICAgc2NlbmFyaW9zOiBzY2VuYXJpb3NFeHBhbmRlZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLnN0b3J5ID0gc3Rvcnk7XHJcbiAgICAgICAgJHNjb3BlLnN0ZXBzID0gc3RlcHM7XHJcbiAgICAgICAgJHNjb3BlLmdyb292eUNvbXBvc2l0ZXMgPSBncm9vdnlDb21wb3NpdGVzO1xyXG4gICAgICAgICRzY29wZS5zdGVwVHlwZXMgPSBbJ0dJVkVOJywgJ1dIRU4nLCAnVEhFTiddO1xyXG4gICAgICAgICRzY29wZS5zdG9yeUZvcm1DbGFzcyA9ICdjb2wtbWQtMTInO1xyXG4gICAgICAgICRzY29wZS5zdG9yeVJ1bm5lclZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVyU3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLmV4cGFuZFBhbmVscygpO1xyXG4gICAgICAgICRzY29wZS5vcmlnaW5hbFN0b3J5ID0gYW5ndWxhci5jb3B5KHN0b3J5KTtcclxuICAgICAgICB2YXIgcGF0aEFycmF5ID0gJHNjb3BlLnN0b3J5LnBhdGguc3BsaXQoJy8nKTtcclxuICAgICAgICAkc2NvcGUuZGlyUGF0aCA9IHBhdGhBcnJheS5zbGljZSgwLCBwYXRoQXJyYXkubGVuZ3RoIC0gMSkuam9pbignLycpO1xyXG4gICAgICAgIGlmICgkc2NvcGUuZGlyUGF0aCAhPT0gJycpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmRpclBhdGggKz0gJy8nO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2NvcGUuc2V0QWN0aW9uKCk7XHJcbiAgICAgICAgJHNjb3BlLmNzc0NsYXNzID0gY3NzQ2xhc3M7XHJcbiAgICAgICAgJHNjb3BlLmJ1dHRvbkNzc0NsYXNzID0gYnV0dG9uQ3NzQ2xhc3M7XHJcbiAgICAgICAgJHNjb3BlLmNhblNhdmVTdG9yeSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgaXNWYWxpZCA9ICRzY29wZS5zdG9yeUZvcm0uJHZhbGlkO1xyXG4gICAgICAgICAgICB2YXIgaGFzQ2hhbmdlZCA9ICFhbmd1bGFyLmVxdWFscygkc2NvcGUuc3RvcnksICRzY29wZS5vcmlnaW5hbFN0b3J5KTtcclxuICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQgJiYgaGFzQ2hhbmdlZDtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5zdGVwVGV4dFBhdHRlcm4gPSBzdGVwVGV4dFBhdHRlcm47XHJcbiAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgJHNjb3BlLnNhdmVTdG9yeSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmNhblNhdmVTdG9yeSgpKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnkucGF0aCA9ICRzY29wZS5kaXJQYXRoICsgJHNjb3BlLnN0b3J5Lm5hbWUgKyBcIi5zdG9yeVwiO1xyXG4gICAgICAgICAgICAgICAgaWYgKCdQT1NUJyA9PT0gJHNjb3BlLmFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJpcHBlZFBhdGhBcnJheSA9ICRzY29wZS5kaXJQYXRoLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmlwcGVkUGF0aCA9IHN0cmlwcGVkUGF0aEFycmF5LnNsaWNlKDAsIHN0cmlwcGVkUGF0aEFycmF5Lmxlbmd0aCAtIDEpLmpvaW4oJy8nKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaXBwZWRQYXRoICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpcHBlZFBhdGggKz0gJy8nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KCcvc3Rvcmllcy9zdG9yeS5qc29uJywgJHNjb3BlLnN0b3J5KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoZ2V0Vmlld1N0b3J5VXJsKCkgKyBzdHJpcHBlZFBhdGggKyAkc2NvcGUuc3RvcnkubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcmlnaW5hbFN0b3J5ID0gYW5ndWxhci5jb3B5KCRzY29wZS5zdG9yeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcGVuRXJyb3JNb2RhbCgkbW9kYWwsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnN0b3J5Lm5hbWUgIT09ICRzY29wZS5vcmlnaW5hbFN0b3J5Lm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5Lm9yaWdpbmFsUGF0aCA9ICRzY29wZS5vcmlnaW5hbFN0b3J5LnBhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLnB1dCgnL3N0b3JpZXMvc3RvcnkuanNvbicsICRzY29wZS5zdG9yeSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcmlnaW5hbFN0b3J5ID0gYW5ndWxhci5jb3B5KCRzY29wZS5zdG9yeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcGVuRXJyb3JNb2RhbCgkbW9kYWwsIHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuY2FuUnVuU3RvcnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkc2NvcGUuc3RvcnlGb3JtLiR2YWxpZCAmJiAhJHNjb3BlLnN0b3J5UnVubmVySW5Qcm9ncmVzcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICRzY29wZS5ydW5TdG9yeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5jYW5SdW5TdG9yeSgpKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZVN0b3J5KCk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3BlblJ1bm5lck1vZGFsKCkucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2xhc3NlcyA9IGRhdGEuY2xhc3NlcztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlGb3JtQ2xhc3MgPSAnY29sLW1kLTYnO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lckNsYXNzID0gJ2NvbC1tZC02JztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJWaXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzRW50cnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NFbnRyeS5wYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW1FbnRyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZVN0b3JlLnB1dChjbGFzc0VudHJ5LmZ1bGxOYW1lICsgXCIuXCIgKyBwYXJhbUVudHJ5LmtleSwgcGFyYW1FbnRyeS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBqc29uID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yeVBhdGhzOiBbe3BhdGg6ICRzY29wZS5zdG9yeS5wYXRofV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6IGNsYXNzZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb292eUNvbXBvc2l0ZXM6ICRzY29wZS5ncm9vdnlDb21wb3NpdGVzXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KCcvcnVubmVyL3J1bi5qc29uJywganNvbikudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVyU3VjY2VzcyA9IChyZXNwb25zZS5kYXRhLnN0YXR1cyA9PT0gJ09LJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lckluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldFJlcG9ydHMocmVzcG9uc2UuZGF0YS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lclN1Y2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVySW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BlbkVycm9yTW9kYWwoJG1vZGFsLCByZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wZW5FcnJvck1vZGFsKCRtb2RhbCwgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmdldFJlcG9ydHMgPSBmdW5jdGlvbihyZXBvcnRzSWQpIHtcclxuICAgICAgICAgICAgJGh0dHAuZ2V0KCcvYXBpL3YxL3JlcG9ydGVycy9saXN0LycgKyByZXBvcnRzSWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0cyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0cy5pZCA9IHJlcG9ydHNJZDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZXRQZW5kaW5nU3RlcHMoJHNjb3BlLnJlcG9ydHMpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wZW5FcnJvck1vZGFsKCRtb2RhbCwgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmdldFJlcG9ydFVybCA9IGZ1bmN0aW9uKHJlcG9ydHNJZCwgcmVwb3J0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnL2FwaS92MS9yZXBvcnRlcnMvZ2V0LycgKyByZXBvcnRzSWQgKyAnLycgKyByZXBvcnQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAkc2NvcGUub3BlblJ1bm5lck1vZGFsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvcGVuUnVubmVyUGFyYW1ldGVyc01vZGFsKCRtb2RhbCwgZmFsc2UpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmdldFJ1bm5lclByb2dyZXNzQ3NzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0UnVubmVyUHJvZ3Jlc3NDc3MoJHNjb3BlLnN0b3J5UnVubmVySW5Qcm9ncmVzcyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuZ2V0UnVubmVyU3RhdHVzQ3NzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0UnVubmVyU3RhdHVzQ3NzKFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVySW5Qcm9ncmVzcyxcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lclN1Y2Nlc3MsXHJcbiAgICAgICAgICAgICAgICAoJHNjb3BlLnBlbmRpbmdTdGVwcyA+IDApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuc2V0UGVuZGluZ1N0ZXBzID0gZnVuY3Rpb24ocmVwb3J0cykge1xyXG4gICAgICAgICAgICAkc2NvcGUucGVuZGluZ1N0ZXBzID0gW107XHJcbiAgICAgICAgICAgIHJlcG9ydHMuZm9yRWFjaChmdW5jdGlvbihyZXBvcnQpIHtcclxuICAgICAgICAgICAgICAgIHJlcG9ydC5zdGVwcy5mb3JFYWNoKGZ1bmN0aW9uKHN0ZXApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RlcC5zdGF0dXMgPT09ICdwZW5kaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGVuZGluZ1N0ZXBzLnB1c2goe3RleHQ6IHN0ZXAudGV4dH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5oYXNQZW5kaW5nU3RlcHMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRzY29wZS5wZW5kaW5nU3RlcHMgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUucGVuZGluZ1N0ZXBzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuZ2V0U3RvcnlSdW5uZXJTdGF0dXNUZXh0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0U3RvcnlSdW5uZXJTdGF0dXNUZXh0KFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVySW5Qcm9ncmVzcyxcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lclN1Y2Nlc3MsXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucGVuZGluZ1N0ZXBzLmxlbmd0aFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLnJlbW92ZUNvbGxlY3Rpb25FbGVtZW50ID0gcmVtb3ZlQ29sbGVjdGlvbkVsZW1lbnQ7XHJcbiAgICAgICAgJHNjb3BlLmFkZEVsZW1lbnQgPSBmdW5jdGlvbiAoY29sbGVjdGlvbikge1xyXG4gICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2goe30pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmFkZFNjZW5hcmlvRWxlbWVudCA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb24ucHVzaCh7dGl0bGU6ICcnLCBtZXRhOiBbXSwgc3RlcHM6IFtdLCBleGFtcGxlc1RhYmxlOiAnJ30pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLnJldmVydFN0b3J5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuc3RvcnkgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLm9yaWdpbmFsU3RvcnkpO1xyXG4gICAgICAgICAgICAkc2NvcGUuc3RvcnlGb3JtLiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmNhblJldmVydFN0b3J5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gIWFuZ3VsYXIuZXF1YWxzKCRzY29wZS5zdG9yeSwgJHNjb3BlLm9yaWdpbmFsU3RvcnkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmNhbkRlbGV0ZVN0b3J5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLmFjdGlvbiA9PT0gJ1BVVCcgJiYgISRzY29wZS5zdG9yeVJ1bm5lckluUHJvZ3Jlc3M7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAkc2NvcGUuZGVsZXRlU3RvcnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXRoID0gJHNjb3BlLmRpclBhdGggKyAkc2NvcGUuc3RvcnkubmFtZSArICcuc3RvcnknO1xyXG4gICAgICAgICAgICBkZWxldGVTdG9yeSgkbW9kYWwsICRodHRwLCAkbG9jYXRpb24sICRxLCBwYXRoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5zdGVwRW50ZXJLZXkgPSBuZXdDb2xsZWN0aW9uSXRlbTtcclxuICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAkc2NvcGUuY2xpY2tQZW5kaW5nU3RlcCA9IGZ1bmN0aW9uKHN0ZXBUZXh0KSB7XHJcbiAgICAgICAgICAgIHZhciBjb21wb3NpdGVDbGFzcyA9ICRjb29raWVTdG9yZS5nZXQoXCJjb21wb3NpdGVDbGFzc1wiKTtcclxuICAgICAgICAgICAgaWYgKGNvbXBvc2l0ZUNsYXNzID09PSB1bmRlZmluZWQgfHwgY29tcG9zaXRlQ2xhc3MgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3BlbkNvbXBvc2l0ZUNsYXNzKCRtb2RhbCwgc3RlcFRleHQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRsb2NhdGlvbi5zZWFyY2goJ3N0ZXBUZXh0Jywgc3RlcFRleHQpLnBhdGgoJy9wYWdlL2NvbXBvc2l0ZXMvY29tcG9zaXRlcy5jb20udGVjaG5vbG9neWNvbnZlcnNhdGlvbnMuYmRkLnN0ZXBzLicgKyBjb21wb3NpdGVDbGFzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICRzY29wZS5vcGVuRXJyb3JNb2RhbCA9IG9wZW5FcnJvck1vZGFsO1xyXG4gICAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ3RvcE1lbnVNb2R1bGUnLCBbXSlcclxuICAgIC5jb250cm9sbGVyKCd0b3BNZW51Q29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJG1vZGFsLCAkbG9jYXRpb24pIHtcclxuICAgICAgICAvLyBUT0RPIFRlc3QgbW9yZSB0aGFuIGNoZWNraW5nIHdoZXRoZXIgJG1vZGFsLm9wZW4gd2FzIGNhbGxlZFxyXG4gICAgICAgICRzY29wZS5vcGVuU3RvcnkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJG1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXNzZXRzL2h0bWwvc3Rvcmllcy50bXBsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3N0b3JpZXNDdHJsJyxcclxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAkc2NvcGUub3BlbkNvbXBvc2l0ZUNsYXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIG9wZW5Db21wb3NpdGVDbGFzcygkbW9kYWwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmdldFRpdGxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXRoID0gJGxvY2F0aW9uLnBhdGgoKTtcclxuICAgICAgICAgICAgaWYgKHBhdGguaW5kZXhPZihnZXRWaWV3U3RvcnlVcmwoKSkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnVmlldyBTdG9yeSc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGF0aC5pbmRleE9mKGdldE5ld1N0b3J5VXJsKCkpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ05ldyBTdG9yeSc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGF0aC5pbmRleE9mKGdldENvbXBvc2l0ZXNVcmwoKSkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnQ29tcG9zaXRlcyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGF0aC5pbmRleE9mKCcvcGFnZS9yZXBvcnRzLycpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1JlcG9ydHMnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=