function getJson(t,e,o,s){return t.get(o,{cache:s}).then(function(t){return t.data},function(t){openErrorModal(e,t.data)})}function openErrorModal(t,e){t.open({templateUrl:"/assets/html/errorModal.tmpl.html",controller:"modalCtrl",resolve:{data:function(){return e}}})}function getViewStoryUrl(){return"/page/stories/view/"}function getNewStoryUrl(){return"/page/stories/new/"}function getCompositesUrl(){return"/page/composites/"}function deleteStory(t,e,o,s,n){var r=s.defer(),a={status:"Delete Story",message:"Are you sure you want to delete this story?"},i=openConfirmationModal(t,a);return i.result.then(function(){e.delete("/stories/story/"+n).then(function(){o.path(getNewStoryUrl()),r.resolve("OK")},function(e){openErrorModal(t,e.data),r.reject("NOK")})},function(){r.reject("NOK")}),r.promise}function cssClass(t){return{"has-error":t.$invalid,"has-success":t.$valid&&t.$dirty}}function classNamePattern(){return/^[a-zA-Z_$][a-zA-Z\d_$]*$/}function openConfirmationModal(t,e){return t.open({templateUrl:"/assets/html/confirmationModal.tmpl.html",controller:"modalCtrl",resolve:{data:function(){return e}}})}function getCompositesJson(t,e){var o="/groovyComposites/"+e;return t.get(o,{cache:!1}).then(function(t){return t.data},function(){var t=e.substring(0,e.lastIndexOf("."));return{"class":t,composites:[{stepText:"",compositeSteps:[{}]}],isNew:!0}})}function stepTextPattern(){return/^(Given|When|Then) .+$/}function getStories(t,e,o,s){void 0===t.rootPath&&(t.rootPath=""),e.get("/stories/list.json?path="+t.rootPath+s).then(function(e){t.files=e.data,""!==s&&(t.rootPath+=s+"/")},function(t){openErrorModal(o,t.data)})}function openDir(t,e,o,s){if(".."===s){var n=t.rootPath.split("/");t.rootPath=n.slice(0,n.length-2).join("/"),""!==t.rootPath&&(t.rootPath+="/"),getStories(t,e,o,"")}else getStories(t,e,o,s)}function openRunnerParametersModal(t,e){return t.open({templateUrl:"/assets/html/runner/runnerParams.tmpl.html",controller:"runnerParamsCtrl",resolve:{data:function(t,e,o){return getJson(e,o,"/steps/classes.json",!0)},showGetApi:function(){return e}}})}function getRunnerStatusCss(t,e,o){return{"progress-bar progress-bar-info":t,"progress-bar progress-bar-warning":!t&&e&&o,"progress-bar progress-bar-success":!t&&e&&!o,"progress-bar progress-bar-danger":!t&&!e}}function getStoryRunnerStatusText(t,e,o){return t?"Story run is in progress":e?o>0?"Story run was successful with "+o+" pending steps":"Story run was successful":"Story run failed"}angular.module("storiesModule",["ngRoute","ngCookies","ui.bootstrap","ui.sortable","configModule","bodyModule","topMenuModule","storyModule","compositeClassesModule","compositesModule","runnerModule"]).service("TcBddService",["$modal",function(t){this.openCompositeClass=function(e){t.open({templateUrl:"/assets/html/compositeClasses/compositeClasses.tmpl.html",controller:"compositeClassesCtrl",resolve:{compositeClasses:["$route","$http","$modal",function(t,e,o){return getJson(e,o,"/groovyComposites",!1)}],compositeStepText:function(){return e}}})},this.newCollectionItem=function(t,e){13===t.which&&e.push({})},this.removeCollectionElement=function(t,e){t.splice(e,1)},this.buttonCssClass=function(t){return{"btn-success":t.$valid,"btn-danger":t.$invalid}},this.getRunnerProgressCss=function(t){return{"progress progress-striped active":t,progress:!t}}}]).controller("modalCtrl",["$scope","$modalInstance","data",function(t,e,o){t.data=o,t.ok=function(){e.close("ok")},t.cancel=function(){e.dismiss("cancel")}}]).controller("storiesCtrl",["$scope","$http","$modal","$modalInstance","$location","$q",function(t,e,o,s,n,r){getStories(t,e,o,""),t.openDir=function(s){openDir(t,e,o,s)},t.close=function(){s.close()},t.viewStoryUrl=function(e){return getViewStoryUrl()+t.rootPath+e},t.allowToPrevDir=function(){return""!==t.rootPath},t.deleteStory=function(s,a){var i=t.rootPath+s+".story";deleteStory(o,e,n,r,i).then(function(){t.files.stories.splice(a,1)})},t.createDirectory=function(s){var n='{"path": "'+t.rootPath+s+'"}';e.post("/stories/dir.json",n).then(function(){t.files.dirs.push({name:s})},function(t){openErrorModal(o,t.data)})},t.getNewStoryUrl=function(){return getNewStoryUrl()}}]),angular.module("configModule",[]).config(["$routeProvider","$locationProvider",function(t,e){e.html5Mode(!0),t.when(getNewStoryUrl(),{templateUrl:"/assets/html/story/story.tmpl.html",controller:"storyCtrl",resolve:{story:["$http","$modal",function(t,e){return getJson(t,e,"/stories/story.json",!1)}],steps:["$http","$modal",function(t,e){return getJson(t,e,"/steps/list.json",!0)}],groovyComposites:["$http","$modal",function(t,e){return getJson(t,e,"/groovyComposites",!0)}]}}).when(getNewStoryUrl()+":path*",{templateUrl:"/assets/html/story/story.tmpl.html",controller:"storyCtrl",resolve:{story:["$route","$http","$modal",function(t,e,o){return getJson(e,o,"/stories/story.json?path="+t.current.params.path+".story",!1)}],steps:["$http","$modal",function(t,e){return getJson(t,e,"/steps/list.json",!0)}],groovyComposites:["$http","$modal",function(t,e){return getJson(t,e,"/groovyComposites",!0)}]}}).when(getViewStoryUrl()+":path*",{templateUrl:"/assets/html/story/story.tmpl.html",controller:"storyCtrl",resolve:{story:["$route","$http","$modal",function(t,e,o){return getJson(e,o,"/stories/story.json?path="+t.current.params.path+".story",!1)}],steps:["$http","$modal",function(t,e){return getJson(t,e,"/steps/list.json",!0)}],groovyComposites:["$http","$modal",function(t,e){return getJson(t,e,"/groovyComposites",!0)}]},reloadOnSearch:!1}).when(getCompositesUrl()+":className*",{templateUrl:"/assets/html/composites/composites.tmpl.html",controller:"compositesCtrl",resolve:{compositesClass:["$route","$http",function(t,e){return getCompositesJson(e,t.current.params.className)}],steps:["$http","$modal",function(t,e){return getJson(t,e,"/steps/list.json",!1)}]}}).when("/page/runner/",{templateUrl:"/assets/html/runner/runner.tmpl.html",controller:"runnerCtrl",resolve:{data:["$route",function(t){return{reportsPath:t.current.params.path}}]}}).otherwise({redirectTo:"/page/stories/new"})}]),angular.module("bodyModule",[]).controller("bodyCtrl",["$scope","$cookieStore","$location","TcBddService",function(t,e,o,s){t.history=e.get("history"),void 0===t.history&&(t.history=[]),t.addHistoryItem=function(s){for(angular.forEach(t.history,function(e,o){e.text===s&&t.removeHistoryItem(o)});t.history.length>=10;)t.removeHistoryItem(t.history.length-1);t.history.splice(0,0,{text:s,url:o.path()}),e.put("history",t.history)},t.removeHistoryItem=function(o){s.removeCollectionElement(t.history,o),e.put("history",t.history)}}]),angular.module("compositeClassesModule",[]).controller("compositeClassesCtrl",["$scope","$http","$modalInstance","compositeClasses","compositeStepText",function(t,e,o,s,n){t.compositeClasses=s,t.compositeStepText=n,t.close=function(){o.close()},t.compositeClassUrl=function(e,o){var s="/page/composites/";void 0!==e&&""!==e&&(s+=e+".");var n;return n=o.split(o.indexOf("/")>=0?"/":"\\"),s+=n[n.length-1],void 0!==t.compositeStepText&&""!==t.compositeStepText&&(s+="?stepText="+t.compositeStepText),s},t.compositeClassText=function(t){var e;e=t.split(t.indexOf("/")>=0?"/":"\\");var o=e[e.length-1];return o.indexOf(".")>=0&&(o=o.substr(0,o.lastIndexOf("."))),o},t.classNamePattern=classNamePattern,t.cssClass=cssClass,t.data={"class":""}}]),angular.module("compositesModule",[]).controller("compositesCtrl",["$scope","$http","$modal","$location","$cookieStore","compositesClass","steps","TcBddService",function(t,e,o,s,n,r,a,i){t.addCompositesTab=function(){t.compositesClass.isNew||t.addHistoryItem(t.compositesClass.class+" composites")},t.addNewComposite=function(){t.composite={stepText:"",compositeSteps:[{}]},t.compositesClass.composites.push(t.composite)},t.addStepTextParam=function(){void 0!==s.search().stepText&&""!==s.search().stepText&&t.compositesClass.composites.push({stepText:s.search().stepText,compositeSteps:[]})},t.addNewCompositeStep=function(){t.composite.compositeSteps.push({})},t.setLastComposite=function(){if(void 0!==t.compositesClass){var e=t.compositesClass.composites.length;t.composite=t.compositesClass.composites[e-1]}else t.composite={}},t.compositesClass=r,t.addStepTextParam(),t.originalCompositesClass=angular.copy(r),t.setLastComposite(),t.steps=a,t.classNamePattern=classNamePattern,t.stepTextPattern=stepTextPattern,t.cssClass=cssClass,t.buttonCssClass=function(t,e){return i.buttonCssClass(t.$valid?e:t)},t.openComposite=function(e){t.composite=e},t.newCollectionItem=i.newCollectionItem,t.removeCollectionElement=i.removeCollectionElement,t.revertCompositesClass=function(){t.compositesClass=angular.copy(t.originalCompositesClass),t.composite=t.compositesClass.composites[0]},t.canRevertCompositesClass=function(){return!angular.equals(t.compositesClass,t.originalCompositesClass)},t.canSaveCompositesClass=function(e){var o=e.$valid,s=!angular.equals(t.compositesClass,t.originalCompositesClass),n=t.compositesClass.isNew;return(n||s)&&o},t.compositesAreValid=function(e){var o=e.$valid;return angular.forEach(t.compositesClass.composites,function(t){void 0===t.stepText||""===t.stepText?o=!1:(void 0===t.compositeSteps||0===t.compositeSteps.length)&&(o=!1)}),o},t.saveCompositesClass=function(){e.put("/groovyComposites",t.compositesClass).then(function(){t.deleteCompositesClassWithoutConfirmation(),s.path("/page/composites/"+t.compositesClass.class+".groovy"),t.compositesClass.isNew=!1,t.originalCompositesClass=angular.copy(t.compositesClass),n.put("compositeClass",t.compositesClass.class),t.addCompositesTab()},function(t){openErrorModal(o,t.data)})},t.canDeleteCompositesClass=function(){return!t.compositesClass.isNew},t.deleteCompositesClassWithoutConfirmation=function(){var s=t.compositesClass.class,n=t.originalCompositesClass.class;s!==n&&e.delete("/groovyComposites/"+n).then(function(){},function(t){openErrorModal(o,t.data)})},t.deleteCompositesClass=function(){var n={status:"Delete Composites Class",message:"Are you sure you want to delete this composites class?"},r=openConfirmationModal(o,n);r.result.then(function(){e.delete("/groovyComposites/"+t.originalCompositesClass.class).then(function(){s.path("/")},function(t){openErrorModal(o,t.data)})},function(){})},t.saveCompositesText=function(){return t.compositesClass.isNew?"Create New Composites":"Update Composites"},t.addCompositesTab()}]),angular.module("runnerModule",[]).controller("runnerCtrl",["$scope","$modal","$http","$location","TcBddService",function(t,e,o,s,n){t.openRunnerSelector=function(){return e.open({templateUrl:"/assets/html/runner/runnerSelector.tmpl.html",controller:"runnerSelectorCtrl",resolve:{data:function(){return{}}}})},t.openRunner=function(){var s=t.openRunnerSelector();void 0!==s&&s.result.then(function(s){var n=[];s.dirs.forEach(function(t){n.push({path:t.path+"/**/*.story"})}),s.stories.forEach(function(t){n.push({path:t.path})}),openRunnerParametersModal(e,!0).result.then(function(e){var s=e.classes,r=e.action;o.get("/groovyComposites").then(function(e){var o=e.data;t.apiJson={storyPaths:n,classes:s,groovyComposites:o},"run"===r?(t.run(t.apiJson),t.showApi=!1):t.showApi=!0})})})},t.run=function(s){t.storyRunnerInProgress=!0,t.showRunnerProgress=!0,t.reportsUrl="",o.post("/runner/run.json",s).then(function(o){var s=o.data;"OK"===s.status?(t.reportsUrl=s.reportsPath.replace("public/","/assets/"),t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!0):"FAILED"===s.status?(t.reportsUrl=s.reportsPath.replace("public/","/assets/"),t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!1):openErrorModal(e,s),t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!0},function(o){t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!1,openErrorModal(e,o.data)})},t.getRunnerStatusCss=function(){return getRunnerStatusCss(t.storyRunnerInProgress,t.storyRunnerSuccess,t.pendingSteps>0)},t.getStoryRunnerStatusText=function(){return getStoryRunnerStatusText(t.storyRunnerInProgress,t.storyRunnerSuccess,t.pendingSteps.length)},t.getRunnerProgressCss=function(){return n.getRunnerProgressCss(t.storyRunnerInProgress)},t.init=function(){t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!1,t.showRunnerProgress=!1,t.pendingSteps=[],t.reportsUrl="",t.openRunner(),t.showApi=!1},t.apiUrl=function(){return s.protocol()+"://"+s.host()+":"+s.port()+"/runner/run.json"},t.init()}]).controller("runnerSelectorCtrl",["$scope","$http","$modal","$modalInstance",function(t,e,o,s){t.files={dirs:[],stories:[]},getStories(t,e,o,""),t.openDir=function(s){openDir(t,e,o,s)},t.cancelRunnerSelector=function(){s.dismiss("cancel")},t.okRunnerSelector=function(){var e={dirs:[],stories:[]};angular.forEach(t.files.dirs,function(o){o.selected&&e.dirs.push({path:t.rootPath+o.name})}),angular.forEach(t.files.stories,function(o){o.selected&&e.stories.push({path:t.rootPath+o.name+".story"})}),s.close(e)},t.allowToPrevDir=function(){return""!==t.rootPath},t.canContinue=function(){var e=!1;return angular.forEach(t.files.dirs,function(t){t.selected&&(e=!0)}),e||angular.forEach(t.files.stories,function(t){t.selected&&(e=!0)}),e}}]).controller("runnerParamsCtrl",["$scope","$modalInstance","$cookieStore","data","showGetApi",function(t,e,o,s,n){t.classes=s.classes,t.classes.forEach(function(t){t.params.forEach(function(e){try{e.value=o.get(t.fullName+"."+e.key)}catch(s){console.log("Could not retrieve cookie "+t.fullName+"."+e.key),console.log(s.message)}})}),t.hasParams=function(t){return void 0!==t.params&&t.params.length>0},t.ok=function(){e.close({action:"run",classes:t.classes})},t.cancel=function(){e.dismiss("cancel")},t.showGetApi=function(){return n},t.getApi=function(){e.close({action:"api",classes:t.classes})},t.paramElementId=function(t,e){var o=t.charAt(0).toLowerCase()+t.slice(1),s=e.charAt(0).toUpperCase()+e.slice(1);return o+s}}]),angular.module("storyModule",[]).controller("storyCtrl",["$scope","$http","$modal","$location","$cookieStore","$q","$anchorScroll","story","steps","groovyComposites","TcBddService",function(t,e,o,s,n,r,a,i,l,c,u){t.pendingSteps=[],t.setAction=function(){""!==t.story.name?(t.action="PUT",t.addHistoryItem(t.story.name+" story")):t.action="POST"},t.expandPanels=function(){var e=!0;void 0===t.panelsExpanded?t.panelsExpanded=!1:(t.panelsExpanded=!t.panelsExpanded,e=t.panelsExpanded),t.panels={story:t.panelsExpanded,description:t.panelsExpanded,meta:t.panelsExpanded,narrative:t.panelsExpanded,givenStories:t.panelsExpanded,lifecycle:t.panelsExpanded,scenarios:e}},t.story=i,t.steps=l,t.groovyComposites=c,t.stepTypes=["GIVEN","WHEN","THEN"],t.storyFormClass="col-md-12",t.storyRunnerVisible=!1,t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!0,t.expandPanels(),t.originalStory=angular.copy(i);var p=t.story.path.split("/");t.dirPath=p.slice(0,p.length-1).join("/"),""!==t.dirPath&&(t.dirPath+="/"),t.setAction(),t.cssClass=cssClass,t.buttonCssClass=u.buttonCssClass,t.canSaveStory=function(){var e=t.storyForm.$valid,o=!angular.equals(t.story,t.originalStory);return e&&o},t.stepTextPattern=stepTextPattern,t.saveStory=function(){if(t.canSaveStory())if(t.story.path=t.dirPath+t.story.name+".story","POST"===t.action){var n=t.dirPath.split("/"),r=n.slice(0,n.length-1).join("/");""!==r&&(r+="/"),e.post("/stories/story.json",t.story).then(function(){s.path(getViewStoryUrl()+r+t.story.name),t.originalStory=angular.copy(t.story)},function(e){t.openErrorModal(o,e.data)})}else t.story.name!==t.originalStory.name&&(t.story.originalPath=t.originalStory.path),e.put("/stories/story.json",t.story).then(function(){t.originalStory=angular.copy(t.story)},function(e){t.openErrorModal(o,e.data)})},t.canRunStory=function(){return t.storyForm.$valid&&!t.storyRunnerInProgress},t.runStory=function(){t.canRunStory()&&(t.saveStory(),t.openRunnerModal().result.then(function(s){var r=s.classes;t.storyFormClass="col-md-6",t.storyRunnerClass="col-md-6",t.storyRunnerVisible=!0,t.storyRunnerInProgress=!0,r.forEach(function(t){t.params.forEach(function(e){n.put(t.fullName+"."+e.key,e.value)})});var a={storyPaths:[{path:t.story.path}],classes:r,groovyComposites:t.groovyComposites};e.post("/runner/run.json",a).then(function(e){t.storyRunnerSuccess="OK"===e.data.status,t.storyRunnerInProgress=!1,t.getReports(e.data.id)},function(e){t.storyRunnerSuccess=!1,t.storyRunnerInProgress=!1,t.openErrorModal(o,e.data)})},function(e){t.openErrorModal(o,e.data)}))},t.getReports=function(s){e.get("/api/v1/reporters/list/"+s).then(function(e){t.reports=e.data,t.reports.id=s,t.setPendingSteps(t.reports)},function(e){t.openErrorModal(o,e.data)})},t.getReportUrl=function(t,e){return"/api/v1/reporters/get/"+t+"/"+e},t.openRunnerModal=function(){return openRunnerParametersModal(o,!1)},t.getRunnerProgressCss=function(){return u.getRunnerProgressCss(t.storyRunnerInProgress)},t.getRunnerStatusCss=function(){return getRunnerStatusCss(t.storyRunnerInProgress,t.storyRunnerSuccess,t.pendingSteps>0)},t.setPendingSteps=function(e){t.pendingSteps=[],e.forEach(function(e){e.steps.forEach(function(e){"pending"===e.status&&t.pendingSteps.push({text:e.text})})})},t.hasPendingSteps=function(){return void 0!==t.pendingSteps&&t.pendingSteps.length>0},t.getStoryRunnerStatusText=function(){return getStoryRunnerStatusText(t.storyRunnerInProgress,t.storyRunnerSuccess,t.pendingSteps.length)},t.removeCollectionElement=u.removeCollectionElement,t.addElement=function(t){t.push({})},t.addScenarioElement=function(t){t.push({title:"",meta:[],steps:[],examplesTable:""})},t.revertStory=function(){t.story=angular.copy(t.originalStory),t.storyForm.$setPristine()},t.canRevertStory=function(){return!angular.equals(t.story,t.originalStory)},t.canDeleteStory=function(){return"PUT"===t.action&&!t.storyRunnerInProgress},t.deleteStory=function(){var n=t.dirPath+t.story.name+".story";deleteStory(o,e,s,r,n)},t.stepEnterKey=u.newCollectionItem,t.clickPendingStep=function(t){var e=n.get("compositeClass");return void 0===e||""===e?u.openCompositeClass(t):s.search("stepText",t).path("/page/composites/composites.com.technologyconversations.bdd.steps."+e)},t.openErrorModal=openErrorModal}]),angular.module("topMenuModule",[]).controller("topMenuController",["$scope","$modal","$location","TcBddService",function(t,e,o,s){t.openStory=function(){e.open({templateUrl:"/assets/html/stories.tmpl.html",controller:"storiesCtrl",resolve:{data:function(){return{}}}})},t.openCompositeClass=function(){s.openCompositeClass(e)},t.getTitle=function(){var t=o.path();return 0===t.indexOf(getViewStoryUrl())?"View Story":0===t.indexOf(getNewStoryUrl())?"New Story":0===t.indexOf(getCompositesUrl())?"Composites":0===t.indexOf("/page/reports/")?"Reports":""}}]);
//# sourceMappingURL=data:application/json;base64,