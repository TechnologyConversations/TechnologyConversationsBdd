angular.module("storiesModule",["ngRoute","ngCookies","ui.bootstrap","ui.sortable","configModule","bodyModule","topMenuModule","storyModule","compositeClassesModule","compositesModule","runnerModule"]).service("TcBddService",["$modal","$http","$location","$q",function(t,e,o,s){this.openCompositeClass=function(e){var o=this;t.open({templateUrl:"/assets/html/compositeClasses/compositeClasses.tmpl.html",controller:"compositeClassesCtrl",resolve:{compositeClasses:["$route","$http","$modal",function(){return o.getJson("/groovyComposites",!1)}],compositeStepText:function(){return e}}})},this.newCollectionItem=function(t,e){13===t.which&&e.push({})},this.removeCollectionElement=function(t,e){t.splice(e,1)},this.buttonCssClass=function(t){return{"btn-success":t.$valid,"btn-danger":t.$invalid}},this.getRunnerProgressCss=function(t){return{"progress progress-striped active":t,progress:!t}},this.getStoryRunnerStatusText=function(t,e,o){return t?"Story run is in progress":e?o>0?"Story run was successful with "+o+" pending steps":"Story run was successful":"Story run failed"},this.getRunnerStatusCss=function(t,e,o){return{"progress-bar progress-bar-info":t,"progress-bar progress-bar-warning":!t&&e&&o,"progress-bar progress-bar-success":!t&&e&&!o,"progress-bar progress-bar-danger":!t&&!e}},this.openRunnerParametersModal=function(e){var o=this;return t.open({templateUrl:"/assets/html/runner/runnerParams.tmpl.html",controller:"runnerParamsCtrl",resolve:{data:["$route","$http","$modal",function(){return o.getJson("/steps/classes.json",!0)}],showGetApi:function(){return e}}})},this.openDir=function(t,e){if(".."===e){var o=t.rootPath.split("/");t.rootPath=o.slice(0,o.length-2).join("/"),""!==t.rootPath&&(t.rootPath+="/"),this.getStories(t,"")}else this.getStories(t,e)},this.getStories=function(t,o){var s=this;void 0===t.rootPath&&(t.rootPath=""),e.get("/stories/list.json?path="+t.rootPath+o).then(function(e){t.files=e.data,""!==o&&(t.rootPath+=o+"/")},function(t){s.openErrorModal(t.data)})},this.stepTextPattern=function(){return/^(Given|When|Then) .+$/},this.openConfirmationModal=function(e){return t.open({templateUrl:"/assets/html/confirmationModal.tmpl.html",controller:"modalCtrl",resolve:{data:function(){return e}}})},this.classNamePattern=function(){return/^[a-zA-Z_$][a-zA-Z\d_$]*$/},this.cssClass=function(t){return{"has-error":t.$invalid,"has-success":t.$valid&&t.$dirty}},this.deleteStory=function(t){var r=this,n=s.defer(),a={status:"Delete Story",message:"Are you sure you want to delete this story?"},i=this.openConfirmationModal(a);return i.result.then(function(){e.delete("/stories/story/"+t).then(function(){o.path("/page/stories/new/"),n.resolve("OK")},function(t){r.openErrorModal(t.data),n.reject("NOK")})},function(){n.reject("NOK")}),n.promise},this.getJson=function(t,o){var s=this;return e.get(t,{cache:o}).then(function(t){return t.data},function(t){s.openErrorModal(t.data)})},this.openErrorModal=function(e){t.open({templateUrl:"/assets/html/errorModal.tmpl.html",controller:"modalCtrl",resolve:{data:function(){return e}}})}}]).controller("modalCtrl",["$scope","$modalInstance","data",function(t,e,o){t.data=o,t.ok=function(){e.close("ok")},t.cancel=function(){e.dismiss("cancel")}}]).controller("storiesCtrl",["$scope","$http","$modal","$modalInstance","$location","$q","TcBddService",function(t,e,o,s,r,n,a){a.getStories(t,""),t.openDir=function(e){a.openDir(t,e)},t.close=function(){s.close()},t.viewStoryUrl=function(e){return"/page/stories/view/"+t.rootPath+e},t.allowToPrevDir=function(){return""!==t.rootPath},t.deleteStory=function(e,o){var s=t.rootPath+e+".story";a.deleteStory(s).then(function(){t.files.stories.splice(o,1)})},t.createDirectory=function(o){var s='{"path": "'+t.rootPath+o+'"}';e.post("/stories/dir.json",s).then(function(){t.files.dirs.push({name:o})},function(t){a.openErrorModal(t.data)})}}]),angular.module("configModule",[]).config(["$routeProvider","$locationProvider",function(t,e){e.html5Mode(!0),t.when("/page/stories/new/",{templateUrl:"/assets/html/story/story.tmpl.html",controller:"storyCtrl",resolve:{story:["$http","$modal","TcBddService",function(t,e,o){return o.getJson("/stories/story.json",!1)}],steps:["$http","$modal","TcBddService",function(t,e,o){return o.getJson("/steps/list.json",!0)}],groovyComposites:["$http","$modal","TcBddService",function(t,e,o){return o.getJson("/groovyComposites",!0)}]}}).when("/page/stories/new/:path*",{templateUrl:"/assets/html/story/story.tmpl.html",controller:"storyCtrl",resolve:{story:["$route","$http","$modal","TcBddService",function(t,e,o,s){return s.getJson("/stories/story.json?path="+t.current.params.path+".story",!1)}],steps:["$http","$modal","TcBddService",function(t,e,o){return o.getJson("/steps/list.json",!0)}],groovyComposites:["$http","$modal","TcBddService",function(t,e,o){return o.getJson("/groovyComposites",!0)}]}}).when("/page/stories/view/:path*",{templateUrl:"/assets/html/story/story.tmpl.html",controller:"storyCtrl",resolve:{story:["$route","$http","$modal","TcBddService",function(t,e,o,s){return s.getJson("/stories/story.json?path="+t.current.params.path+".story",!1)}],steps:["$http","$modal","TcBddService",function(t,e,o){return o.getJson("/steps/list.json",!0)}],groovyComposites:["$http","$modal","TcBddService",function(t,e,o){return o.getJson("/groovyComposites",!0)}]},reloadOnSearch:!1}).when("/page/composites/:className*",{templateUrl:"/assets/html/composites/composites.tmpl.html",controller:"compositesCtrl",resolve:{compositesClass:["$route","$http",function(t,e){var o=t.current.params.className,s="/groovyComposites/"+o;return e.get(s,{cache:!1}).then(function(t){return t.data},function(){var t=o.substring(0,o.lastIndexOf("."));return{"class":t,composites:[{stepText:"",compositeSteps:[{}]}],isNew:!0}})}],steps:["$http","$modal","TcBddService",function(t,e,o){return o.getJson("/steps/list.json",!1)}]}}).when("/page/runner/",{templateUrl:"/assets/html/runner/runner.tmpl.html",controller:"runnerCtrl",resolve:{data:["$route",function(t){return{reportsPath:t.current.params.path}}]}}).otherwise({redirectTo:"/page/stories/new"})}]),angular.module("bodyModule",[]).controller("bodyCtrl",["$scope","$cookieStore","$location","TcBddService",function(t,e,o,s){t.history=e.get("history"),void 0===t.history&&(t.history=[]),t.addHistoryItem=function(s){for(angular.forEach(t.history,function(e,o){e.text===s&&t.removeHistoryItem(o)});t.history.length>=10;)t.removeHistoryItem(t.history.length-1);t.history.splice(0,0,{text:s,url:o.path()}),e.put("history",t.history)},t.removeHistoryItem=function(o){s.removeCollectionElement(t.history,o),e.put("history",t.history)}}]),angular.module("compositeClassesModule",[]).controller("compositeClassesCtrl",["$scope","$http","$modalInstance","compositeClasses","compositeStepText","TcBddService",function(t,e,o,s,r,n){t.compositeClasses=s,t.compositeStepText=r,t.close=function(){o.close()},t.compositeClassUrl=function(e,o){var s="/page/composites/";void 0!==e&&""!==e&&(s+=e+".");var r;return r=o.split(o.indexOf("/")>=0?"/":"\\"),s+=r[r.length-1],void 0!==t.compositeStepText&&""!==t.compositeStepText&&(s+="?stepText="+t.compositeStepText),s},t.compositeClassText=function(t){var e;e=t.split(t.indexOf("/")>=0?"/":"\\");var o=e[e.length-1];return o.indexOf(".")>=0&&(o=o.substr(0,o.lastIndexOf("."))),o},t.classNamePattern=n.classNamePattern,t.cssClass=n.cssClass,t.data={"class":""}}]),angular.module("compositesModule",[]).controller("compositesCtrl",["$scope","$http","$modal","$location","$cookieStore","compositesClass","steps","TcBddService",function(t,e,o,s,r,n,a,i){t.addCompositesTab=function(){t.compositesClass.isNew||t.addHistoryItem(t.compositesClass.class+" composites")},t.addNewComposite=function(){t.composite={stepText:"",compositeSteps:[{}]},t.compositesClass.composites.push(t.composite)},t.addStepTextParam=function(){void 0!==s.search().stepText&&""!==s.search().stepText&&t.compositesClass.composites.push({stepText:s.search().stepText,compositeSteps:[]})},t.addNewCompositeStep=function(){t.composite.compositeSteps.push({})},t.setLastComposite=function(){if(void 0!==t.compositesClass){var e=t.compositesClass.composites.length;t.composite=t.compositesClass.composites[e-1]}else t.composite={}},t.compositesClass=n,t.addStepTextParam(),t.originalCompositesClass=angular.copy(n),t.setLastComposite(),t.steps=a,t.classNamePattern=i.classNamePattern,t.stepTextPattern=i.stepTextPattern,t.cssClass=i.cssClass,t.buttonCssClass=function(t,e){return i.buttonCssClass(t.$valid?e:t)},t.openComposite=function(e){t.composite=e},t.newCollectionItem=i.newCollectionItem,t.removeCollectionElement=i.removeCollectionElement,t.revertCompositesClass=function(){t.compositesClass=angular.copy(t.originalCompositesClass),t.composite=t.compositesClass.composites[0]},t.canRevertCompositesClass=function(){return!angular.equals(t.compositesClass,t.originalCompositesClass)},t.canSaveCompositesClass=function(e){var o=e.$valid,s=!angular.equals(t.compositesClass,t.originalCompositesClass),r=t.compositesClass.isNew;return(r||s)&&o},t.compositesAreValid=function(e){var o=e.$valid;return angular.forEach(t.compositesClass.composites,function(t){void 0===t.stepText||""===t.stepText?o=!1:(void 0===t.compositeSteps||0===t.compositeSteps.length)&&(o=!1)}),o},t.saveCompositesClass=function(){e.put("/groovyComposites",t.compositesClass).then(function(){t.deleteCompositesClassWithoutConfirmation(),s.path("/page/composites/"+t.compositesClass.class+".groovy"),t.compositesClass.isNew=!1,t.originalCompositesClass=angular.copy(t.compositesClass),r.put("compositeClass",t.compositesClass.class),t.addCompositesTab()},function(t){i.openErrorModal(t.data)})},t.canDeleteCompositesClass=function(){return!t.compositesClass.isNew},t.deleteCompositesClassWithoutConfirmation=function(){var o=t.compositesClass.class,s=t.originalCompositesClass.class;o!==s&&e.delete("/groovyComposites/"+s).then(function(){},function(t){i.openErrorModal(t.data)})},t.deleteCompositesClass=function(){var o={status:"Delete Composites Class",message:"Are you sure you want to delete this composites class?"},r=i.openConfirmationModal(o);r.result.then(function(){e.delete("/groovyComposites/"+t.originalCompositesClass.class).then(function(){s.path("/")},function(t){i.openErrorModal(t.data)})},function(){})},t.saveCompositesText=function(){return t.compositesClass.isNew?"Create New Composites":"Update Composites"},t.addCompositesTab()}]),angular.module("runnerModule",[]).controller("runnerCtrl",["$scope","$modal","$http","$location","TcBddService",function(t,e,o,s,r){t.openRunnerSelector=function(){return e.open({templateUrl:"/assets/html/runner/runnerSelector.tmpl.html",controller:"runnerSelectorCtrl",resolve:{data:function(){return{}}}})},t.openRunner=function(){var e=t.openRunnerSelector();void 0!==e&&e.result.then(function(e){var s=[];e.dirs.forEach(function(t){s.push({path:t.path+"/**/*.story"})}),e.stories.forEach(function(t){s.push({path:t.path})}),r.openRunnerParametersModal(!0).result.then(function(e){var r=e.classes,n=e.action;o.get("/groovyComposites").then(function(e){var o=e.data;t.apiJson={storyPaths:s,classes:r,groovyComposites:o},"run"===n?(t.run(t.apiJson),t.showApi=!1):t.showApi=!0})})})},t.run=function(e){var s="/assets/jbehave/";t.storyRunnerInProgress=!0,t.showRunnerProgress=!0,t.reportsUrl="",o.post("/runner/run.json",e).then(function(e){var o=e.data;"OK"===o.status?(t.reportsUrl=s+o.reportsPath,t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!0):"FAILED"===o.status?(t.reportsUrl=s+o.reportsPath,t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!1):r.openErrorModal(o),t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!0},function(e){t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!1,r.openErrorModal(e.data)})},t.getRunnerStatusCss=function(){return r.getRunnerStatusCss(t.storyRunnerInProgress,t.storyRunnerSuccess,t.pendingSteps>0)},t.getStoryRunnerStatusText=function(){return t.storyRunnerInProgress?"Stories run is in progress":"Stories run is finished"},t.getRunnerProgressCss=function(){return r.getRunnerProgressCss(t.storyRunnerInProgress)},t.init=function(){t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!1,t.showRunnerProgress=!1,t.pendingSteps=[],t.reportsUrl="",t.openRunner(),t.showApi=!1},t.apiUrl=function(){return s.protocol()+"://"+s.host()+":"+s.port()+"/runner/run.json"},t.init()}]).controller("runnerSelectorCtrl",["$scope","$http","$modal","$modalInstance","TcBddService",function(t,e,o,s,r){t.files={dirs:[],stories:[]},r.getStories(t,""),t.openDir=function(e){r.openDir(t,e)},t.cancelRunnerSelector=function(){s.dismiss("cancel")},t.okRunnerSelector=function(){var e={dirs:[],stories:[]};angular.forEach(t.files.dirs,function(o){o.selected&&e.dirs.push({path:t.rootPath+o.name})}),angular.forEach(t.files.stories,function(o){o.selected&&e.stories.push({path:t.rootPath+o.name+".story"})}),s.close(e)},t.allowToPrevDir=function(){return""!==t.rootPath},t.canContinue=function(){var e=!1;return angular.forEach(t.files.dirs,function(t){t.selected&&(e=!0)}),e||angular.forEach(t.files.stories,function(t){t.selected&&(e=!0)}),e}}]).controller("runnerParamsCtrl",["$scope","$modalInstance","$cookieStore","data","showGetApi",function(t,e,o,s,r){t.classes=s.classes,t.paramArray=[],t.classes.forEach(function(t){t.params.forEach(function(e){try{e.value=o.get(t.fullName+"."+e.key)}catch(s){console.log("Could not retrieve cookie "+t.fullName+"."+e.key),console.log(s.message)}})}),t.hasOptions=function(t){return t?t.length>0:!1},t.hasParams=function(t){return void 0!==t.params&&t.params.length>0},t.ok=function(){e.close({action:"run",classes:t.classes})},t.cancel=function(){e.dismiss("cancel")},t.showGetApi=function(){return r},t.getApi=function(){e.close({action:"api",classes:t.classes})},t.paramElementId=function(t,e){var o=t.charAt(0).toLowerCase()+t.slice(1),s=e.charAt(0).toUpperCase()+e.slice(1);return o+s}}]),angular.module("topMenuModule",[]).controller("topMenuController",["$scope","$modal","$location","TcBddService",function(t,e,o,s){t.openStory=function(){e.open({templateUrl:"/assets/html/stories.tmpl.html",controller:"storiesCtrl",resolve:{data:function(){return{}}}})},t.openCompositeClass=function(){s.openCompositeClass()},t.getTitle=function(){var t=o.path();return 0===t.indexOf("/page/stories/view/")?"View Story":0===t.indexOf("/page/stories/new/")?"New Story":0===t.indexOf("/page/composites/")?"Composites":0===t.indexOf("/page/reports/")?"Reports":""}}]),angular.module("storyModule",[]).controller("storyCtrl",["$scope","$http","$modal","$location","$cookieStore","$q","$anchorScroll","story","steps","groovyComposites","TcBddService",function(t,e,o,s,r,n,a,i,l,c,u){t.pendingSteps=[],t.setAction=function(){""!==t.story.name?(t.action="PUT",t.addHistoryItem(t.story.name+" story")):t.action="POST"},t.expandPanels=function(){var e=!0;void 0===t.panelsExpanded?t.panelsExpanded=!1:(t.panelsExpanded=!t.panelsExpanded,e=t.panelsExpanded),t.panels={story:t.panelsExpanded,description:t.panelsExpanded,meta:t.panelsExpanded,narrative:t.panelsExpanded,givenStories:t.panelsExpanded,lifecycle:t.panelsExpanded,scenarios:e}},t.story=i,t.steps=l,t.groovyComposites=c,t.stepTypes=["GIVEN","WHEN","THEN"],t.storyFormClass="col-md-12",t.storyRunnerVisible=!1,t.storyRunnerInProgress=!1,t.storyRunnerSuccess=!0,t.expandPanels(),t.originalStory=angular.copy(i);var p=t.story.path.split("/");t.dirPath=p.slice(0,p.length-1).join("/"),""!==t.dirPath&&(t.dirPath+="/"),t.setAction(),t.cssClass=u.cssClass,t.buttonCssClass=u.buttonCssClass,t.canSaveStory=function(){var e=t.storyForm.$valid,o=!angular.equals(t.story,t.originalStory);return e&&o},t.stepTextPattern=u.stepTextPattern,t.saveStory=function(){if(t.canSaveStory())if(t.story.path=t.dirPath+t.story.name+".story","POST"===t.action){var o=t.dirPath.split("/"),r=o.slice(0,o.length-1).join("/");""!==r&&(r+="/"),e.post("/stories/story.json",t.story).then(function(){s.path("/page/stories/view/"+r+t.story.name),t.originalStory=angular.copy(t.story)},function(e){t.openErrorModal(e.data)})}else t.story.name!==t.originalStory.name&&(t.story.originalPath=t.originalStory.path),e.put("/stories/story.json",t.story).then(function(){t.originalStory=angular.copy(t.story)},function(e){t.openErrorModal(e.data)})},t.canRunStory=function(){return t.storyForm.$valid&&!t.storyRunnerInProgress},t.runStory=function(){t.canRunStory()&&(t.saveStory(),t.openRunnerModal().result.then(function(o){var s=o.classes;t.storyFormClass="col-md-6",t.storyRunnerClass="col-md-6",t.storyRunnerVisible=!0,t.storyRunnerInProgress=!0,s.forEach(function(t){t.params.forEach(function(e){r.put(t.fullName+"."+e.key,e.value)})});var n={storyPaths:[{path:t.story.path}],classes:s,groovyComposites:t.groovyComposites};e.post("/runner/run.json",n).then(function(e){t.storyRunnerSuccess="OK"===e.data.status,t.storyRunnerInProgress=!1,t.getReports(e.data.id)},function(e){t.storyRunnerSuccess=!1,t.storyRunnerInProgress=!1,t.openErrorModal(e.data)})},function(e){t.openErrorModal(e.data)}))},t.getReports=function(o){e.get("/api/v1/reporters/list/"+o).then(function(e){t.reports=e.data,t.reports.id=o,t.setPendingSteps(t.reports)},function(e){t.openErrorModal(e.data)})},t.getReportUrl=function(t,e){return"/api/v1/reporters/get/"+t+"/"+e},t.openRunnerModal=function(){return u.openRunnerParametersModal(!1)},t.getRunnerProgressCss=function(){return u.getRunnerProgressCss(t.storyRunnerInProgress)},t.getRunnerStatusCss=function(){return u.getRunnerStatusCss(t.storyRunnerInProgress,t.storyRunnerSuccess,t.pendingSteps>0)},t.setPendingSteps=function(e){t.pendingSteps=[],e.forEach(function(e){e.steps.forEach(function(e){"pending"===e.status&&t.pendingSteps.push({text:e.text})})})},t.hasPendingSteps=function(){return void 0!==t.pendingSteps&&t.pendingSteps.length>0},t.getStoryRunnerStatusText=function(){return u.getStoryRunnerStatusText(t.storyRunnerInProgress,t.storyRunnerSuccess,t.pendingSteps.length)},t.removeCollectionElement=u.removeCollectionElement,t.addElement=function(t){t.push({})},t.addScenarioElement=function(t){t.push({title:"",meta:[],steps:[],examplesTable:""})},t.revertStory=function(){t.story=angular.copy(t.originalStory),t.storyForm.$setPristine()},t.canRevertStory=function(){return!angular.equals(t.story,t.originalStory)},t.canDeleteStory=function(){return"PUT"===t.action&&!t.storyRunnerInProgress},t.deleteStory=function(){var e=t.dirPath+t.story.name+".story";u.deleteStory(e)},t.stepEnterKey=u.newCollectionItem,t.clickPendingStep=function(t){var e=r.get("compositeClass");return void 0===e||""===e?u.openCompositeClass(t):s.search("stepText",t).path("/page/composites/composites.com.technologyconversations.bdd.steps."+e)},t.openErrorModal=u.openErrorModal}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlcyI6WyJpbmRleC5qcyIsImNvbmZpZy5qcyIsImNvbW1vblxcYm9keS5jdHJsLmpzIiwiY29tcG9zaXRlQ2xhc3Nlc1xcY29tcG9zaXRlQ2xhc3Nlcy5jdHJsLmpzIiwiY29tcG9zaXRlc1xcY29tcG9zaXRlcy5jdHJsLmpzIiwicnVubmVyXFxydW5uZXIuY3RybC5qcyIsInRvcE1lbnVcXHRvcE1lbnUuY3RybC5qcyIsInN0b3J5XFxzdG9yeS5jdHJsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFFBQUEsT0FBQSxpQkFDQSxVQUNBLFlBQ0EsZUFDQSxjQUNBLGVBQ0EsYUFDQSxnQkFDQSxjQUNBLHlCQUNBLG1CQUNBLGlCQUVBLFFBQUEsZ0JBQUEsU0FBQSxRQUFBLFlBQUEsS0FBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsS0FBQSxtQkFBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLElBQ0EsR0FBQSxNQUNBLFlBQUEsMkRBQ0EsV0FBQSx1QkFDQSxTQUNBLGtCQUFBLFNBQUEsUUFBQSxTQUFBLFdBQ0EsTUFBQSxHQUFBLFFBQUEscUJBQUEsS0FFQSxrQkFBQSxXQUNBLE1BQUEsUUFLQSxLQUFBLGtCQUFBLFNBQUEsRUFBQSxHQUNBLEtBQUEsRUFBQSxPQUNBLEVBQUEsVUFHQSxLQUFBLHdCQUFBLFNBQUEsRUFBQSxHQUNBLEVBQUEsT0FBQSxFQUFBLElBRUEsS0FBQSxlQUFBLFNBQUEsR0FDQSxPQUNBLGNBQUEsRUFBQSxPQUNBLGFBQUEsRUFBQSxXQUdBLEtBQUEscUJBQUEsU0FBQSxHQUNBLE9BQ0EsbUNBQUEsRUFDQSxVQUFBLElBR0EsS0FBQSx5QkFBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLE1BQUEsR0FDQSwyQkFDQSxFQUNBLEVBQUEsRUFDQSxpQ0FBQSxFQUFBLGlCQUVBLDJCQUdBLG9CQUdBLEtBQUEsbUJBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxPQUNBLGlDQUFBLEVBQ0EscUNBQUEsR0FBQSxHQUFBLEVBQ0EscUNBQUEsR0FBQSxJQUFBLEVBQ0Esb0NBQUEsSUFBQSxJQUdBLEtBQUEsMEJBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxJQUNBLE9BQUEsR0FBQSxNQUNBLFlBQUEsNkNBQ0EsV0FBQSxtQkFDQSxTQUNBLE1BQUEsU0FBQSxRQUFBLFNBQUEsV0FDQSxNQUFBLEdBQUEsUUFBQSx1QkFBQSxLQUVBLFdBQUEsV0FDQSxNQUFBLFFBS0EsS0FBQSxRQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsT0FBQSxFQUFBLENBQ0EsR0FBQSxHQUFBLEVBQUEsU0FBQSxNQUFBLElBQ0EsR0FBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLEVBQUEsT0FBQSxHQUFBLEtBQUEsS0FDQSxLQUFBLEVBQUEsV0FDQSxFQUFBLFVBQUEsS0FFQSxLQUFBLFdBQUEsRUFBQSxRQUVBLE1BQUEsV0FBQSxFQUFBLElBR0EsS0FBQSxXQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxJQUNBLFVBQUEsRUFBQSxXQUNBLEVBQUEsU0FBQSxJQUVBLEVBQUEsSUFBQSwyQkFBQSxFQUFBLFNBQUEsR0FBQSxLQUFBLFNBQUEsR0FDQSxFQUFBLE1BQUEsRUFBQSxLQUNBLEtBQUEsSUFDQSxFQUFBLFVBQUEsRUFBQSxNQUVBLFNBQUEsR0FDQSxFQUFBLGVBQUEsRUFBQSxTQUdBLEtBQUEsZ0JBQUEsV0FDQSxNQUFBLDBCQUVBLEtBQUEsc0JBQUEsU0FBQSxHQUNBLE1BQUEsR0FBQSxNQUNBLFlBQUEsMkNBQ0EsV0FBQSxZQUNBLFNBQ0EsS0FBQSxXQUNBLE1BQUEsUUFLQSxLQUFBLGlCQUFBLFdBQ0EsTUFBQSw2QkFFQSxLQUFBLFNBQUEsU0FBQSxHQUNBLE9BQ0EsWUFBQSxFQUFBLFNBQ0EsY0FBQSxFQUFBLFFBQUEsRUFBQSxTQUlBLEtBQUEsWUFBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLEtBQ0EsRUFBQSxFQUFBLFFBQ0EsR0FBQSxPQUFBLGVBQUEsUUFBQSwrQ0FDQSxFQUFBLEtBQUEsc0JBQUEsRUFZQSxPQVhBLEdBQUEsT0FBQSxLQUFBLFdBQ0EsRUFBQSxPQUFBLGtCQUFBLEdBQUEsS0FBQSxXQUNBLEVBQUEsS0FBQSxzQkFDQSxFQUFBLFFBQUEsT0FDQSxTQUFBLEdBQ0EsRUFBQSxlQUFBLEVBQUEsTUFDQSxFQUFBLE9BQUEsVUFFQSxXQUNBLEVBQUEsT0FBQSxTQUVBLEVBQUEsU0FFQSxLQUFBLFFBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLElBQ0EsT0FBQSxHQUFBLElBQUEsR0FBQSxNQUFBLElBQUEsS0FBQSxTQUFBLEdBQ0EsTUFBQSxHQUFBLE1BQ0EsU0FBQSxHQUNBLEVBQUEsZUFBQSxFQUFBLFNBR0EsS0FBQSxlQUFBLFNBQUEsR0FDQSxFQUFBLE1BQ0EsWUFBQSxvQ0FDQSxXQUFBLFlBQ0EsU0FDQSxLQUFBLFdBQ0EsTUFBQSxXQU1BLFdBQUEsYUFBQSxTQUFBLGlCQUFBLE9BQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxFQUFBLEtBQUEsRUFDQSxFQUFBLEdBQUEsV0FDQSxFQUFBLE1BQUEsT0FFQSxFQUFBLE9BQUEsV0FDQSxFQUFBLFFBQUEsY0FHQSxXQUFBLGVBQUEsU0FBQSxRQUFBLFNBQUEsaUJBQUEsWUFBQSxLQUFBLGVBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsV0FBQSxFQUFBLElBQ0EsRUFBQSxRQUFBLFNBQUEsR0FDQSxFQUFBLFFBQUEsRUFBQSxJQUVBLEVBQUEsTUFBQSxXQUNBLEVBQUEsU0FFQSxFQUFBLGFBQUEsU0FBQSxHQUNBLE1BQUEsc0JBQUEsRUFBQSxTQUFBLEdBRUEsRUFBQSxlQUFBLFdBQ0EsTUFBQSxLQUFBLEVBQUEsVUFHQSxFQUFBLFlBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsU0FBQSxFQUFBLFFBQ0EsR0FBQSxZQUFBLEdBQUEsS0FBQSxXQUNBLEVBQUEsTUFBQSxRQUFBLE9BQUEsRUFBQSxNQUlBLEVBQUEsZ0JBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxhQUFBLEVBQUEsU0FBQSxFQUFBLElBQ0EsR0FBQSxLQUFBLG9CQUFBLEdBQUEsS0FBQSxXQUNBLEVBQUEsTUFBQSxLQUFBLE1BQUEsS0FBQSxLQUNBLFNBQUEsR0FDQSxFQUFBLGVBQUEsRUFBQSxZQ2pOQSxRQUFBLE9BQUEsbUJBQ0EsUUFBQSxpQkFBQSxvQkFBQSxTQUFBLEVBQUEsR0FDQSxFQUFBLFdBQUEsR0FDQSxFQUVBLEtBQUEsc0JBQ0EsWUFBQSxxQ0FDQSxXQUFBLFlBRUEsU0FDQSxPQUFBLFFBQUEsU0FBQSxlQUFBLFNBQUEsRUFBQSxFQUFBLEdBQ0EsTUFBQSxHQUFBLFFBQUEsdUJBQUEsS0FFQSxPQUFBLFFBQUEsU0FBQSxlQUFBLFNBQUEsRUFBQSxFQUFBLEdBQ0EsTUFBQSxHQUFBLFFBQUEsb0JBQUEsS0FFQSxrQkFBQSxRQUFBLFNBQUEsZUFBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLE1BQUEsR0FBQSxRQUFBLHFCQUFBLFFBSUEsS0FBQSw0QkFDQSxZQUFBLHFDQUNBLFdBQUEsWUFFQSxTQUNBLE9BQUEsU0FBQSxRQUFBLFNBQUEsZUFBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsTUFBQSxHQUFBLFFBQUEsNEJBQUEsRUFBQSxRQUFBLE9BQUEsS0FBQSxVQUFBLEtBRUEsT0FBQSxRQUFBLFNBQUEsZUFBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLE1BQUEsR0FBQSxRQUFBLG9CQUFBLEtBRUEsa0JBQUEsUUFBQSxTQUFBLGVBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxNQUFBLEdBQUEsUUFBQSxxQkFBQSxRQUlBLEtBQUEsNkJBQ0EsWUFBQSxxQ0FDQSxXQUFBLFlBRUEsU0FDQSxPQUFBLFNBQUEsUUFBQSxTQUFBLGVBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLE1BQUEsR0FBQSxRQUFBLDRCQUFBLEVBQUEsUUFBQSxPQUFBLEtBQUEsVUFBQSxLQUVBLE9BQUEsUUFBQSxTQUFBLGVBQUEsU0FBQSxFQUFBLEVBQUEsR0FDQSxNQUFBLEdBQUEsUUFBQSxvQkFBQSxLQUVBLGtCQUFBLFFBQUEsU0FBQSxlQUFBLFNBQUEsRUFBQSxFQUFBLEdBQ0EsTUFBQSxHQUFBLFFBQUEscUJBQUEsTUFHQSxnQkFBQSxJQUVBLEtBQUEsZ0NBQ0EsWUFBQSwrQ0FDQSxXQUFBLGlCQUVBLFNBQ0EsaUJBQUEsU0FBQSxRQUFBLFNBQUEsRUFBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLFFBQUEsT0FBQSxVQUNBLEVBQUEscUJBQUEsQ0FDQSxPQUFBLEdBQUEsSUFBQSxHQUFBLE9BQUEsSUFBQSxLQUFBLFNBQUEsR0FDQSxNQUFBLEdBQUEsTUFDQSxXQUNBLEdBQUEsR0FBQSxFQUFBLFVBQUEsRUFBQSxFQUFBLFlBQUEsS0FDQSxRQUNBLFFBQUEsRUFDQSxhQUFBLFNBQUEsR0FBQSxzQkFDQSxPQUFBLE9BSUEsT0FBQSxRQUFBLFNBQUEsZUFBQSxTQUFBLEVBQUEsRUFBQSxHQUNBLE1BQUEsR0FBQSxRQUFBLG9CQUFBLFFBSUEsS0FBQSxpQkFDQSxZQUFBLHVDQUNBLFdBQUEsYUFFQSxTQUNBLE1BQUEsU0FBQSxTQUFBLEdBQ0EsT0FBQSxZQUFBLEVBQUEsUUFBQSxPQUFBLFdBS0EsV0FDQSxXQUFBLHlCQzFGQSxRQUFBLE9BQUEsaUJBQ0EsV0FBQSxZQUFBLFNBQUEsZUFBQSxZQUFBLGVBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsUUFBQSxFQUFBLElBQUEsV0FDQSxTQUFBLEVBQUEsVUFDQSxFQUFBLFlBRUEsRUFBQSxlQUFBLFNBQUEsR0FNQSxJQUxBLFFBQUEsUUFBQSxFQUFBLFFBQUEsU0FBQSxFQUFBLEdBQ0EsRUFBQSxPQUFBLEdBQ0EsRUFBQSxrQkFBQSxLQUdBLEVBQUEsUUFBQSxRQUFBLElBQ0EsRUFBQSxrQkFBQSxFQUFBLFFBQUEsT0FBQSxFQUVBLEdBQUEsUUFBQSxPQUFBLEVBQUEsR0FBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLFNBQ0EsRUFBQSxJQUFBLFVBQUEsRUFBQSxVQUVBLEVBQUEsa0JBQUEsU0FBQSxHQUNBLEVBQUEsd0JBQUEsRUFBQSxRQUFBLEdBQ0EsRUFBQSxJQUFBLFVBQUEsRUFBQSxhQ3BCQSxRQUFBLE9BQUEsNkJBQ0EsV0FBQSx3QkFBQSxTQUFBLFFBQUEsaUJBQUEsbUJBQUEsb0JBQUEsZUFBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsaUJBQUEsRUFDQSxFQUFBLGtCQUFBLEVBRUEsRUFBQSxNQUFBLFdBQ0EsRUFBQSxTQUVBLEVBQUEsa0JBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLG1CQUNBLFVBQUEsR0FBQSxLQUFBLElBQ0EsR0FBQSxFQUFBLElBRUEsSUFBQSxFQVVBLE9BUkEsR0FBQSxFQUFBLE1BREEsRUFBQSxRQUFBLE1BQUEsRUFDQSxJQUVBLE1BRUEsR0FBQSxFQUFBLEVBQUEsT0FBQSxHQUNBLFNBQUEsRUFBQSxtQkFBQSxLQUFBLEVBQUEsb0JBQ0EsR0FBQSxhQUFBLEVBQUEsbUJBRUEsR0FFQSxFQUFBLG1CQUFBLFNBQUEsR0FDQSxHQUFBLEVBRUEsR0FBQSxFQUFBLE1BREEsRUFBQSxRQUFBLE1BQUEsRUFDQSxJQUVBLEtBRUEsSUFBQSxHQUFBLEVBQUEsRUFBQSxPQUFBLEVBSUEsT0FIQSxHQUFBLFFBQUEsTUFBQSxJQUNBLEVBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxZQUFBLE9BRUEsR0FFQSxFQUFBLGlCQUFBLEVBQUEsaUJBRUEsRUFBQSxTQUFBLEVBQUEsU0FDQSxFQUFBLE1BQUEsUUFBQSxPQ3pDQSxRQUFBLE9BQUEsdUJBQ0EsV0FBQSxrQkFBQSxTQUFBLFFBQUEsU0FBQSxZQUFBLGVBQUEsa0JBQUEsUUFBQSxlQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsaUJBQUEsV0FDQSxFQUFBLGdCQUFBLE9BQ0EsRUFBQSxlQUFBLEVBQUEsZ0JBQUEsTUFBQSxnQkFHQSxFQUFBLGdCQUFBLFdBQ0EsRUFBQSxXQUFBLFNBQUEsR0FBQSxxQkFDQSxFQUFBLGdCQUFBLFdBQUEsS0FBQSxFQUFBLFlBRUEsRUFBQSxpQkFBQSxXQUNBLFNBQUEsRUFBQSxTQUFBLFVBQUEsS0FBQSxFQUFBLFNBQUEsVUFDQSxFQUFBLGdCQUFBLFdBQUEsTUFBQSxTQUFBLEVBQUEsU0FBQSxTQUFBLHFCQUdBLEVBQUEsb0JBQUEsV0FDQSxFQUFBLFVBQUEsZUFBQSxVQUVBLEVBQUEsaUJBQUEsV0FDQSxHQUFBLFNBQUEsRUFBQSxnQkFBQSxDQUNBLEdBQUEsR0FBQSxFQUFBLGdCQUFBLFdBQUEsTUFDQSxHQUFBLFVBQUEsRUFBQSxnQkFBQSxXQUFBLEVBQUEsT0FFQSxHQUFBLGNBR0EsRUFBQSxnQkFBQSxFQUNBLEVBQUEsbUJBQ0EsRUFBQSx3QkFBQSxRQUFBLEtBQUEsR0FDQSxFQUFBLG1CQUNBLEVBQUEsTUFBQSxFQUNBLEVBQUEsaUJBQUEsRUFBQSxpQkFDQSxFQUFBLGdCQUFBLEVBQUEsZ0JBQ0EsRUFBQSxTQUFBLEVBQUEsU0FDQSxFQUFBLGVBQUEsU0FBQSxFQUFBLEdBQ0EsTUFHQSxHQUFBLGVBSEEsRUFBQSxPQUdBLEVBRkEsSUFLQSxFQUFBLGNBQUEsU0FBQSxHQUNBLEVBQUEsVUFBQSxHQUVBLEVBQUEsa0JBQUEsRUFBQSxrQkFDQSxFQUFBLHdCQUFBLEVBQUEsd0JBQ0EsRUFBQSxzQkFBQSxXQUNBLEVBQUEsZ0JBQUEsUUFBQSxLQUFBLEVBQUEseUJBQ0EsRUFBQSxVQUFBLEVBQUEsZ0JBQUEsV0FBQSxJQUVBLEVBQUEseUJBQUEsV0FDQSxPQUFBLFFBQUEsT0FBQSxFQUFBLGdCQUFBLEVBQUEsMEJBRUEsRUFBQSx1QkFBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsT0FDQSxHQUFBLFFBQUEsT0FBQSxFQUFBLGdCQUFBLEVBQUEseUJBQ0EsRUFBQSxFQUFBLGdCQUFBLEtBQ0EsUUFBQSxHQUFBLElBQUEsR0FFQSxFQUFBLG1CQUFBLFNBQUEsR0FDQSxHQUFBLEdBQUEsRUFBQSxNQVFBLE9BUEEsU0FBQSxRQUFBLEVBQUEsZ0JBQUEsV0FBQSxTQUFBLEdBQ0EsU0FBQSxFQUFBLFVBQUEsS0FBQSxFQUFBLFNBQ0EsR0FBQSxHQUNBLFNBQUEsRUFBQSxnQkFBQSxJQUFBLEVBQUEsZUFBQSxVQUNBLEdBQUEsS0FHQSxHQUVBLEVBQUEsb0JBQUEsV0FDQSxFQUFBLElBQUEsb0JBQUEsRUFBQSxpQkFBQSxLQUFBLFdBQ0EsRUFBQSwyQ0FDQSxFQUFBLEtBQUEsb0JBQUEsRUFBQSxnQkFBQSxNQUFBLFdBQ0EsRUFBQSxnQkFBQSxPQUFBLEVBQ0EsRUFBQSx3QkFBQSxRQUFBLEtBQUEsRUFBQSxpQkFDQSxFQUFBLElBQUEsaUJBQUEsRUFBQSxnQkFBQSxPQUNBLEVBQUEsb0JBQ0EsU0FBQSxHQUNBLEVBQUEsZUFBQSxFQUFBLFNBR0EsRUFBQSx5QkFBQSxXQUNBLE9BQUEsRUFBQSxnQkFBQSxPQUlBLEVBQUEseUNBQUEsV0FDQSxHQUFBLEdBQUEsRUFBQSxnQkFBQSxNQUNBLEVBQUEsRUFBQSx3QkFBQSxLQUNBLEtBQUEsR0FDQSxFQUFBLE9BQUEscUJBQUEsR0FBQSxLQUFBLGFBQ0EsU0FBQSxHQUNBLEVBQUEsZUFBQSxFQUFBLFNBS0EsRUFBQSxzQkFBQSxXQUNBLEdBQUEsSUFBQSxPQUFBLDBCQUFBLFFBQUEsMERBQ0EsRUFBQSxFQUFBLHNCQUFBLEVBQ0EsR0FBQSxPQUFBLEtBQUEsV0FDQSxFQUFBLE9BQUEscUJBQUEsRUFBQSx3QkFBQSxPQUFBLEtBQUEsV0FDQSxFQUFBLEtBQUEsTUFDQSxTQUFBLEdBQ0EsRUFBQSxlQUFBLEVBQUEsU0FFQSxlQUlBLEVBQUEsbUJBQUEsV0FDQSxNQUFBLEdBQUEsZ0JBQUEsTUFDQSx3QkFFQSxxQkFJQSxFQUFBLHNCQ3hIQSxRQUFBLE9BQUEsbUJBQ0EsV0FBQSxjQUFBLFNBQUEsU0FBQSxRQUFBLFlBQUEsZUFBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FFQSxFQUFBLG1CQUFBLFdBQ0EsTUFBQSxHQUFBLE1BQ0EsWUFBQSwrQ0FDQSxXQUFBLHFCQUNBLFNBQ0EsS0FBQSxXQUNBLGNBTUEsRUFBQSxXQUFBLFdBQ0EsR0FBQSxHQUFBLEVBQUEsb0JBQ0EsVUFBQSxHQUNBLEVBQUEsT0FBQSxLQUFBLFNBQUEsR0FDQSxHQUFBLEtBQ0EsR0FBQSxLQUFBLFFBQUEsU0FBQSxHQUNBLEVBQUEsTUFBQSxLQUFBLEVBQUEsS0FBQSxrQkFFQSxFQUFBLFFBQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxNQUFBLEtBQUEsRUFBQSxTQUVBLEVBQUEsMkJBQUEsR0FBQSxPQUFBLEtBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLFFBQ0EsRUFBQSxFQUFBLE1BQ0EsR0FBQSxJQUFBLHFCQUFBLEtBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLElBQ0EsR0FBQSxTQUNBLFdBQUEsRUFDQSxRQUFBLEVBQ0EsaUJBQUEsR0FFQSxRQUFBLEdBQ0EsRUFBQSxJQUFBLEVBQUEsU0FDQSxFQUFBLFNBQUEsR0FFQSxFQUFBLFNBQUEsU0FPQSxFQUFBLElBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxrQkFDQSxHQUFBLHVCQUFBLEVBQ0EsRUFBQSxvQkFBQSxFQUNBLEVBQUEsV0FBQSxHQUNBLEVBQUEsS0FBQSxtQkFBQSxHQUFBLEtBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLElBQ0EsUUFBQSxFQUFBLFFBQ0EsRUFBQSxXQUFBLEVBQUEsRUFBQSxZQUNBLEVBQUEsdUJBQUEsRUFDQSxFQUFBLG9CQUFBLEdBQ0EsV0FBQSxFQUFBLFFBQ0EsRUFBQSxXQUFBLEVBQUEsRUFBQSxZQUNBLEVBQUEsdUJBQUEsRUFDQSxFQUFBLG9CQUFBLEdBR0EsRUFBQSxlQUFBLEdBRUEsRUFBQSx1QkFBQSxFQUNBLEVBQUEsb0JBQUEsR0FDQSxTQUFBLEdBQ0EsRUFBQSx1QkFBQSxFQUNBLEVBQUEsb0JBQUEsRUFDQSxFQUFBLGVBQUEsRUFBQSxTQUdBLEVBQUEsbUJBQUEsV0FDQSxNQUFBLEdBQUEsbUJBQ0EsRUFBQSxzQkFDQSxFQUFBLG1CQUNBLEVBQUEsYUFBQSxJQUdBLEVBQUEseUJBQUEsV0FDQSxNQUFBLEdBQUEsc0JBQ0EsNkJBRUEsMkJBR0EsRUFBQSxxQkFBQSxXQUNBLE1BQUEsR0FBQSxxQkFBQSxFQUFBLHdCQUVBLEVBQUEsS0FBQSxXQUNBLEVBQUEsdUJBQUEsRUFDQSxFQUFBLG9CQUFBLEVBQ0EsRUFBQSxvQkFBQSxFQUNBLEVBQUEsZ0JBQ0EsRUFBQSxXQUFBLEdBQ0EsRUFBQSxhQUNBLEVBQUEsU0FBQSxHQUVBLEVBQUEsT0FBQSxXQUNBLE1BQUEsR0FBQSxXQUFBLE1BQUEsRUFBQSxPQUFBLElBQUEsRUFBQSxPQUFBLG9CQUVBLEVBQUEsVUFFQSxXQUFBLHNCQUFBLFNBQUEsUUFBQSxTQUFBLGlCQUFBLGVBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxPQUFBLFFBQUEsWUFDQSxFQUFBLFdBQUEsRUFBQSxJQUNBLEVBQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxRQUFBLEVBQUEsSUFFQSxFQUFBLHFCQUFBLFdBQ0EsRUFBQSxRQUFBLFdBRUEsRUFBQSxpQkFBQSxXQUNBLEdBQUEsSUFBQSxRQUFBLFdBQ0EsU0FBQSxRQUFBLEVBQUEsTUFBQSxLQUFBLFNBQUEsR0FDQSxFQUFBLFVBQ0EsRUFBQSxLQUFBLE1BQUEsS0FBQSxFQUFBLFNBQUEsRUFBQSxTQUdBLFFBQUEsUUFBQSxFQUFBLE1BQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxVQUNBLEVBQUEsUUFBQSxNQUFBLEtBQUEsRUFBQSxTQUFBLEVBQUEsS0FBQSxhQUdBLEVBQUEsTUFBQSxJQUVBLEVBQUEsZUFBQSxXQUNBLE1BQUEsS0FBQSxFQUFBLFVBRUEsRUFBQSxZQUFBLFdBQ0EsR0FBQSxJQUFBLENBYUEsT0FaQSxTQUFBLFFBQUEsRUFBQSxNQUFBLEtBQUEsU0FBQSxHQUNBLEVBQUEsV0FDQSxHQUFBLEtBR0EsR0FDQSxRQUFBLFFBQUEsRUFBQSxNQUFBLFFBQUEsU0FBQSxHQUNBLEVBQUEsV0FDQSxHQUFBLEtBSUEsTUFHQSxXQUFBLG9CQUFBLFNBQUEsaUJBQUEsZUFBQSxPQUFBLGFBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsRUFBQSxRQUFBLEVBQUEsUUFDQSxFQUFBLGNBQ0EsRUFBQSxRQUFBLFFBQUEsU0FBQSxHQUNBLEVBQUEsT0FBQSxRQUFBLFNBQUEsR0FDQSxJQUNBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxTQUFBLElBQUEsRUFBQSxLQUNBLE1BQUEsR0FDQSxRQUFBLElBQUEsNkJBQUEsRUFBQSxTQUFBLElBQUEsRUFBQSxLQUNBLFFBQUEsSUFBQSxFQUFBLGNBS0EsRUFBQSxXQUFBLFNBQUEsR0FDQSxNQUFBLEdBQ0EsRUFBQSxPQUFBLEdBRUEsR0FrQkEsRUFBQSxVQUFBLFNBQUEsR0FDQSxNQUFBLFVBQUEsRUFBQSxRQUFBLEVBQUEsT0FBQSxPQUFBLEdBRUEsRUFBQSxHQUFBLFdBQ0EsRUFBQSxPQUFBLE9BQUEsTUFBQSxRQUFBLEVBQUEsV0FFQSxFQUFBLE9BQUEsV0FDQSxFQUFBLFFBQUEsV0FFQSxFQUFBLFdBQUEsV0FDQSxNQUFBLElBRUEsRUFBQSxPQUFBLFdBQ0EsRUFBQSxPQUFBLE9BQUEsTUFBQSxRQUFBLEVBQUEsV0FFQSxFQUFBLGVBQUEsU0FBQSxFQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsT0FBQSxHQUFBLGNBQUEsRUFBQSxNQUFBLEdBQ0EsRUFBQSxFQUFBLE9BQUEsR0FBQSxjQUFBLEVBQUEsTUFBQSxFQUNBLE9BQUEsR0FBQSxNQzFNQSxRQUFBLE9BQUEsb0JBQ0EsV0FBQSxxQkFBQSxTQUFBLFNBQUEsWUFBQSxlQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FFQSxFQUFBLFVBQUEsV0FDQSxFQUFBLE1BQ0EsWUFBQSxpQ0FDQSxXQUFBLGNBQ0EsU0FDQSxLQUFBLFdBQ0EsY0FLQSxFQUFBLG1CQUFBLFdBQ0EsRUFBQSxzQkFFQSxFQUFBLFNBQUEsV0FDQSxHQUFBLEdBQUEsRUFBQSxNQUNBLE9BQUEsS0FBQSxFQUFBLFFBQUEsdUJBQ0EsYUFDQSxJQUFBLEVBQUEsUUFBQSxzQkFDQSxZQUNBLElBQUEsRUFBQSxRQUFBLHFCQUNBLGFBQ0EsSUFBQSxFQUFBLFFBQUEsa0JBQ0EsVUFFQSxPQzVCQSxRQUFBLE9BQUEsa0JBQ0EsV0FBQSxhQUFBLFNBQUEsUUFBQSxTQUFBLFlBQUEsZUFBQSxLQUFBLGdCQUFBLFFBQUEsUUFBQSxtQkFBQSxlQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsZ0JBQ0EsRUFBQSxVQUFBLFdBQ0EsS0FBQSxFQUFBLE1BQUEsTUFDQSxFQUFBLE9BQUEsTUFDQSxFQUFBLGVBQUEsRUFBQSxNQUFBLEtBQUEsV0FFQSxFQUFBLE9BQUEsUUFHQSxFQUFBLGFBQUEsV0FDQSxHQUFBLElBQUEsQ0FDQSxVQUFBLEVBQUEsZUFDQSxFQUFBLGdCQUFBLEdBRUEsRUFBQSxnQkFBQSxFQUFBLGVBQ0EsRUFBQSxFQUFBLGdCQUVBLEVBQUEsUUFDQSxNQUFBLEVBQUEsZUFDQSxZQUFBLEVBQUEsZUFDQSxLQUFBLEVBQUEsZUFDQSxVQUFBLEVBQUEsZUFDQSxhQUFBLEVBQUEsZUFDQSxVQUFBLEVBQUEsZUFDQSxVQUFBLElBR0EsRUFBQSxNQUFBLEVBQ0EsRUFBQSxNQUFBLEVBQ0EsRUFBQSxpQkFBQSxFQUNBLEVBQUEsV0FBQSxRQUFBLE9BQUEsUUFDQSxFQUFBLGVBQUEsWUFDQSxFQUFBLG9CQUFBLEVBQ0EsRUFBQSx1QkFBQSxFQUNBLEVBQUEsb0JBQUEsRUFDQSxFQUFBLGVBQ0EsRUFBQSxjQUFBLFFBQUEsS0FBQSxFQUNBLElBQUEsR0FBQSxFQUFBLE1BQUEsS0FBQSxNQUFBLElBQ0EsR0FBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLEVBQUEsT0FBQSxHQUFBLEtBQUEsS0FDQSxLQUFBLEVBQUEsVUFDQSxFQUFBLFNBQUEsS0FFQSxFQUFBLFlBQ0EsRUFBQSxTQUFBLEVBQUEsU0FDQSxFQUFBLGVBQUEsRUFBQSxlQUNBLEVBQUEsYUFBQSxXQUNBLEdBQUEsR0FBQSxFQUFBLFVBQUEsT0FDQSxHQUFBLFFBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxjQUNBLE9BQUEsSUFBQSxHQUVBLEVBQUEsZ0JBQUEsRUFBQSxnQkFFQSxFQUFBLFVBQUEsV0FDQSxHQUFBLEVBQUEsZUFFQSxHQURBLEVBQUEsTUFBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLE1BQUEsS0FBQSxTQUNBLFNBQUEsRUFBQSxPQUFBLENBQ0EsR0FBQSxHQUFBLEVBQUEsUUFBQSxNQUFBLEtBQ0EsRUFBQSxFQUFBLE1BQUEsRUFBQSxFQUFBLE9BQUEsR0FBQSxLQUFBLElBQ0EsTUFBQSxJQUNBLEdBQUEsS0FFQSxFQUFBLEtBQUEsc0JBQUEsRUFBQSxPQUFBLEtBQUEsV0FDQSxFQUFBLEtBQUEsc0JBQUEsRUFBQSxFQUFBLE1BQUEsTUFDQSxFQUFBLGNBQUEsUUFBQSxLQUFBLEVBQUEsUUFDQSxTQUFBLEdBQ0EsRUFBQSxlQUFBLEVBQUEsWUFHQSxHQUFBLE1BQUEsT0FBQSxFQUFBLGNBQUEsT0FDQSxFQUFBLE1BQUEsYUFBQSxFQUFBLGNBQUEsTUFFQSxFQUFBLElBQUEsc0JBQUEsRUFBQSxPQUFBLEtBQUEsV0FDQSxFQUFBLGNBQUEsUUFBQSxLQUFBLEVBQUEsUUFDQSxTQUFBLEdBQ0EsRUFBQSxlQUFBLEVBQUEsU0FLQSxFQUFBLFlBQUEsV0FDQSxNQUFBLEdBQUEsVUFBQSxTQUFBLEVBQUEsdUJBR0EsRUFBQSxTQUFBLFdBQ0EsRUFBQSxnQkFDQSxFQUFBLFlBQ0EsRUFBQSxrQkFBQSxPQUFBLEtBQUEsU0FBQSxHQUNBLEdBQUEsR0FBQSxFQUFBLE9BQ0EsR0FBQSxlQUFBLFdBQ0EsRUFBQSxpQkFBQSxXQUNBLEVBQUEsb0JBQUEsRUFDQSxFQUFBLHVCQUFBLEVBQ0EsRUFBQSxRQUFBLFNBQUEsR0FDQSxFQUFBLE9BQUEsUUFBQSxTQUFBLEdBQ0EsRUFBQSxJQUFBLEVBQUEsU0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLFVBR0EsSUFBQSxJQUNBLGFBQUEsS0FBQSxFQUFBLE1BQUEsT0FDQSxRQUFBLEVBQ0EsaUJBQUEsRUFBQSxpQkFFQSxHQUFBLEtBQUEsbUJBQUEsR0FBQSxLQUFBLFNBQUEsR0FDQSxFQUFBLG1CQUFBLE9BQUEsRUFBQSxLQUFBLE9BQ0EsRUFBQSx1QkFBQSxFQUNBLEVBQUEsV0FBQSxFQUFBLEtBQUEsS0FDQSxTQUFBLEdBQ0EsRUFBQSxvQkFBQSxFQUNBLEVBQUEsdUJBQUEsRUFDQSxFQUFBLGVBQUEsRUFBQSxTQUVBLFNBQUEsR0FDQSxFQUFBLGVBQUEsRUFBQSxVQUlBLEVBQUEsV0FBQSxTQUFBLEdBQ0EsRUFBQSxJQUFBLDBCQUFBLEdBQUEsS0FBQSxTQUFBLEdBQ0EsRUFBQSxRQUFBLEVBQUEsS0FDQSxFQUFBLFFBQUEsR0FBQSxFQUNBLEVBQUEsZ0JBQUEsRUFBQSxVQUNBLFNBQUEsR0FFQSxFQUFBLGVBQUEsRUFBQSxTQUdBLEVBQUEsYUFBQSxTQUFBLEVBQUEsR0FDQSxNQUFBLHlCQUFBLEVBQUEsSUFBQSxHQUVBLEVBQUEsZ0JBQUEsV0FDQSxNQUFBLEdBQUEsMkJBQUEsSUFFQSxFQUFBLHFCQUFBLFdBQ0EsTUFBQSxHQUFBLHFCQUFBLEVBQUEsd0JBRUEsRUFBQSxtQkFBQSxXQUNBLE1BQUEsR0FBQSxtQkFDQSxFQUFBLHNCQUNBLEVBQUEsbUJBQ0EsRUFBQSxhQUFBLElBR0EsRUFBQSxnQkFBQSxTQUFBLEdBQ0EsRUFBQSxnQkFDQSxFQUFBLFFBQUEsU0FBQSxHQUNBLEVBQUEsTUFBQSxRQUFBLFNBQUEsR0FDQSxZQUFBLEVBQUEsUUFDQSxFQUFBLGFBQUEsTUFBQSxLQUFBLEVBQUEsWUFLQSxFQUFBLGdCQUFBLFdBQ0EsTUFBQSxVQUFBLEVBQUEsY0FBQSxFQUFBLGFBQUEsT0FBQSxHQUVBLEVBQUEseUJBQUEsV0FDQSxNQUFBLEdBQUEseUJBQ0EsRUFBQSxzQkFDQSxFQUFBLG1CQUNBLEVBQUEsYUFBQSxTQUdBLEVBQUEsd0JBQUEsRUFBQSx3QkFDQSxFQUFBLFdBQUEsU0FBQSxHQUNBLEVBQUEsVUFFQSxFQUFBLG1CQUFBLFNBQUEsR0FDQSxFQUFBLE1BQUEsTUFBQSxHQUFBLFFBQUEsU0FBQSxjQUFBLE1BRUEsRUFBQSxZQUFBLFdBQ0EsRUFBQSxNQUFBLFFBQUEsS0FBQSxFQUFBLGVBQ0EsRUFBQSxVQUFBLGdCQUVBLEVBQUEsZUFBQSxXQUNBLE9BQUEsUUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLGdCQUVBLEVBQUEsZUFBQSxXQUNBLE1BQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSx1QkFHQSxFQUFBLFlBQUEsV0FDQSxHQUFBLEdBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxLQUFBLFFBQ0EsR0FBQSxZQUFBLElBRUEsRUFBQSxhQUFBLEVBQUEsa0JBRUEsRUFBQSxpQkFBQSxTQUFBLEdBQ0EsR0FBQSxHQUFBLEVBQUEsSUFBQSxpQkFDQSxPQUFBLFVBQUEsR0FBQSxLQUFBLEVBQ0EsRUFBQSxtQkFBQSxHQUVBLEVBQUEsT0FBQSxXQUFBLEdBQUEsS0FBQSxxRUFBQSxJQUlBLEVBQUEsZUFBQSxFQUFBIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ3N0b3JpZXNNb2R1bGUnLCBbXHJcbiAgICAnbmdSb3V0ZScsXHJcbiAgICAnbmdDb29raWVzJyxcclxuICAgICd1aS5ib290c3RyYXAnLFxyXG4gICAgJ3VpLnNvcnRhYmxlJyxcclxuICAgICdjb25maWdNb2R1bGUnLFxyXG4gICAgJ2JvZHlNb2R1bGUnLFxyXG4gICAgJ3RvcE1lbnVNb2R1bGUnLFxyXG4gICAgJ3N0b3J5TW9kdWxlJyxcclxuICAgICdjb21wb3NpdGVDbGFzc2VzTW9kdWxlJyxcclxuICAgICdjb21wb3NpdGVzTW9kdWxlJyxcclxuICAgICdydW5uZXJNb2R1bGUnXHJcbl0pXHJcbiAgICAuc2VydmljZSgnVGNCZGRTZXJ2aWNlJywgZnVuY3Rpb24oJG1vZGFsLCAkaHR0cCwgJGxvY2F0aW9uLCAkcSkge1xyXG4gICAgICAgIHRoaXMub3BlbkNvbXBvc2l0ZUNsYXNzID0gZnVuY3Rpb24oY29tcG9zaXRlU3RlcFRleHQpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAkbW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hc3NldHMvaHRtbC9jb21wb3NpdGVDbGFzc2VzL2NvbXBvc2l0ZUNsYXNzZXMudG1wbC5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdjb21wb3NpdGVDbGFzc2VzQ3RybCcsXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9zaXRlQ2xhc3NlczogZnVuY3Rpb24oJHJvdXRlLCAkaHR0cCwgJG1vZGFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmdldEpzb24oJy9ncm9vdnlDb21wb3NpdGVzJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9zaXRlU3RlcFRleHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9zaXRlU3RlcFRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubmV3Q29sbGVjdGlvbkl0ZW0gPSBmdW5jdGlvbihldmVudCwgY29sbGVjdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2goe30pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnJlbW92ZUNvbGxlY3Rpb25FbGVtZW50ID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgaW5kZXgpIHtcclxuICAgICAgICAgICAgY29sbGVjdGlvbi5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5idXR0b25Dc3NDbGFzcyA9IGZ1bmN0aW9uKG5nTW9kZWxDb250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAnYnRuLXN1Y2Nlc3MnOiBuZ01vZGVsQ29udHJvbGxlci4kdmFsaWQsXHJcbiAgICAgICAgICAgICAgICAnYnRuLWRhbmdlcic6IG5nTW9kZWxDb250cm9sbGVyLiRpbnZhbGlkXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmdldFJ1bm5lclByb2dyZXNzQ3NzID0gZnVuY3Rpb24oaW5Qcm9ncmVzcykge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgJ3Byb2dyZXNzIHByb2dyZXNzLXN0cmlwZWQgYWN0aXZlJzogaW5Qcm9ncmVzcyxcclxuICAgICAgICAgICAgICAgICdwcm9ncmVzcyc6ICFpblByb2dyZXNzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmdldFN0b3J5UnVubmVyU3RhdHVzVGV4dCA9IGZ1bmN0aW9uKGluUHJvZ3Jlc3MsIHN1Y2Nlc3MsIHBlbmRpbmdTdGVwc0xlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAoaW5Qcm9ncmVzcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdTdG9yeSBydW4gaXMgaW4gcHJvZ3Jlc3MnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nU3RlcHNMZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdTdG9yeSBydW4gd2FzIHN1Y2Nlc3NmdWwgd2l0aCAnICsgcGVuZGluZ1N0ZXBzTGVuZ3RoICsgJyBwZW5kaW5nIHN0ZXBzJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdTdG9yeSBydW4gd2FzIHN1Y2Nlc3NmdWwnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdTdG9yeSBydW4gZmFpbGVkJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5nZXRSdW5uZXJTdGF0dXNDc3MgPSBmdW5jdGlvbihpblByb2dyZXNzLCBzdWNjZXNzLCBwZW5kaW5nU3RlcHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICdwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLWluZm8nOiBpblByb2dyZXNzLFxyXG4gICAgICAgICAgICAgICAgJ3Byb2dyZXNzLWJhciBwcm9ncmVzcy1iYXItd2FybmluZyc6ICFpblByb2dyZXNzICYmIHN1Y2Nlc3MgJiYgcGVuZGluZ1N0ZXBzLFxyXG4gICAgICAgICAgICAgICAgJ3Byb2dyZXNzLWJhciBwcm9ncmVzcy1iYXItc3VjY2Vzcyc6ICFpblByb2dyZXNzICYmIHN1Y2Nlc3MgJiYgIXBlbmRpbmdTdGVwcyxcclxuICAgICAgICAgICAgICAgICdwcm9ncmVzcy1iYXIgcHJvZ3Jlc3MtYmFyLWRhbmdlcic6ICFpblByb2dyZXNzICYmICFzdWNjZXNzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm9wZW5SdW5uZXJQYXJhbWV0ZXJzTW9kYWwgPSBmdW5jdGlvbihzaG93R2V0QXBpKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuICRtb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2Fzc2V0cy9odG1sL3J1bm5lci9ydW5uZXJQYXJhbXMudG1wbC5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdydW5uZXJQYXJhbXNDdHJsJyxcclxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBmdW5jdGlvbigkcm91dGUsICRodHRwLCAkbW9kYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0SnNvbignL3N0ZXBzL2NsYXNzZXMuanNvbicsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd0dldEFwaTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaG93R2V0QXBpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm9wZW5EaXIgPSBmdW5jdGlvbigkc2NvcGUsIHBhdGgpIHtcclxuICAgICAgICAgICAgaWYgKHBhdGggPT09ICcuLicpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkaXJzID0gJHNjb3BlLnJvb3RQYXRoLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucm9vdFBhdGggPSBkaXJzLnNsaWNlKDAsIGRpcnMubGVuZ3RoIC0gMikuam9pbignLycpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yb290UGF0aCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucm9vdFBhdGggKz0gJy8nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRTdG9yaWVzKCRzY29wZSwgJycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRTdG9yaWVzKCRzY29wZSwgcGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZ2V0U3RvcmllcyA9IGZ1bmN0aW9uICgkc2NvcGUsIHBhdGgpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLnJvb3RQYXRoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5yb290UGF0aCA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICRodHRwLmdldCgnL3N0b3JpZXMvbGlzdC5qc29uP3BhdGg9JyArICRzY29wZS5yb290UGF0aCArIHBhdGgpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5maWxlcyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICBpZiAocGF0aCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucm9vdFBhdGggKz0gcGF0aCArICcvJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYub3BlbkVycm9yTW9kYWwocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zdGVwVGV4dFBhdHRlcm4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICgvXihHaXZlbnxXaGVufFRoZW4pIC4rJC8pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5vcGVuQ29uZmlybWF0aW9uTW9kYWwgPSBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkbW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hc3NldHMvaHRtbC9jb25maXJtYXRpb25Nb2RhbC50bXBsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNsYXNzTmFtZVBhdHRlcm4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICgvXlthLXpBLVpfJF1bYS16QS1aXFxkXyRdKiQvKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY3NzQ2xhc3MgPSBmdW5jdGlvbihuZ01vZGVsQ29udHJvbGxlcikge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgJ2hhcy1lcnJvcic6IG5nTW9kZWxDb250cm9sbGVyLiRpbnZhbGlkLFxyXG4gICAgICAgICAgICAgICAgJ2hhcy1zdWNjZXNzJzogbmdNb2RlbENvbnRyb2xsZXIuJHZhbGlkICYmIG5nTW9kZWxDb250cm9sbGVyLiRkaXJ0eVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgdGhpcy5kZWxldGVTdG9yeSA9IGZ1bmN0aW9uKHBhdGgpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHtzdGF0dXM6ICdEZWxldGUgU3RvcnknLCBtZXNzYWdlOiAnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGlzIHN0b3J5Pyd9O1xyXG4gICAgICAgICAgICB2YXIgb2tNb2RhbCA9IHRoaXMub3BlbkNvbmZpcm1hdGlvbk1vZGFsKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBva01vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVsZXRlKCcvc3Rvcmllcy9zdG9yeS8nICsgcGF0aCkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3BhZ2Uvc3Rvcmllcy9uZXcvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgnT0snKTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vcGVuRXJyb3JNb2RhbChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoJ05PSycpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCdOT0snKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5nZXRKc29uID0gZnVuY3Rpb24odXJsLCBjYWNoZVR5cGUpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCwge2NhY2hlOiBjYWNoZVR5cGV9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYub3BlbkVycm9yTW9kYWwocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5vcGVuRXJyb3JNb2RhbCA9IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgJG1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXNzZXRzL2h0bWwvZXJyb3JNb2RhbC50bXBsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pXHJcbiAgICAuY29udHJvbGxlcignbW9kYWxDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkbW9kYWxJbnN0YW5jZSwgZGF0YSkge1xyXG4gICAgICAgICRzY29wZS5kYXRhID0gZGF0YTtcclxuICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKCdvaycpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pXHJcbiAgICAuY29udHJvbGxlcignc3Rvcmllc0N0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbW9kYWwsICRtb2RhbEluc3RhbmNlLCAkbG9jYXRpb24sICRxLCBUY0JkZFNlcnZpY2UpIHtcclxuICAgICAgICBUY0JkZFNlcnZpY2UuZ2V0U3Rvcmllcygkc2NvcGUsICcnKTtcclxuICAgICAgICAkc2NvcGUub3BlbkRpciA9IGZ1bmN0aW9uKHBhdGgpIHtcclxuICAgICAgICAgICAgVGNCZGRTZXJ2aWNlLm9wZW5EaXIoJHNjb3BlLCBwYXRoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLnZpZXdTdG9yeVVybCA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcvcGFnZS9zdG9yaWVzL3ZpZXcvJyArICRzY29wZS5yb290UGF0aCArIG5hbWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuYWxsb3dUb1ByZXZEaXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRzY29wZS5yb290UGF0aCAhPT0gJyc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAkc2NvcGUuZGVsZXRlU3RvcnkgPSBmdW5jdGlvbihuYW1lLCBpbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgcGF0aCA9ICRzY29wZS5yb290UGF0aCArIG5hbWUgKyAnLnN0b3J5JztcclxuICAgICAgICAgICAgVGNCZGRTZXJ2aWNlLmRlbGV0ZVN0b3J5KHBhdGgpLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZXMuc3Rvcmllcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICRzY29wZS5jcmVhdGVEaXJlY3RvcnkgPSBmdW5jdGlvbihwYXRoKSB7XHJcbiAgICAgICAgICAgIHZhciBqc29uID0gJ3tcInBhdGhcIjogXCInICsgJHNjb3BlLnJvb3RQYXRoICsgcGF0aCArICdcIn0nO1xyXG4gICAgICAgICAgICAkaHR0cC5wb3N0KCcvc3Rvcmllcy9kaXIuanNvbicsIGpzb24pLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZXMuZGlycy5wdXNoKHtuYW1lOiBwYXRofSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBUY0JkZFNlcnZpY2Uub3BlbkVycm9yTW9kYWwocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2NvbmZpZ01vZHVsZScsIFtdKVxyXG4gICAgLmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcclxuICAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XHJcbiAgICAgICAgJHJvdXRlUHJvdmlkZXJcclxuICAgICAgICAgICAgLy8gVE9ETyBSZW1vdmUgZHVwbGljYXRpb24gaW4gcmVzb2x2ZVxyXG4gICAgICAgICAgICAud2hlbignL3BhZ2Uvc3Rvcmllcy9uZXcvJywge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXNzZXRzL2h0bWwvc3Rvcnkvc3RvcnkudG1wbC5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzdG9yeUN0cmwnLFxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Rvcnk6IGZ1bmN0aW9uKCRodHRwLCAkbW9kYWwsIFRjQmRkU2VydmljZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVGNCZGRTZXJ2aWNlLmdldEpzb24oJy9zdG9yaWVzL3N0b3J5Lmpzb24nLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBzdGVwczogZnVuY3Rpb24oJGh0dHAsICRtb2RhbCwgVGNCZGRTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUY0JkZFNlcnZpY2UuZ2V0SnNvbignL3N0ZXBzL2xpc3QuanNvbicsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZ3Jvb3Z5Q29tcG9zaXRlczogZnVuY3Rpb24oJGh0dHAsICRtb2RhbCwgVGNCZGRTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUY0JkZFNlcnZpY2UuZ2V0SnNvbignL2dyb292eUNvbXBvc2l0ZXMnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC53aGVuKCcvcGFnZS9zdG9yaWVzL25ldy86cGF0aConLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hc3NldHMvaHRtbC9zdG9yeS9zdG9yeS50bXBsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3N0b3J5Q3RybCcsXHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBzdG9yeTogZnVuY3Rpb24oJHJvdXRlLCAkaHR0cCwgJG1vZGFsLCBUY0JkZFNlcnZpY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRjQmRkU2VydmljZS5nZXRKc29uKCcvc3Rvcmllcy9zdG9yeS5qc29uP3BhdGg9JyArICRyb3V0ZS5jdXJyZW50LnBhcmFtcy5wYXRoICsgJy5zdG9yeScsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBzOiBmdW5jdGlvbigkaHR0cCwgJG1vZGFsLCBUY0JkZFNlcnZpY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRjQmRkU2VydmljZS5nZXRKc29uKCcvc3RlcHMvbGlzdC5qc29uJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBncm9vdnlDb21wb3NpdGVzOiBmdW5jdGlvbigkaHR0cCwgJG1vZGFsLCBUY0JkZFNlcnZpY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRjQmRkU2VydmljZS5nZXRKc29uKCcvZ3Jvb3Z5Q29tcG9zaXRlcycsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLndoZW4oJy9wYWdlL3N0b3JpZXMvdmlldy86cGF0aConLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hc3NldHMvaHRtbC9zdG9yeS9zdG9yeS50bXBsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3N0b3J5Q3RybCcsXHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBzdG9yeTogZnVuY3Rpb24oJHJvdXRlLCAkaHR0cCwgJG1vZGFsLCBUY0JkZFNlcnZpY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRjQmRkU2VydmljZS5nZXRKc29uKCcvc3Rvcmllcy9zdG9yeS5qc29uP3BhdGg9JyArICRyb3V0ZS5jdXJyZW50LnBhcmFtcy5wYXRoICsgJy5zdG9yeScsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBzOiBmdW5jdGlvbigkaHR0cCwgJG1vZGFsLCBUY0JkZFNlcnZpY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRjQmRkU2VydmljZS5nZXRKc29uKCcvc3RlcHMvbGlzdC5qc29uJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBncm9vdnlDb21wb3NpdGVzOiBmdW5jdGlvbigkaHR0cCwgJG1vZGFsLCBUY0JkZFNlcnZpY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRjQmRkU2VydmljZS5nZXRKc29uKCcvZ3Jvb3Z5Q29tcG9zaXRlcycsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZWxvYWRPblNlYXJjaDogZmFsc2VcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAud2hlbignL3BhZ2UvY29tcG9zaXRlcy86Y2xhc3NOYW1lKicsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2Fzc2V0cy9odG1sL2NvbXBvc2l0ZXMvY29tcG9zaXRlcy50bXBsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2NvbXBvc2l0ZXNDdHJsJyxcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvc2l0ZXNDbGFzczogZnVuY3Rpb24oJHJvdXRlLCAkaHR0cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSAkcm91dGUuY3VycmVudC5wYXJhbXMuY2xhc3NOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy9ncm9vdnlDb21wb3NpdGVzLycgKyBmaWxlTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCh1cmwsIHtjYWNoZTogZmFsc2V9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gZmlsZU5hbWUuc3Vic3RyaW5nKDAsIGZpbGVOYW1lLmxhc3RJbmRleE9mKCcuJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogY2xhc3NOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvc2l0ZXM6W3tzdGVwVGV4dDogJycsIGNvbXBvc2l0ZVN0ZXBzOiBbe31dfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOZXc6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc3RlcHM6IGZ1bmN0aW9uKCRodHRwLCAkbW9kYWwsIFRjQmRkU2VydmljZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVGNCZGRTZXJ2aWNlLmdldEpzb24oJy9zdGVwcy9saXN0Lmpzb24nLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAud2hlbignL3BhZ2UvcnVubmVyLycsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2Fzc2V0cy9odG1sL3J1bm5lci9ydW5uZXIudG1wbC5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdydW5uZXJDdHJsJyxcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uKCRyb3V0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3JlcG9ydHNQYXRoOiAkcm91dGUuY3VycmVudC5wYXJhbXMucGF0aH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAgICAgLm90aGVyd2lzZSh7XHJcbiAgICAgICAgICAgICAgICByZWRpcmVjdFRvOiAnL3BhZ2Uvc3Rvcmllcy9uZXcnXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdib2R5TW9kdWxlJywgW10pXHJcbiAgICAuY29udHJvbGxlcignYm9keUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkY29va2llU3RvcmUsICRsb2NhdGlvbiwgVGNCZGRTZXJ2aWNlKSB7XHJcbiAgICAgICAgJHNjb3BlLmhpc3RvcnkgPSAkY29va2llU3RvcmUuZ2V0KCdoaXN0b3J5Jyk7XHJcbiAgICAgICAgaWYgKCRzY29wZS5oaXN0b3J5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmhpc3RvcnkgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLmFkZEhpc3RvcnlJdGVtID0gZnVuY3Rpb24odGV4dCkge1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmhpc3RvcnksIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS50ZXh0ID09PSB0ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZUhpc3RvcnlJdGVtKGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB3aGlsZSgkc2NvcGUuaGlzdG9yeS5sZW5ndGggPj0gMTApIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVIaXN0b3J5SXRlbSgkc2NvcGUuaGlzdG9yeS5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuaGlzdG9yeS5zcGxpY2UoMCwgMCwge3RleHQ6IHRleHQsIHVybDogJGxvY2F0aW9uLnBhdGgoKX0pO1xyXG4gICAgICAgICAgICAkY29va2llU3RvcmUucHV0KCdoaXN0b3J5JywgJHNjb3BlLmhpc3RvcnkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLnJlbW92ZUhpc3RvcnlJdGVtID0gZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgICAgICAgVGNCZGRTZXJ2aWNlLnJlbW92ZUNvbGxlY3Rpb25FbGVtZW50KCRzY29wZS5oaXN0b3J5LCBpbmRleCk7XHJcbiAgICAgICAgICAgICRjb29raWVTdG9yZS5wdXQoJ2hpc3RvcnknLCAkc2NvcGUuaGlzdG9yeSk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnY29tcG9zaXRlQ2xhc3Nlc01vZHVsZScsIFtdKVxyXG4gICAgLmNvbnRyb2xsZXIoJ2NvbXBvc2l0ZUNsYXNzZXNDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJG1vZGFsSW5zdGFuY2UsIGNvbXBvc2l0ZUNsYXNzZXMsIGNvbXBvc2l0ZVN0ZXBUZXh0LCBUY0JkZFNlcnZpY2UpIHtcclxuICAgICAgICAkc2NvcGUuY29tcG9zaXRlQ2xhc3NlcyA9IGNvbXBvc2l0ZUNsYXNzZXM7XHJcbiAgICAgICAgJHNjb3BlLmNvbXBvc2l0ZVN0ZXBUZXh0ID0gY29tcG9zaXRlU3RlcFRleHQ7XHJcbiAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgJHNjb3BlLmNsb3NlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuY29tcG9zaXRlQ2xhc3NVcmwgPSBmdW5jdGlvbihwYWNrYWdlTmFtZSwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciB1cmwgPSAnL3BhZ2UvY29tcG9zaXRlcy8nO1xyXG4gICAgICAgICAgICBpZiAocGFja2FnZU5hbWUgIT09IHVuZGVmaW5lZCAmJiBwYWNrYWdlTmFtZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHVybCArPSBwYWNrYWdlTmFtZSArICcuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lUGFydHM7XHJcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUuaW5kZXhPZignLycpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZVBhcnRzID0gY2xhc3NOYW1lLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVQYXJ0cyA9IGNsYXNzTmFtZS5zcGxpdCgnXFxcXCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHVybCArPSBjbGFzc05hbWVQYXJ0c1tjbGFzc05hbWVQYXJ0cy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5jb21wb3NpdGVTdGVwVGV4dCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5jb21wb3NpdGVTdGVwVGV4dCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHVybCArPSAnP3N0ZXBUZXh0PScgKyAkc2NvcGUuY29tcG9zaXRlU3RlcFRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHVybDtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5jb21wb3NpdGVDbGFzc1RleHQgPSBmdW5jdGlvbihjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZVBhcnRzO1xyXG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lLmluZGV4T2YoJy8nKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVQYXJ0cyA9IGNsYXNzTmFtZS5zcGxpdCgnLycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lUGFydHMgPSBjbGFzc05hbWUuc3BsaXQoJ1xcXFwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdGV4dCA9IGNsYXNzTmFtZVBhcnRzW2NsYXNzTmFtZVBhcnRzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAodGV4dC5pbmRleE9mKCcuJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQuc3Vic3RyKDAsIHRleHQubGFzdEluZGV4T2YoJy4nKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuY2xhc3NOYW1lUGF0dGVybiA9IFRjQmRkU2VydmljZS5jbGFzc05hbWVQYXR0ZXJuO1xyXG4gICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICRzY29wZS5jc3NDbGFzcyA9IFRjQmRkU2VydmljZS5jc3NDbGFzcztcclxuICAgICAgICAkc2NvcGUuZGF0YSA9IHtjbGFzczogJyd9O1xyXG4gICAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ2NvbXBvc2l0ZXNNb2R1bGUnLCBbXSlcclxuICAgIC5jb250cm9sbGVyKCdjb21wb3NpdGVzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRtb2RhbCwgJGxvY2F0aW9uLCAkY29va2llU3RvcmUsIGNvbXBvc2l0ZXNDbGFzcywgc3RlcHMsIFRjQmRkU2VydmljZSkge1xyXG4gICAgICAgICRzY29wZS5hZGRDb21wb3NpdGVzVGFiID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcy5pc05ldykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZEhpc3RvcnlJdGVtKCRzY29wZS5jb21wb3NpdGVzQ2xhc3MuY2xhc3MgKyAnIGNvbXBvc2l0ZXMnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmFkZE5ld0NvbXBvc2l0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuY29tcG9zaXRlID0ge3N0ZXBUZXh0OiAnJywgY29tcG9zaXRlU3RlcHM6IFt7fV19O1xyXG4gICAgICAgICAgICAkc2NvcGUuY29tcG9zaXRlc0NsYXNzLmNvbXBvc2l0ZXMucHVzaCgkc2NvcGUuY29tcG9zaXRlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5hZGRTdGVwVGV4dFBhcmFtID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICgkbG9jYXRpb24uc2VhcmNoKCkuc3RlcFRleHQgIT09IHVuZGVmaW5lZCAmJiAkbG9jYXRpb24uc2VhcmNoKCkuc3RlcFRleHQgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY29tcG9zaXRlc0NsYXNzLmNvbXBvc2l0ZXMucHVzaCh7c3RlcFRleHQ6ICRsb2NhdGlvbi5zZWFyY2goKS5zdGVwVGV4dCwgY29tcG9zaXRlU3RlcHM6IFtdfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5hZGROZXdDb21wb3NpdGVTdGVwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5jb21wb3NpdGUuY29tcG9zaXRlU3RlcHMucHVzaCh7fSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuc2V0TGFzdENvbXBvc2l0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcy5jb21wb3NpdGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb21wb3NpdGUgPSAkc2NvcGUuY29tcG9zaXRlc0NsYXNzLmNvbXBvc2l0ZXNbbGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY29tcG9zaXRlID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5jb21wb3NpdGVzQ2xhc3MgPSBjb21wb3NpdGVzQ2xhc3M7XHJcbiAgICAgICAgJHNjb3BlLmFkZFN0ZXBUZXh0UGFyYW0oKTtcclxuICAgICAgICAkc2NvcGUub3JpZ2luYWxDb21wb3NpdGVzQ2xhc3MgPSBhbmd1bGFyLmNvcHkoY29tcG9zaXRlc0NsYXNzKTtcclxuICAgICAgICAkc2NvcGUuc2V0TGFzdENvbXBvc2l0ZSgpO1xyXG4gICAgICAgICRzY29wZS5zdGVwcyA9IHN0ZXBzO1xyXG4gICAgICAgICRzY29wZS5jbGFzc05hbWVQYXR0ZXJuID0gVGNCZGRTZXJ2aWNlLmNsYXNzTmFtZVBhdHRlcm47XHJcbiAgICAgICAgJHNjb3BlLnN0ZXBUZXh0UGF0dGVybiA9IFRjQmRkU2VydmljZS5zdGVwVGV4dFBhdHRlcm47XHJcbiAgICAgICAgJHNjb3BlLmNzc0NsYXNzID0gVGNCZGRTZXJ2aWNlLmNzc0NsYXNzO1xyXG4gICAgICAgICRzY29wZS5idXR0b25Dc3NDbGFzcyA9IGZ1bmN0aW9uKGNvbXBvc2l0ZUNsYXNzRm9ybSwgY29tcG9zaXRlRm9ybSkge1xyXG4gICAgICAgICAgICBpZiAoIWNvbXBvc2l0ZUNsYXNzRm9ybS4kdmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBUY0JkZFNlcnZpY2UuYnV0dG9uQ3NzQ2xhc3MoY29tcG9zaXRlQ2xhc3NGb3JtKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBUY0JkZFNlcnZpY2UuYnV0dG9uQ3NzQ2xhc3MoY29tcG9zaXRlRm9ybSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5vcGVuQ29tcG9zaXRlID0gZnVuY3Rpb24oY29tcG9zaXRlKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5jb21wb3NpdGUgPSBjb21wb3NpdGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUubmV3Q29sbGVjdGlvbkl0ZW0gPSBUY0JkZFNlcnZpY2UubmV3Q29sbGVjdGlvbkl0ZW07XHJcbiAgICAgICAgJHNjb3BlLnJlbW92ZUNvbGxlY3Rpb25FbGVtZW50ID0gVGNCZGRTZXJ2aWNlLnJlbW92ZUNvbGxlY3Rpb25FbGVtZW50O1xyXG4gICAgICAgICRzY29wZS5yZXZlcnRDb21wb3NpdGVzQ2xhc3MgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcyA9IGFuZ3VsYXIuY29weSgkc2NvcGUub3JpZ2luYWxDb21wb3NpdGVzQ2xhc3MpO1xyXG4gICAgICAgICAgICAkc2NvcGUuY29tcG9zaXRlID0gJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcy5jb21wb3NpdGVzWzBdO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmNhblJldmVydENvbXBvc2l0ZXNDbGFzcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gIWFuZ3VsYXIuZXF1YWxzKCRzY29wZS5jb21wb3NpdGVzQ2xhc3MsICRzY29wZS5vcmlnaW5hbENvbXBvc2l0ZXNDbGFzcyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuY2FuU2F2ZUNvbXBvc2l0ZXNDbGFzcyA9IGZ1bmN0aW9uKG5nTW9kZWxDb250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gbmdNb2RlbENvbnRyb2xsZXIuJHZhbGlkO1xyXG4gICAgICAgICAgICB2YXIgaXNVcGRhdGVkID0gIWFuZ3VsYXIuZXF1YWxzKCRzY29wZS5jb21wb3NpdGVzQ2xhc3MsICRzY29wZS5vcmlnaW5hbENvbXBvc2l0ZXNDbGFzcyk7XHJcbiAgICAgICAgICAgIHZhciBpc05ldyA9ICRzY29wZS5jb21wb3NpdGVzQ2xhc3MuaXNOZXc7XHJcbiAgICAgICAgICAgIHJldHVybiAoaXNOZXcgfHwgaXNVcGRhdGVkKSAmJiBpc1ZhbGlkO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmNvbXBvc2l0ZXNBcmVWYWxpZCA9IGZ1bmN0aW9uKG5nTW9kZWxDb250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gbmdNb2RlbENvbnRyb2xsZXIuJHZhbGlkO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcy5jb21wb3NpdGVzLCBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zdGVwVGV4dCA9PT0gdW5kZWZpbmVkIHx8IGVsZW1lbnQuc3RlcFRleHQgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmNvbXBvc2l0ZVN0ZXBzID09PSB1bmRlZmluZWQgfHwgZWxlbWVudC5jb21wb3NpdGVTdGVwcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5zYXZlQ29tcG9zaXRlc0NsYXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRodHRwLnB1dCgnL2dyb292eUNvbXBvc2l0ZXMnLCAkc2NvcGUuY29tcG9zaXRlc0NsYXNzKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZUNvbXBvc2l0ZXNDbGFzc1dpdGhvdXRDb25maXJtYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvcGFnZS9jb21wb3NpdGVzLycgKyAkc2NvcGUuY29tcG9zaXRlc0NsYXNzLmNsYXNzICsgJy5ncm9vdnknKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb21wb3NpdGVzQ2xhc3MuaXNOZXcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5vcmlnaW5hbENvbXBvc2l0ZXNDbGFzcyA9IGFuZ3VsYXIuY29weSgkc2NvcGUuY29tcG9zaXRlc0NsYXNzKTtcclxuICAgICAgICAgICAgICAgICRjb29raWVTdG9yZS5wdXQoJ2NvbXBvc2l0ZUNsYXNzJywgJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcy5jbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkQ29tcG9zaXRlc1RhYigpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgVGNCZGRTZXJ2aWNlLm9wZW5FcnJvck1vZGFsKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5jYW5EZWxldGVDb21wb3NpdGVzQ2xhc3MgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICghJHNjb3BlLmNvbXBvc2l0ZXNDbGFzcy5pc05ldyk7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgJHNjb3BlLmRlbGV0ZUNvbXBvc2l0ZXNDbGFzc1dpdGhvdXRDb25maXJtYXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9ICRzY29wZS5jb21wb3NpdGVzQ2xhc3MuY2xhc3M7XHJcbiAgICAgICAgICAgIHZhciBvcmlnaW5hbENsYXNzTmFtZSA9ICRzY29wZS5vcmlnaW5hbENvbXBvc2l0ZXNDbGFzcy5jbGFzcztcclxuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSAhPT0gb3JpZ2luYWxDbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlbGV0ZSgnL2dyb292eUNvbXBvc2l0ZXMvJyArIG9yaWdpbmFsQ2xhc3NOYW1lKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFRjQmRkU2VydmljZS5vcGVuRXJyb3JNb2RhbChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAkc2NvcGUuZGVsZXRlQ29tcG9zaXRlc0NsYXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0ge3N0YXR1czogJ0RlbGV0ZSBDb21wb3NpdGVzIENsYXNzJywgbWVzc2FnZTogJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBjb21wb3NpdGVzIGNsYXNzPyd9O1xyXG4gICAgICAgICAgICB2YXIgb2tNb2RhbCA9IFRjQmRkU2VydmljZS5vcGVuQ29uZmlybWF0aW9uTW9kYWwobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIG9rTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWxldGUoJy9ncm9vdnlDb21wb3NpdGVzLycgKyAkc2NvcGUub3JpZ2luYWxDb21wb3NpdGVzQ2xhc3MuY2xhc3MpLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGNCZGRTZXJ2aWNlLm9wZW5FcnJvck1vZGFsKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5zYXZlQ29tcG9zaXRlc1RleHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5jb21wb3NpdGVzQ2xhc3MuaXNOZXcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnQ3JlYXRlIE5ldyBDb21wb3NpdGVzJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnVXBkYXRlIENvbXBvc2l0ZXMnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBJbml0aWFsaXphdGlvblxyXG4gICAgICAgICRzY29wZS5hZGRDb21wb3NpdGVzVGFiKCk7XHJcbiAgICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgncnVubmVyTW9kdWxlJywgW10pXHJcbiAgICAuY29udHJvbGxlcigncnVubmVyQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJG1vZGFsLCAkaHR0cCwgJGxvY2F0aW9uLCBUY0JkZFNlcnZpY2UpIHtcclxuICAgICAgICAvLyBUT0RPIFRlc3QgbW9yZSB0aGFuIGNoZWNraW5nIHdoZXRoZXIgJG1vZGFsLm9wZW4gd2FzIGNhbGxlZFxyXG4gICAgICAgICRzY29wZS5vcGVuUnVubmVyU2VsZWN0b3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRtb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2Fzc2V0cy9odG1sL3J1bm5lci9ydW5uZXJTZWxlY3Rvci50bXBsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3J1bm5lclNlbGVjdG9yQ3RybCcsXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgJHNjb3BlLm9wZW5SdW5uZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHJ1bm5lclNlbGVjdG9yID0gJHNjb3BlLm9wZW5SdW5uZXJTZWxlY3RvcigpO1xyXG4gICAgICAgICAgICBpZiAocnVubmVyU2VsZWN0b3IgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcnVubmVyU2VsZWN0b3IucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcnlQYXRocyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGlycy5mb3JFYWNoKGZ1bmN0aW9uIChkaXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcnlQYXRocy5wdXNoKHtwYXRoOiBkaXIucGF0aCArIFwiLyoqLyouc3RvcnlcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3Rvcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChzdG9yeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yeVBhdGhzLnB1c2goe3BhdGg6IHN0b3J5LnBhdGh9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBUY0JkZFNlcnZpY2Uub3BlblJ1bm5lclBhcmFtZXRlcnNNb2RhbCh0cnVlKS5yZXN1bHQudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xhc3NlcyA9IGRhdGEuY2xhc3NlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IGRhdGEuYWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9ncm9vdnlDb21wb3NpdGVzJykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm9vdnlDb21wb3NpdGVzID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcGlKc29uID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3J5UGF0aHM6IHN0b3J5UGF0aHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlczogY2xhc3NlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm9vdnlDb21wb3NpdGVzOiBncm9vdnlDb21wb3NpdGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gJ3J1bicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucnVuKCRzY29wZS5hcGlKc29uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FwaSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FwaSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5ydW4gPSBmdW5jdGlvbihqc29uKSB7XHJcbiAgICAgICAgICAgIHZhciByZXBvcnRzUHJlZml4ID0gJy9hc3NldHMvamJlaGF2ZS8nO1xyXG4gICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dSdW5uZXJQcm9ncmVzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICRzY29wZS5yZXBvcnRzVXJsID0gJyc7XHJcbiAgICAgICAgICAgICRodHRwLnBvc3QoJy9ydW5uZXIvcnVuLmpzb24nLCBqc29uKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSAnT0snKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydHNVcmwgPSByZXBvcnRzUHJlZml4ICsgZGF0YS5yZXBvcnRzUGF0aDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVyU3VjY2VzcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuc3RhdHVzID09PSAnRkFJTEVEJykge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXBvcnRzVXJsID0gcmVwb3J0c1ByZWZpeCArIGRhdGEucmVwb3J0c1BhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVySW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lclN1Y2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIFRjQmRkU2VydmljZS5vcGVuRXJyb3JNb2RhbChkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lckluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lclN1Y2Nlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lckluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lclN1Y2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIFRjQmRkU2VydmljZS5vcGVuRXJyb3JNb2RhbChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuZ2V0UnVubmVyU3RhdHVzQ3NzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gVGNCZGRTZXJ2aWNlLmdldFJ1bm5lclN0YXR1c0NzcyhcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lckluUHJvZ3Jlc3MsXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJTdWNjZXNzLFxyXG4gICAgICAgICAgICAgICAgKCRzY29wZS5wZW5kaW5nU3RlcHMgPiAwKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmdldFN0b3J5UnVubmVyU3RhdHVzVGV4dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5zdG9yeVJ1bm5lckluUHJvZ3Jlc3MpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnU3RvcmllcyBydW4gaXMgaW4gcHJvZ3Jlc3MnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdTdG9yaWVzIHJ1biBpcyBmaW5pc2hlZCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5nZXRSdW5uZXJQcm9ncmVzc0NzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFRjQmRkU2VydmljZS5nZXRSdW5uZXJQcm9ncmVzc0Nzcygkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lckluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVyU3VjY2VzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd1J1bm5lclByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5wZW5kaW5nU3RlcHMgPSBbXTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcG9ydHNVcmwgPSAnJztcclxuICAgICAgICAgICAgJHNjb3BlLm9wZW5SdW5uZXIoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dBcGkgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5hcGlVcmwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRsb2NhdGlvbi5wcm90b2NvbCgpICsgJzovLycgKyAkbG9jYXRpb24uaG9zdCgpICsgJzonICsgJGxvY2F0aW9uLnBvcnQoKSArICcvcnVubmVyL3J1bi5qc29uJztcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5pbml0KCk7XHJcbiAgICB9KVxyXG4gICAgLmNvbnRyb2xsZXIoJ3J1bm5lclNlbGVjdG9yQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRtb2RhbCwgJG1vZGFsSW5zdGFuY2UsIFRjQmRkU2VydmljZSkge1xyXG4gICAgICAgICRzY29wZS5maWxlcyA9IHtkaXJzOiBbXSwgc3RvcmllczogW119O1xyXG4gICAgICAgIFRjQmRkU2VydmljZS5nZXRTdG9yaWVzKCRzY29wZSwgJycpO1xyXG4gICAgICAgICRzY29wZS5vcGVuRGlyID0gZnVuY3Rpb24ocGF0aCkge1xyXG4gICAgICAgICAgICBUY0JkZFNlcnZpY2Uub3BlbkRpcigkc2NvcGUsIHBhdGgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmNhbmNlbFJ1bm5lclNlbGVjdG9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5va1J1bm5lclNlbGVjdG9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZEZpbGVzID0ge2RpcnM6IFtdLCBzdG9yaWVzOiBbXX07XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuZmlsZXMuZGlycywgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRmlsZXMuZGlycy5wdXNoKHtwYXRoOiAkc2NvcGUucm9vdFBhdGggKyB2YWx1ZS5uYW1lfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmZpbGVzLnN0b3JpZXMsIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEZpbGVzLnN0b3JpZXMucHVzaCh7cGF0aDogJHNjb3BlLnJvb3RQYXRoICsgdmFsdWUubmFtZSArIFwiLnN0b3J5XCJ9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKHNlbGVjdGVkRmlsZXMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmFsbG93VG9QcmV2RGlyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkc2NvcGUucm9vdFBhdGggIT09ICcnO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmNhbkNvbnRpbnVlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBoYXNTZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmZpbGVzLmRpcnMsIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoIWhhc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmZpbGVzLnN0b3JpZXMsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGhhc1NlbGVjdGVkO1xyXG4gICAgICAgIH07XHJcbiAgICB9KVxyXG4gICAgLmNvbnRyb2xsZXIoJ3J1bm5lclBhcmFtc0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbW9kYWxJbnN0YW5jZSwgJGNvb2tpZVN0b3JlLCBkYXRhLCBzaG93R2V0QXBpKSB7XHJcbiAgICAgICAgJHNjb3BlLmNsYXNzZXMgPSBkYXRhLmNsYXNzZXM7XHJcbiAgICAgICAgJHNjb3BlLnBhcmFtQXJyYXkgPSBbXTtcclxuICAgICAgICAkc2NvcGUuY2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uKGNsYXNzRW50cnkpIHtcclxuICAgICAgICAgICAgY2xhc3NFbnRyeS5wYXJhbXMuZm9yRWFjaChmdW5jdGlvbihwYXJhbUVudHJ5KSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtRW50cnkudmFsdWUgPSAkY29va2llU3RvcmUuZ2V0KGNsYXNzRW50cnkuZnVsbE5hbWUgKyBcIi5cIiArIHBhcmFtRW50cnkua2V5KTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NvdWxkIG5vdCByZXRyaWV2ZSBjb29raWUgJyArIGNsYXNzRW50cnkuZnVsbE5hbWUgKyBcIi5cIiArIHBhcmFtRW50cnkua2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHRcdCRzY29wZS5oYXNPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG5cdFx0XHRpZiAob3B0aW9ucykge1xyXG5cdFx0XHQgIHJldHVybiBvcHRpb25zLmxlbmd0aCA+IDA7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdCAgcmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuLy8gICAgICAgICRzY29wZS5wYXJhbUZvdW5kID0gZnVuY3Rpb24gKHBhcmFtTmFtZSkge1xyXG4vLyAgICAgICAgICAgIHJldHVybiAoJHNjb3BlLnBhcmFtQXJyYXkuaW5kZXhPZihwYXJhbU5hbWUpPj0wKTtcclxuLy8gICAgICAgIH07XHJcbi8vXHJcbi8vICAgICAgICAkc2NvcGUuc2VsZWN0ZWRPcHRpb24gPSBmdW5jdGlvbiAob3B0aW9uLCBwYXJhbSkge1xyXG4vLyAgICAgICAgICAgIGlmICgkc2NvcGUucGFyYW1Gb3VuZChwYXJhbS5rZXkpKSB7XHJcbi8vICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuLy8gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtLnZhbHVlID09IG9wdGlvbi52YWx1ZSkge1xyXG4vLyAgICAgICAgICAgICAgICAkc2NvcGUucGFyYW1BcnJheS5wdXNoKHBhcmFtLmtleSk7XHJcbi8vICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICByZXR1cm4gKG9wdGlvbi5pc1NlbGVjdGVkKTtcclxuLy8gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5oYXNQYXJhbXMgPSBmdW5jdGlvbihjbGFzc0VudHJ5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjbGFzc0VudHJ5LnBhcmFtcyAhPT0gdW5kZWZpbmVkICYmIGNsYXNzRW50cnkucGFyYW1zLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuY2xvc2Uoe2FjdGlvbjogJ3J1bicsIGNsYXNzZXM6ICRzY29wZS5jbGFzc2VzfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLnNob3dHZXRBcGkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNob3dHZXRBcGk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuZ2V0QXBpID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKHthY3Rpb246ICdhcGknLCBjbGFzc2VzOiAkc2NvcGUuY2xhc3Nlc30pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLnBhcmFtRWxlbWVudElkID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBwYXJhbUtleSkge1xyXG4gICAgICAgICAgICB2YXIgZm9ybWF0dGVkQ2xhc3NOYW1lID0gY2xhc3NOYW1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgY2xhc3NOYW1lLnNsaWNlKDEpO1xyXG4gICAgICAgICAgICB2YXIgZm9ybWF0dGVkUGFyYW1LZXkgPSBwYXJhbUtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHBhcmFtS2V5LnNsaWNlKDEpO1xyXG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVkQ2xhc3NOYW1lICsgZm9ybWF0dGVkUGFyYW1LZXk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgndG9wTWVudU1vZHVsZScsIFtdKVxyXG4gICAgLmNvbnRyb2xsZXIoJ3RvcE1lbnVDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkbW9kYWwsICRsb2NhdGlvbiwgVGNCZGRTZXJ2aWNlKSB7XHJcbiAgICAgICAgLy8gVE9ETyBUZXN0IG1vcmUgdGhhbiBjaGVja2luZyB3aGV0aGVyICRtb2RhbC5vcGVuIHdhcyBjYWxsZWRcclxuICAgICAgICAkc2NvcGUub3BlblN0b3J5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRtb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2Fzc2V0cy9odG1sL3N0b3JpZXMudG1wbC5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzdG9yaWVzQ3RybCcsXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLm9wZW5Db21wb3NpdGVDbGFzcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBUY0JkZFNlcnZpY2Uub3BlbkNvbXBvc2l0ZUNsYXNzKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuZ2V0VGl0bGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHBhdGggPSAkbG9jYXRpb24ucGF0aCgpO1xyXG4gICAgICAgICAgICBpZiAocGF0aC5pbmRleE9mKCcvcGFnZS9zdG9yaWVzL3ZpZXcvJykgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnVmlldyBTdG9yeSc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGF0aC5pbmRleE9mKCcvcGFnZS9zdG9yaWVzL25ldy8nKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdOZXcgU3RvcnknO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhdGguaW5kZXhPZignL3BhZ2UvY29tcG9zaXRlcy8nKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdDb21wb3NpdGVzJztcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXRoLmluZGV4T2YoJy9wYWdlL3JlcG9ydHMvJykgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnUmVwb3J0cyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdzdG9yeU1vZHVsZScsIFtdKVxyXG4gICAgLmNvbnRyb2xsZXIoJ3N0b3J5Q3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRtb2RhbCwgJGxvY2F0aW9uLCAkY29va2llU3RvcmUsICRxLCAkYW5jaG9yU2Nyb2xsLCBzdG9yeSwgc3RlcHMsIGdyb292eUNvbXBvc2l0ZXMsIFRjQmRkU2VydmljZSkge1xyXG4gICAgICAgICRzY29wZS5wZW5kaW5nU3RlcHMgPSBbXTtcclxuICAgICAgICAkc2NvcGUuc2V0QWN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuc3RvcnkubmFtZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hY3Rpb24gPSAnUFVUJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRIaXN0b3J5SXRlbSgkc2NvcGUuc3RvcnkubmFtZSArICcgc3RvcnknKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hY3Rpb24gPSAnUE9TVCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5leHBhbmRQYW5lbHMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNjZW5hcmlvc0V4cGFuZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5wYW5lbHNFeHBhbmRlZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucGFuZWxzRXhwYW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5wYW5lbHNFeHBhbmRlZCA9ICEkc2NvcGUucGFuZWxzRXhwYW5kZWQ7XHJcbiAgICAgICAgICAgICAgICBzY2VuYXJpb3NFeHBhbmRlZCA9ICRzY29wZS5wYW5lbHNFeHBhbmRlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUucGFuZWxzID0ge1xyXG4gICAgICAgICAgICAgICAgc3Rvcnk6ICRzY29wZS5wYW5lbHNFeHBhbmRlZCxcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUucGFuZWxzRXhwYW5kZWQsXHJcbiAgICAgICAgICAgICAgICBtZXRhOiAkc2NvcGUucGFuZWxzRXhwYW5kZWQsXHJcbiAgICAgICAgICAgICAgICBuYXJyYXRpdmU6ICRzY29wZS5wYW5lbHNFeHBhbmRlZCxcclxuICAgICAgICAgICAgICAgIGdpdmVuU3RvcmllczogJHNjb3BlLnBhbmVsc0V4cGFuZGVkLFxyXG4gICAgICAgICAgICAgICAgbGlmZWN5Y2xlOiAkc2NvcGUucGFuZWxzRXhwYW5kZWQsXHJcbiAgICAgICAgICAgICAgICBzY2VuYXJpb3M6IHNjZW5hcmlvc0V4cGFuZGVkXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuc3RvcnkgPSBzdG9yeTtcclxuICAgICAgICAkc2NvcGUuc3RlcHMgPSBzdGVwcztcclxuICAgICAgICAkc2NvcGUuZ3Jvb3Z5Q29tcG9zaXRlcyA9IGdyb292eUNvbXBvc2l0ZXM7XHJcbiAgICAgICAgJHNjb3BlLnN0ZXBUeXBlcyA9IFsnR0lWRU4nLCAnV0hFTicsICdUSEVOJ107XHJcbiAgICAgICAgJHNjb3BlLnN0b3J5Rm9ybUNsYXNzID0gJ2NvbC1tZC0xMic7XHJcbiAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVyVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICRzY29wZS5zdG9yeVJ1bm5lckluUHJvZ3Jlc3MgPSBmYWxzZTtcclxuICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJTdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAkc2NvcGUuZXhwYW5kUGFuZWxzKCk7XHJcbiAgICAgICAgJHNjb3BlLm9yaWdpbmFsU3RvcnkgPSBhbmd1bGFyLmNvcHkoc3RvcnkpO1xyXG4gICAgICAgIHZhciBwYXRoQXJyYXkgPSAkc2NvcGUuc3RvcnkucGF0aC5zcGxpdCgnLycpO1xyXG4gICAgICAgICRzY29wZS5kaXJQYXRoID0gcGF0aEFycmF5LnNsaWNlKDAsIHBhdGhBcnJheS5sZW5ndGggLSAxKS5qb2luKCcvJyk7XHJcbiAgICAgICAgaWYgKCRzY29wZS5kaXJQYXRoICE9PSAnJykge1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlyUGF0aCArPSAnLyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS5zZXRBY3Rpb24oKTtcclxuICAgICAgICAkc2NvcGUuY3NzQ2xhc3MgPSBUY0JkZFNlcnZpY2UuY3NzQ2xhc3M7XHJcbiAgICAgICAgJHNjb3BlLmJ1dHRvbkNzc0NsYXNzID0gVGNCZGRTZXJ2aWNlLmJ1dHRvbkNzc0NsYXNzO1xyXG4gICAgICAgICRzY29wZS5jYW5TYXZlU3RvcnkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSAkc2NvcGUuc3RvcnlGb3JtLiR2YWxpZDtcclxuICAgICAgICAgICAgdmFyIGhhc0NoYW5nZWQgPSAhYW5ndWxhci5lcXVhbHMoJHNjb3BlLnN0b3J5LCAkc2NvcGUub3JpZ2luYWxTdG9yeSk7XHJcbiAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkICYmIGhhc0NoYW5nZWQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuc3RlcFRleHRQYXR0ZXJuID0gVGNCZGRTZXJ2aWNlLnN0ZXBUZXh0UGF0dGVybjtcclxuICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAkc2NvcGUuc2F2ZVN0b3J5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuY2FuU2F2ZVN0b3J5KCkpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeS5wYXRoID0gJHNjb3BlLmRpclBhdGggKyAkc2NvcGUuc3RvcnkubmFtZSArIFwiLnN0b3J5XCI7XHJcbiAgICAgICAgICAgICAgICBpZiAoJ1BPU1QnID09PSAkc2NvcGUuYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmlwcGVkUGF0aEFycmF5ID0gJHNjb3BlLmRpclBhdGguc3BsaXQoJy8nKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RyaXBwZWRQYXRoID0gc3RyaXBwZWRQYXRoQXJyYXkuc2xpY2UoMCwgc3RyaXBwZWRQYXRoQXJyYXkubGVuZ3RoIC0gMSkuam9pbignLycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJpcHBlZFBhdGggIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwcGVkUGF0aCArPSAnLyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJy9zdG9yaWVzL3N0b3J5Lmpzb24nLCAkc2NvcGUuc3RvcnkpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3BhZ2Uvc3Rvcmllcy92aWV3LycgKyBzdHJpcHBlZFBhdGggKyAkc2NvcGUuc3RvcnkubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcmlnaW5hbFN0b3J5ID0gYW5ndWxhci5jb3B5KCRzY29wZS5zdG9yeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcGVuRXJyb3JNb2RhbChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zdG9yeS5uYW1lICE9PSAkc2NvcGUub3JpZ2luYWxTdG9yeS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeS5vcmlnaW5hbFBhdGggPSAkc2NvcGUub3JpZ2luYWxTdG9yeS5wYXRoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5wdXQoJy9zdG9yaWVzL3N0b3J5Lmpzb24nLCAkc2NvcGUuc3RvcnkpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3JpZ2luYWxTdG9yeSA9IGFuZ3VsYXIuY29weSgkc2NvcGUuc3RvcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BlbkVycm9yTW9kYWwocmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5jYW5SdW5TdG9yeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRzY29wZS5zdG9yeUZvcm0uJHZhbGlkICYmICEkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgJHNjb3BlLnJ1blN0b3J5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmNhblJ1blN0b3J5KCkpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zYXZlU3RvcnkoKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5vcGVuUnVubmVyTW9kYWwoKS5yZXN1bHQudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGFzc2VzID0gZGF0YS5jbGFzc2VzO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeUZvcm1DbGFzcyA9ICdjb2wtbWQtNic7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVyQ2xhc3MgPSAnY29sLW1kLTYnO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lclZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lckluUHJvZ3Jlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NFbnRyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0VudHJ5LnBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbUVudHJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29va2llU3RvcmUucHV0KGNsYXNzRW50cnkuZnVsbE5hbWUgKyBcIi5cIiArIHBhcmFtRW50cnkua2V5LCBwYXJhbUVudHJ5LnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGpzb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3J5UGF0aHM6IFt7cGF0aDogJHNjb3BlLnN0b3J5LnBhdGh9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlczogY2xhc3NlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvb3Z5Q29tcG9zaXRlczogJHNjb3BlLmdyb292eUNvbXBvc2l0ZXNcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJy9ydW5uZXIvcnVuLmpzb24nLCBqc29uKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJTdWNjZXNzID0gKHJlc3BvbnNlLmRhdGEuc3RhdHVzID09PSAnT0snKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVySW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0UmVwb3J0cyhyZXNwb25zZS5kYXRhLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVyU3VjY2VzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcGVuRXJyb3JNb2RhbChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wZW5FcnJvck1vZGFsKHJlc3BvbnNlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5nZXRSZXBvcnRzID0gZnVuY3Rpb24ocmVwb3J0c0lkKSB7XHJcbiAgICAgICAgICAgICRodHRwLmdldCgnL2FwaS92MS9yZXBvcnRlcnMvbGlzdC8nICsgcmVwb3J0c0lkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydHMgPSByZXNwb25zZS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydHMuaWQgPSByZXBvcnRzSWQ7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2V0UGVuZGluZ1N0ZXBzKCRzY29wZS5yZXBvcnRzKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPIFRlc3RcclxuICAgICAgICAgICAgICAgICRzY29wZS5vcGVuRXJyb3JNb2RhbChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuZ2V0UmVwb3J0VXJsID0gZnVuY3Rpb24ocmVwb3J0c0lkLCByZXBvcnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcvYXBpL3YxL3JlcG9ydGVycy9nZXQvJyArIHJlcG9ydHNJZCArICcvJyArIHJlcG9ydDtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5vcGVuUnVubmVyTW9kYWwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFRjQmRkU2VydmljZS5vcGVuUnVubmVyUGFyYW1ldGVyc01vZGFsKGZhbHNlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5nZXRSdW5uZXJQcm9ncmVzc0NzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFRjQmRkU2VydmljZS5nZXRSdW5uZXJQcm9ncmVzc0Nzcygkc2NvcGUuc3RvcnlSdW5uZXJJblByb2dyZXNzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5nZXRSdW5uZXJTdGF0dXNDc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBUY0JkZFNlcnZpY2UuZ2V0UnVubmVyU3RhdHVzQ3NzKFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0b3J5UnVubmVySW5Qcm9ncmVzcyxcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lclN1Y2Nlc3MsXHJcbiAgICAgICAgICAgICAgICAoJHNjb3BlLnBlbmRpbmdTdGVwcyA+IDApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuc2V0UGVuZGluZ1N0ZXBzID0gZnVuY3Rpb24ocmVwb3J0cykge1xyXG4gICAgICAgICAgICAkc2NvcGUucGVuZGluZ1N0ZXBzID0gW107XHJcbiAgICAgICAgICAgIHJlcG9ydHMuZm9yRWFjaChmdW5jdGlvbihyZXBvcnQpIHtcclxuICAgICAgICAgICAgICAgIHJlcG9ydC5zdGVwcy5mb3JFYWNoKGZ1bmN0aW9uKHN0ZXApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RlcC5zdGF0dXMgPT09ICdwZW5kaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGVuZGluZ1N0ZXBzLnB1c2goe3RleHQ6IHN0ZXAudGV4dH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5oYXNQZW5kaW5nU3RlcHMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRzY29wZS5wZW5kaW5nU3RlcHMgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUucGVuZGluZ1N0ZXBzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuZ2V0U3RvcnlSdW5uZXJTdGF0dXNUZXh0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gVGNCZGRTZXJ2aWNlLmdldFN0b3J5UnVubmVyU3RhdHVzVGV4dChcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdG9yeVJ1bm5lckluUHJvZ3Jlc3MsXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcnlSdW5uZXJTdWNjZXNzLFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBlbmRpbmdTdGVwcy5sZW5ndGhcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5yZW1vdmVDb2xsZWN0aW9uRWxlbWVudCA9IFRjQmRkU2VydmljZS5yZW1vdmVDb2xsZWN0aW9uRWxlbWVudDtcclxuICAgICAgICAkc2NvcGUuYWRkRWxlbWVudCA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb24ucHVzaCh7fSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuYWRkU2NlbmFyaW9FbGVtZW50ID0gZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcclxuICAgICAgICAgICAgY29sbGVjdGlvbi5wdXNoKHt0aXRsZTogJycsIG1ldGE6IFtdLCBzdGVwczogW10sIGV4YW1wbGVzVGFibGU6ICcnfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUucmV2ZXJ0U3RvcnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5zdG9yeSA9IGFuZ3VsYXIuY29weSgkc2NvcGUub3JpZ2luYWxTdG9yeSk7XHJcbiAgICAgICAgICAgICRzY29wZS5zdG9yeUZvcm0uJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuY2FuUmV2ZXJ0U3RvcnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhYW5ndWxhci5lcXVhbHMoJHNjb3BlLnN0b3J5LCAkc2NvcGUub3JpZ2luYWxTdG9yeSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkc2NvcGUuY2FuRGVsZXRlU3RvcnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkc2NvcGUuYWN0aW9uID09PSAnUFVUJyAmJiAhJHNjb3BlLnN0b3J5UnVubmVySW5Qcm9ncmVzcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICRzY29wZS5kZWxldGVTdG9yeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBhdGggPSAkc2NvcGUuZGlyUGF0aCArICRzY29wZS5zdG9yeS5uYW1lICsgJy5zdG9yeSc7XHJcbiAgICAgICAgICAgIFRjQmRkU2VydmljZS5kZWxldGVTdG9yeShwYXRoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5zdGVwRW50ZXJLZXkgPSBUY0JkZFNlcnZpY2UubmV3Q29sbGVjdGlvbkl0ZW07XHJcbiAgICAgICAgLy8gVE9ETyBUZXN0XHJcbiAgICAgICAgJHNjb3BlLmNsaWNrUGVuZGluZ1N0ZXAgPSBmdW5jdGlvbihzdGVwVGV4dCkge1xyXG4gICAgICAgICAgICB2YXIgY29tcG9zaXRlQ2xhc3MgPSAkY29va2llU3RvcmUuZ2V0KFwiY29tcG9zaXRlQ2xhc3NcIik7XHJcbiAgICAgICAgICAgIGlmIChjb21wb3NpdGVDbGFzcyA9PT0gdW5kZWZpbmVkIHx8IGNvbXBvc2l0ZUNsYXNzID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFRjQmRkU2VydmljZS5vcGVuQ29tcG9zaXRlQ2xhc3Moc3RlcFRleHQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRsb2NhdGlvbi5zZWFyY2goJ3N0ZXBUZXh0Jywgc3RlcFRleHQpLnBhdGgoJy9wYWdlL2NvbXBvc2l0ZXMvY29tcG9zaXRlcy5jb20udGVjaG5vbG9neWNvbnZlcnNhdGlvbnMuYmRkLnN0ZXBzLicgKyBjb21wb3NpdGVDbGFzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIFRPRE8gVGVzdFxyXG4gICAgICAgICRzY29wZS5vcGVuRXJyb3JNb2RhbCA9IFRjQmRkU2VydmljZS5vcGVuRXJyb3JNb2RhbDtcclxuICAgIH0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==