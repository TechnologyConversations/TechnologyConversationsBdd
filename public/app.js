angular.module("storiesModule",["ngRoute","ngCookies","ui.bootstrap","ui.sortable","configModule","bodyModule","topMenuModule","storyModule","compositeClassesModule","compositesModule","runnerModule","loginModule","tourModule"]).service("TcBddService",["$modal","$http","$location","$q",function(e,t,o,s){this.openCompositeClass=function(t){var o=this;e.open({templateUrl:"/assets/html/compositeClasses/compositeClasses.tmpl.html",controller:"compositeClassesCtrl",resolve:{compositeClasses:["$route","$http","$modal",function(){return o.getJson("/groovyComposites",!1)}],compositeStepText:function(){return t}}})},this.newCollectionItem=function(e,t){13===e.which&&t.push({})},this.removeCollectionElement=function(e,t){e.splice(t,1)},this.buttonCssClass=function(e){return{"btn-success":e.$valid,"btn-danger":e.$invalid}},this.getRunnerProgressCss=function(e){return{"progress progress-striped active":e,progress:!e}},this.getStoryRunnerStatusText=function(e,t,o){return e?"Story run is in progress":t?o>0?"Story run was successful with "+o+" pending steps":"Story run was successful":"Story run failed"},this.getRunnerStatusCss=function(e,t,o){return{"progress-bar progress-bar-info":e,"progress-bar progress-bar-warning":!e&&t&&o,"progress-bar progress-bar-success":!e&&t&&!o,"progress-bar progress-bar-danger":!e&&!t}},this.openRunnerParametersModal=function(t){var o=this;return e.open({templateUrl:"/assets/html/runner/runnerParams.tmpl.html",controller:"runnerParamsCtrl",resolve:{data:["$route","$http","$modal",function(){return o.getJson("/steps/classes.json",!0)}],showGetApi:function(){return t}}})},this.openDir=function(e,t){if(".."===t){var o=e.rootPath.split("/");e.rootPath=o.slice(0,o.length-2).join("/"),""!==e.rootPath&&(e.rootPath+="/"),this.getStories(e,"")}else this.getStories(e,t)},this.getStories=function(e,o){var s=this;void 0===e.rootPath&&(e.rootPath=""),t.get("/stories/list.json?path="+e.rootPath+o).then(function(t){e.files=t.data,""!==o&&(e.rootPath+=o+"/")},function(e){s.openErrorModal(e.data)})},this.stepTextPattern=function(){return/^(Given|When|Then) .+$/},this.openConfirmationModal=function(t){return e.open({templateUrl:"/assets/html/confirmationModal.tmpl.html",controller:"modalCtrl",resolve:{data:function(){return t}}})},this.classNamePattern=function(){return/^[a-zA-Z_$][a-zA-Z\d_$]*$/},this.cssClass=function(e){return{"has-error":e.$invalid,"has-success":e.$valid&&e.$dirty}},this.deleteStory=function(e){var n=this,r=s.defer(),a={status:"Delete Story",message:"Are you sure you want to delete this story?"},i=this.openConfirmationModal(a);return i.result.then(function(){t.delete("/stories/story/"+e).then(function(){o.path("/page/stories/new/"),r.resolve("OK")},function(e){n.openErrorModal(e.data),r.reject("NOK")})},function(){r.reject("NOK")}),r.promise},this.getJson=function(e,o){var s=this;return t.get(e,{cache:o}).then(function(e){return e.data},function(e){s.openErrorModal(e.data)})},this.openErrorModal=function(t){e.open({templateUrl:"/assets/html/errorModal.tmpl.html",controller:"modalCtrl",resolve:{data:function(){return t}}})}}]).controller("modalCtrl",["$scope","$modalInstance","data",function(e,t,o){e.data=o,e.ok=function(){t.close("ok")},e.cancel=function(){t.dismiss("cancel")}}]).controller("storiesCtrl",["$scope","$http","$modal","$modalInstance","$location","$q","TcBddService",function(e,t,o,s,n,r,a){a.getStories(e,""),e.openDir=function(t){a.openDir(e,t)},e.close=function(){s.close()},e.viewStoryUrl=function(t){return"/page/stories/view/"+e.rootPath+t},e.allowToPrevDir=function(){return""!==e.rootPath},e.deleteStory=function(t,o){var s=e.rootPath+t+".story";a.deleteStory(s).then(function(){e.files.stories.splice(o,1)})},e.createDirectory=function(o){var s='{"path": "'+e.rootPath+o+'"}';t.post("/stories/dir.json",s).then(function(){e.files.dirs.push({name:o})},function(e){a.openErrorModal(e.data)})}}]),angular.module("configModule",[]).config(["$routeProvider","$locationProvider",function(e,t){t.html5Mode(!0),e.when("/page/tour/",{templateUrl:"/assets/html/tour/tour.tmpl.html",controller:"tourCtrl"}).when("/page/stories/new/",{templateUrl:"/assets/html/story/story.tmpl.html",controller:"storyCtrl",resolve:{story:["$http","$modal","TcBddService",function(e,t,o){return o.getJson("/stories/story.json",!1)}],steps:["$http","$modal","TcBddService",function(e,t,o){return o.getJson("/steps/list.json",!0)}],groovyComposites:["$http","$modal","TcBddService",function(e,t,o){return o.getJson("/groovyComposites",!0)}]}}).when("/page/stories/new/:path*",{templateUrl:"/assets/html/story/story.tmpl.html",controller:"storyCtrl",resolve:{story:["$route","$http","$modal","TcBddService",function(e,t,o,s){return s.getJson("/stories/story.json?path="+e.current.params.path+".story",!1)}],steps:["$http","$modal","TcBddService",function(e,t,o){return o.getJson("/steps/list.json",!0)}],groovyComposites:["$http","$modal","TcBddService",function(e,t,o){return o.getJson("/groovyComposites",!0)}]}}).when("/page/stories/view/:path*",{templateUrl:"/assets/html/story/story.tmpl.html",controller:"storyCtrl",resolve:{story:["$route","$http","$modal","TcBddService",function(e,t,o,s){return s.getJson("/stories/story.json?path="+e.current.params.path+".story",!1)}],steps:["$http","$modal","TcBddService",function(e,t,o){return o.getJson("/steps/list.json",!0)}],groovyComposites:["$http","$modal","TcBddService",function(e,t,o){return o.getJson("/groovyComposites",!0)}]},reloadOnSearch:!1}).when("/page/composites/:className*",{templateUrl:"/assets/html/composites/composites.tmpl.html",controller:"compositesCtrl",resolve:{compositesClass:["$route","$http",function(e,t){var o=e.current.params.className,s="/groovyComposites/"+o;return t.get(s,{cache:!1}).then(function(e){return e.data},function(){var e=o.substring(0,o.lastIndexOf("."));return{"class":e,composites:[{stepText:"",compositeSteps:[{}]}],isNew:!0}})}],steps:["$http","$modal","TcBddService",function(e,t,o){return o.getJson("/steps/list.json",!1)}]}}).when("/page/runner/",{templateUrl:"/assets/html/runner/runner.tmpl.html",controller:"runnerCtrl",resolve:{data:["$route",function(e){return{reportsPath:e.current.params.path}}]}}).when("/page/login/",{templateUrl:"/assets/html/login/login.tmpl.html",controller:"loginCtrl"}).when("/page/loginWelcome/",{templateUrl:"/assets/html/login/loginWelcome.tmpl.html",controller:"loginWelcomeCtrl"}).otherwise({redirectTo:"/page/tour"})}]),angular.module("bodyModule",["ngJoyRide"]).controller("bodyCtrl",["$scope",function(e){e.startJoyRideFlag=!1,e.configJoyRide=[{type:"element",selector:"#menu",heading:"Navigation",text:"The main purpose of the navigation menu is to provide quick links to major sections of the application as well as the information about the current location.",placement:"bottom",scroll:!0},{type:"element",selector:"#browseStories",heading:"Browse Stories",text:"Displays the dialog that can be used to open an existing or create a new story.",placement:"bottom",scroll:!0},{type:"element",selector:"#browseComposites",heading:"Browse Composites",text:"Displays the dialog that can be used to open an existing or create a new composites class.",placement:"bottom",scroll:!0},{type:"element",selector:"#runner",heading:"Run Stories",text:"Displays the dialog that can be used to select one or more stories and directories with stories that will be run.",placement:"bottom",scroll:!0},{type:"element",selector:"#menu",heading:"Navigation",text:"This tour is still under construction. More will be added soon.",placement:"bottom",scroll:!0}],e.onFinishJoyRide=function(){console.log("TOUR FINISHED")},e.startJoyRide=function(){e.startJoyRideFlag=!0}}]),angular.module("compositeClassesModule",[]).controller("compositeClassesCtrl",["$scope","$http","$modalInstance","compositeClasses","compositeStepText","TcBddService",function(e,t,o,s,n,r){e.compositeClasses=s,e.compositeStepText=n,e.close=function(){o.close()},e.compositeClassUrl=function(t,o){var s="/page/composites/";void 0!==t&&""!==t&&(s+=t+".");var n;return n=o.split(o.indexOf("/")>=0?"/":"\\"),s+=n[n.length-1],void 0!==e.compositeStepText&&""!==e.compositeStepText&&(s+="?stepText="+e.compositeStepText),s},e.compositeClassText=function(e){var t;t=e.split(e.indexOf("/")>=0?"/":"\\");var o=t[t.length-1];return o.indexOf(".")>=0&&(o=o.substr(0,o.lastIndexOf("."))),o},e.classNamePattern=r.classNamePattern,e.cssClass=r.cssClass,e.data={"class":""}}]),angular.module("compositesModule",[]).controller("compositesCtrl",["$scope","$http","$modal","$location","$cookieStore","compositesClass","steps","TcBddService",function(e,t,o,s,n,r,a,i){e.addNewComposite=function(){e.composite={stepText:"",compositeSteps:[{}]},e.compositesClass.composites.push(e.composite)},e.addStepTextParam=function(){void 0!==s.search().stepText&&""!==s.search().stepText&&e.compositesClass.composites.push({stepText:s.search().stepText,compositeSteps:[]})},e.addNewCompositeStep=function(){e.composite.compositeSteps.push({})},e.setLastComposite=function(){if(void 0!==e.compositesClass){var t=e.compositesClass.composites.length;e.composite=e.compositesClass.composites[t-1]}else e.composite={}},e.compositesClass=r,e.addStepTextParam(),e.originalCompositesClass=angular.copy(r),e.setLastComposite(),e.steps=a,e.classNamePattern=i.classNamePattern,e.stepTextPattern=i.stepTextPattern,e.cssClass=i.cssClass,e.buttonCssClass=function(e,t){return i.buttonCssClass(e.$valid?t:e)},e.openComposite=function(t){e.composite=t},e.newCollectionItem=i.newCollectionItem,e.removeCollectionElement=i.removeCollectionElement,e.revertCompositesClass=function(){e.compositesClass=angular.copy(e.originalCompositesClass),e.composite=e.compositesClass.composites[0]},e.canRevertCompositesClass=function(){return!angular.equals(e.compositesClass,e.originalCompositesClass)},e.canSaveCompositesClass=function(t){var o=t.$valid,s=!angular.equals(e.compositesClass,e.originalCompositesClass),n=e.compositesClass.isNew;return(n||s)&&o},e.compositesAreValid=function(t){var o=t.$valid;return angular.forEach(e.compositesClass.composites,function(e){void 0===e.stepText||""===e.stepText?o=!1:(void 0===e.compositeSteps||0===e.compositeSteps.length)&&(o=!1)}),o},e.saveCompositesClass=function(){t.put("/groovyComposites",e.compositesClass).then(function(){e.deleteCompositesClassWithoutConfirmation(),s.path("/page/composites/"+e.compositesClass.class+".groovy"),e.compositesClass.isNew=!1,e.originalCompositesClass=angular.copy(e.compositesClass),n.put("compositeClass",e.compositesClass.class)},function(e){i.openErrorModal(e.data)})},e.canDeleteCompositesClass=function(){return!e.compositesClass.isNew},e.deleteCompositesClassWithoutConfirmation=function(){var o=e.compositesClass.class,s=e.originalCompositesClass.class;o!==s&&t.delete("/groovyComposites/"+s).then(function(){},function(e){i.openErrorModal(e.data)})},e.deleteCompositesClass=function(){var o={status:"Delete Composites Class",message:"Are you sure you want to delete this composites class?"},n=i.openConfirmationModal(o);n.result.then(function(){t.delete("/groovyComposites/"+e.originalCompositesClass.class).then(function(){s.path("/")},function(e){i.openErrorModal(e.data)})},function(){})},e.saveCompositesText=function(){return e.compositesClass.isNew?"Create New Composites":"Update Composites"}}]),angular.module("loginModule",[]).controller("loginCtrl",["$scope","$location","TcBddService",function(e,t,o){e.init=function(){e.users=[]},e.cssClass=o.cssClass,e.buttonCssClass=o.buttonCssClass,e.canLogin=function(){return e.loginForm.$valid},e.register=function(){e.users.push(e.user),e.user={}},e.delete=function(){angular.forEach(e.users,function(t,o){t.username===e.user.username&&(e.users.splice(o,1),e.user={})})},e.login=function(){angular.forEach(e.users,function(o){o.username===e.user.username&&t.path("/page/loginWelcome")}),e.user.notRegistered=!0},e.init()}]).controller("loginWelcomeCtrl",["$scope",function(){}]),angular.module("runnerModule",[]).controller("runnerCtrl",["$scope","$modal","$http","$location","$timeout","TcBddService",function(e,t,o,s,n,r){e.openRunnerSelector=function(){return t.open({templateUrl:"/assets/html/runner/runnerSelector.tmpl.html",controller:"runnerSelectorCtrl",resolve:{data:function(){return{}}}})},e.openRunner=function(){var t=e.openRunnerSelector();void 0!==t&&t.result.then(function(t){var s=[];t.dirs.forEach(function(e){s.push({path:e.path+"/**/*.story"})}),t.stories.forEach(function(e){s.push({path:e.path})}),r.openRunnerParametersModal(!0).result.then(function(t){var n=t.classes,r=t.action;o.get("/groovyComposites").then(function(t){var o=t.data;e.apiJson={storyPaths:s,classes:n,groovyComposites:o},"run"===r?(e.run(e.apiJson),e.showApi=!1):e.showApi=!0})})})},e.run=function(t){var s="/api/v1/reporters/get/";e.reportsUrl="",e.storyRunnerSuccess=!1,e.showRunnerProgress=!0,o.post("/runner/run.json",t).then(function(t){var o=t.data;"OK"===o.status?(e.reportsUrl=s+o.reportsPath,e.storyRunnerInProgress=!0,e.getReports(o.id)):"FAILED"===o.status?(e.reportsUrl=s+o.reportsPath,e.storyRunnerInProgress=!1):r.openErrorModal(o)},function(t){e.storyRunnerInProgress=!1,e.storyRunnerSuccess=!1,r.openErrorModal(t.data)})},e.getReports=function(t){o.get("/api/v1/reporters/list/"+t).then(function(o){e.reports=o.data,"finished"!==e.reports.status?(e.showRunnerProgress=!0,n(function(){e.getReports(t)},15e3)):e.showRunnerProgress=!1},function(o){"ID is NOT correct"===o.data.message?n(function(){e.getReports(t)},15e3):(e.showRunnerProgress=!1,r.openErrorModal(o.data))})},e.getRunnerStatusCss=function(){return r.getRunnerStatusCss(e.storyRunnerInProgress,e.storyRunnerSuccess,e.pendingSteps>0)},e.getStoryRunnerStatusText=function(){return e.storyRunnerInProgress?"Stories run is in progress":"Stories run is finished"},e.getRunnerProgressCss=function(){return r.getRunnerProgressCss(e.storyRunnerInProgress)},e.init=function(){e.storyRunnerInProgress=!1,e.storyRunnerSuccess=!1,e.showRunnerProgress=!1,e.pendingSteps=[],e.reportsUrl="",e.openRunner(),e.showApi=!1},e.apiUrl=function(){return s.protocol()+"://"+s.host()+":"+s.port()+"/runner/run.json"},e.init()}]).controller("runnerSelectorCtrl",["$scope","$http","$modal","$modalInstance","TcBddService",function(e,t,o,s,n){e.files={dirs:[],stories:[]},n.getStories(e,""),e.openDir=function(t){n.openDir(e,t)},e.cancelRunnerSelector=function(){s.dismiss("cancel")},e.okRunnerSelector=function(){var t={dirs:[],stories:[]};angular.forEach(e.files.dirs,function(o){o.selected&&t.dirs.push({path:e.rootPath+o.name})}),angular.forEach(e.files.stories,function(o){o.selected&&t.stories.push({path:e.rootPath+o.name+".story"})}),s.close(t)},e.allowToPrevDir=function(){return""!==e.rootPath},e.canContinue=function(){var t=!1;return angular.forEach(e.files.dirs,function(e){e.selected&&(t=!0)}),t||angular.forEach(e.files.stories,function(e){e.selected&&(t=!0)}),t}}]).controller("runnerParamsCtrl",["$scope","$modalInstance","$cookieStore","data","showGetApi",function(e,t,o,s,n){e.classes=s.classes,e.paramArray=[],e.setParams=function(){e.classes.forEach(function(e){e.params.forEach(function(t){if(void 0!==t.value&&""!==t.value)t.disabled=!0;else{t.disabled=!1;try{t.value=o.get(e.fullName+"."+t.key)}catch(s){console.log("Could not retrieve cookie "+e.fullName+"."+t.key),console.log(s.message)}}})})},e.hasOptions=function(e){return e?e.length>0:!1},e.hasParams=function(e){return void 0!==e.params&&e.params.length>0},e.ok=function(){t.close({action:"run",classes:e.classes})},e.cancel=function(){t.dismiss("cancel")},e.showGetApi=function(){return n},e.getApi=function(){t.close({action:"api",classes:e.classes})},e.paramElementId=function(e,t){var o=e.charAt(0).toLowerCase()+e.slice(1),s=t.charAt(0).toUpperCase()+t.slice(1);return o+s},e.setParams()}]),angular.module("storyModule",[]).controller("storyCtrl",["$scope","$http","$modal","$location","$cookieStore","$q","$anchorScroll","$timeout","story","steps","groovyComposites","TcBddService",function(e,t,o,s,n,r,a,i,l,c,u,p){e.pendingSteps=[],e.setAction=function(){e.action=""!==e.story.name?"PUT":"POST"},e.expandPanels=function(){var t=!0;void 0===e.panelsExpanded?e.panelsExpanded=!1:(e.panelsExpanded=!e.panelsExpanded,t=e.panelsExpanded),e.panels={story:e.panelsExpanded,description:e.panelsExpanded,meta:e.panelsExpanded,narrative:e.panelsExpanded,givenStories:e.panelsExpanded,lifecycle:e.panelsExpanded,scenarios:t}},e.story=l,e.steps=c,e.groovyComposites=u,e.stepTypes=["GIVEN","WHEN","THEN"],e.storyFormClass="col-md-12",e.storyRunnerVisible=!1,e.storyRunnerInProgress=!1,e.storyRunnerSuccess=!0,e.expandPanels(),e.originalStory=angular.copy(l);var d=e.story.path.split("/");e.dirPath=d.slice(0,d.length-1).join("/"),""!==e.dirPath&&(e.dirPath+="/"),e.setAction(),e.cssClass=p.cssClass,e.buttonCssClass=p.buttonCssClass,e.canSaveStory=function(){var t=e.storyForm.$valid,o=!angular.equals(e.story,e.originalStory);return t&&o},e.stepTextPattern=p.stepTextPattern,e.saveStory=function(){if(e.canSaveStory())if(e.story.path=e.dirPath+e.story.name+".story","POST"===e.action){var o=e.dirPath.split("/"),n=o.slice(0,o.length-1).join("/");""!==n&&(n+="/"),t.post("/stories/story.json",e.story).then(function(){s.path("/page/stories/view/"+n+e.story.name),e.originalStory=angular.copy(e.story)},function(t){e.openErrorModal(t.data)})}else e.story.name!==e.originalStory.name&&(e.story.originalPath=e.originalStory.path),t.put("/stories/story.json",e.story).then(function(){e.originalStory=angular.copy(e.story)},function(t){e.openErrorModal(t.data)})},e.canRunStory=function(){return e.storyForm.$valid&&!e.storyRunnerInProgress},e.runStory=function(){e.canRunStory()&&(e.saveStory(),e.openRunnerModal().result.then(function(o){var s=o.classes;e.storyFormClass="col-md-6",e.storyRunnerClass="col-md-6",e.storyRunnerVisible=!0,e.storyRunnerInProgress=!0,s.forEach(function(e){e.params.forEach(function(t){n.put(e.fullName+"."+t.key,t.value)})});var r={storyPaths:[{path:e.story.path}],classes:s,groovyComposites:e.groovyComposites};t.post("/runner/run.json",r).then(function(t){e.getReports(t.data.id)},function(t){e.storyRunnerSuccess=!1,e.storyRunnerInProgress=!1,e.openErrorModal(t.data)})},function(t){e.openErrorModal(t.data)}))},e.getReports=function(o){t.get("/api/v1/reporters/list/"+o).then(function(t){if("finished"!==t.data.status)e.storyRunnerInProgress=!0,i(function(){e.getReports(o)},5e3);else{var s=t.data.reports;e.reports=s,e.reports.id=o,e.setPendingSteps(s),e.storyRunnerInProgress=!1,e.storyRunnerSuccess=e.isStoryRunnerSuccess(s)}},function(t){"ID is NOT correct"===t.data.message?i(function(){e.getReports(o)},5e3):(e.storyRunnerInProgress=!1,p.openErrorModal(t.data))})},e.isStoryRunnerSuccess=function(e){var t=!0;return e.forEach(function(e){e.steps.forEach(function(e){"successful"!==e.status&&"pending"!==e.status&&"notPerformed"!==e.status&&(t=!1)})}),t},e.getReportUrl=function(e,t){return"/api/v1/reporters/get/"+e+"/"+t},e.openRunnerModal=function(){return p.openRunnerParametersModal(!1)},e.getRunnerProgressCss=function(){return p.getRunnerProgressCss(e.storyRunnerInProgress)},e.getRunnerStatusCss=function(){return p.getRunnerStatusCss(e.storyRunnerInProgress,e.storyRunnerSuccess,e.pendingSteps>0)},e.setPendingSteps=function(t){e.pendingSteps=[],t.forEach(function(t){t.steps.forEach(function(t){"pending"===t.status&&e.pendingSteps.push({text:t.text})})})},e.hasPendingSteps=function(){return void 0!==e.pendingSteps&&e.pendingSteps.length>0},e.getStoryRunnerStatusText=function(){return p.getStoryRunnerStatusText(e.storyRunnerInProgress,e.storyRunnerSuccess,e.pendingSteps.length)},e.removeCollectionElement=p.removeCollectionElement,e.addElement=function(e){e.push({})},e.addScenarioElement=function(e){e.push({title:"",meta:[],steps:[],examplesTable:""})},e.revertStory=function(){e.story=angular.copy(e.originalStory),e.storyForm.$setPristine()},e.canRevertStory=function(){return!angular.equals(e.story,e.originalStory)},e.canDeleteStory=function(){return"PUT"===e.action&&!e.storyRunnerInProgress},e.deleteStory=function(){var t=e.dirPath+e.story.name+".story";p.deleteStory(t)},e.stepEnterKey=p.newCollectionItem,e.clickPendingStep=function(e){var t=n.get("compositeClass");return void 0===t||""===t?p.openCompositeClass(e):s.search("stepText",e).path("/page/composites/"+t+".groovy")},e.openErrorModal=p.openErrorModal}]),angular.module("topMenuModule",[]).controller("topMenuController",["$scope","$modal","$location","TcBddService",function(e,t,o,s){e.openStory=function(){t.open({templateUrl:"/assets/html/stories.tmpl.html",controller:"storiesCtrl",resolve:{data:function(){return{}}}})},e.openCompositeClass=function(){s.openCompositeClass()},e.getTitle=function(){var e=o.path();return 0===e.indexOf("/page/stories/view/")?"View Story":0===e.indexOf("/page/stories/new/")?"New Story":0===e.indexOf("/page/composites/")?"Composites":0===e.indexOf("/page/reports/")?"Reports":0===e.indexOf("/page/login/")?"Login":0===e.indexOf("/page/loginWelcome/")?"Welcome":""}}]),angular.module("tourModule",[]).controller("tourCtrl",["$scope",function(){}]);
//# sourceMappingURL=data:application/json;base64,